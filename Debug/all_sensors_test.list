
all_sensors_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007fa0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000458  08008140  08008140  00018140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008598  08008598  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08008598  08008598  00018598  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080085a0  080085a0  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080085a0  080085a0  000185a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080085a4  080085a4  000185a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080085a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a8  200001dc  08008784  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000384  08008784  00020384  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f3a9  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000204b  00000000  00000000  0002f5b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000df8  00000000  00000000  00031600  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d30  00000000  00000000  000323f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000186d3  00000000  00000000  00033128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fb91  00000000  00000000  0004b7fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009bcde  00000000  00000000  0005b38c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f706a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d84  00000000  00000000  000f70bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008128 	.word	0x08008128

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	08008128 	.word	0x08008128

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b974 	b.w	8000f58 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468e      	mov	lr, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d14d      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c96:	428a      	cmp	r2, r1
 8000c98:	4694      	mov	ip, r2
 8000c9a:	d969      	bls.n	8000d70 <__udivmoddi4+0xe8>
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	b152      	cbz	r2, 8000cb8 <__udivmoddi4+0x30>
 8000ca2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ca6:	f1c2 0120 	rsb	r1, r2, #32
 8000caa:	fa20 f101 	lsr.w	r1, r0, r1
 8000cae:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cb6:	4094      	lsls	r4, r2
 8000cb8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cbc:	0c21      	lsrs	r1, r4, #16
 8000cbe:	fbbe f6f8 	udiv	r6, lr, r8
 8000cc2:	fa1f f78c 	uxth.w	r7, ip
 8000cc6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cce:	fb06 f107 	mul.w	r1, r6, r7
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cde:	f080 811f 	bcs.w	8000f20 <__udivmoddi4+0x298>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 811c 	bls.w	8000f20 <__udivmoddi4+0x298>
 8000ce8:	3e02      	subs	r6, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a5b      	subs	r3, r3, r1
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cfc:	fb00 f707 	mul.w	r7, r0, r7
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x92>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d0c:	f080 810a 	bcs.w	8000f24 <__udivmoddi4+0x29c>
 8000d10:	42a7      	cmp	r7, r4
 8000d12:	f240 8107 	bls.w	8000f24 <__udivmoddi4+0x29c>
 8000d16:	4464      	add	r4, ip
 8000d18:	3802      	subs	r0, #2
 8000d1a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d1e:	1be4      	subs	r4, r4, r7
 8000d20:	2600      	movs	r6, #0
 8000d22:	b11d      	cbz	r5, 8000d2c <__udivmoddi4+0xa4>
 8000d24:	40d4      	lsrs	r4, r2
 8000d26:	2300      	movs	r3, #0
 8000d28:	e9c5 4300 	strd	r4, r3, [r5]
 8000d2c:	4631      	mov	r1, r6
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d909      	bls.n	8000d4a <__udivmoddi4+0xc2>
 8000d36:	2d00      	cmp	r5, #0
 8000d38:	f000 80ef 	beq.w	8000f1a <__udivmoddi4+0x292>
 8000d3c:	2600      	movs	r6, #0
 8000d3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d42:	4630      	mov	r0, r6
 8000d44:	4631      	mov	r1, r6
 8000d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4a:	fab3 f683 	clz	r6, r3
 8000d4e:	2e00      	cmp	r6, #0
 8000d50:	d14a      	bne.n	8000de8 <__udivmoddi4+0x160>
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d302      	bcc.n	8000d5c <__udivmoddi4+0xd4>
 8000d56:	4282      	cmp	r2, r0
 8000d58:	f200 80f9 	bhi.w	8000f4e <__udivmoddi4+0x2c6>
 8000d5c:	1a84      	subs	r4, r0, r2
 8000d5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d62:	2001      	movs	r0, #1
 8000d64:	469e      	mov	lr, r3
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	d0e0      	beq.n	8000d2c <__udivmoddi4+0xa4>
 8000d6a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d6e:	e7dd      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000d70:	b902      	cbnz	r2, 8000d74 <__udivmoddi4+0xec>
 8000d72:	deff      	udf	#255	; 0xff
 8000d74:	fab2 f282 	clz	r2, r2
 8000d78:	2a00      	cmp	r2, #0
 8000d7a:	f040 8092 	bne.w	8000ea2 <__udivmoddi4+0x21a>
 8000d7e:	eba1 010c 	sub.w	r1, r1, ip
 8000d82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d86:	fa1f fe8c 	uxth.w	lr, ip
 8000d8a:	2601      	movs	r6, #1
 8000d8c:	0c20      	lsrs	r0, r4, #16
 8000d8e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d92:	fb07 1113 	mls	r1, r7, r3, r1
 8000d96:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9a:	fb0e f003 	mul.w	r0, lr, r3
 8000d9e:	4288      	cmp	r0, r1
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x12c>
 8000da2:	eb1c 0101 	adds.w	r1, ip, r1
 8000da6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x12a>
 8000dac:	4288      	cmp	r0, r1
 8000dae:	f200 80cb 	bhi.w	8000f48 <__udivmoddi4+0x2c0>
 8000db2:	4643      	mov	r3, r8
 8000db4:	1a09      	subs	r1, r1, r0
 8000db6:	b2a4      	uxth	r4, r4
 8000db8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dbc:	fb07 1110 	mls	r1, r7, r0, r1
 8000dc0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000dc4:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc8:	45a6      	cmp	lr, r4
 8000dca:	d908      	bls.n	8000dde <__udivmoddi4+0x156>
 8000dcc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dd4:	d202      	bcs.n	8000ddc <__udivmoddi4+0x154>
 8000dd6:	45a6      	cmp	lr, r4
 8000dd8:	f200 80bb 	bhi.w	8000f52 <__udivmoddi4+0x2ca>
 8000ddc:	4608      	mov	r0, r1
 8000dde:	eba4 040e 	sub.w	r4, r4, lr
 8000de2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000de6:	e79c      	b.n	8000d22 <__udivmoddi4+0x9a>
 8000de8:	f1c6 0720 	rsb	r7, r6, #32
 8000dec:	40b3      	lsls	r3, r6
 8000dee:	fa22 fc07 	lsr.w	ip, r2, r7
 8000df2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000df6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dfa:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfe:	431c      	orrs	r4, r3
 8000e00:	40f9      	lsrs	r1, r7
 8000e02:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e06:	fa00 f306 	lsl.w	r3, r0, r6
 8000e0a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e0e:	0c20      	lsrs	r0, r4, #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fb09 1118 	mls	r1, r9, r8, r1
 8000e18:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e1c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e20:	4288      	cmp	r0, r1
 8000e22:	fa02 f206 	lsl.w	r2, r2, r6
 8000e26:	d90b      	bls.n	8000e40 <__udivmoddi4+0x1b8>
 8000e28:	eb1c 0101 	adds.w	r1, ip, r1
 8000e2c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e30:	f080 8088 	bcs.w	8000f44 <__udivmoddi4+0x2bc>
 8000e34:	4288      	cmp	r0, r1
 8000e36:	f240 8085 	bls.w	8000f44 <__udivmoddi4+0x2bc>
 8000e3a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1a09      	subs	r1, r1, r0
 8000e42:	b2a4      	uxth	r4, r4
 8000e44:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e48:	fb09 1110 	mls	r1, r9, r0, r1
 8000e4c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e50:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e54:	458e      	cmp	lr, r1
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x1e2>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e60:	d26c      	bcs.n	8000f3c <__udivmoddi4+0x2b4>
 8000e62:	458e      	cmp	lr, r1
 8000e64:	d96a      	bls.n	8000f3c <__udivmoddi4+0x2b4>
 8000e66:	3802      	subs	r0, #2
 8000e68:	4461      	add	r1, ip
 8000e6a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e6e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e72:	eba1 010e 	sub.w	r1, r1, lr
 8000e76:	42a1      	cmp	r1, r4
 8000e78:	46c8      	mov	r8, r9
 8000e7a:	46a6      	mov	lr, r4
 8000e7c:	d356      	bcc.n	8000f2c <__udivmoddi4+0x2a4>
 8000e7e:	d053      	beq.n	8000f28 <__udivmoddi4+0x2a0>
 8000e80:	b15d      	cbz	r5, 8000e9a <__udivmoddi4+0x212>
 8000e82:	ebb3 0208 	subs.w	r2, r3, r8
 8000e86:	eb61 010e 	sbc.w	r1, r1, lr
 8000e8a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e8e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e92:	40f1      	lsrs	r1, r6
 8000e94:	431f      	orrs	r7, r3
 8000e96:	e9c5 7100 	strd	r7, r1, [r5]
 8000e9a:	2600      	movs	r6, #0
 8000e9c:	4631      	mov	r1, r6
 8000e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea2:	f1c2 0320 	rsb	r3, r2, #32
 8000ea6:	40d8      	lsrs	r0, r3
 8000ea8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eac:	fa21 f303 	lsr.w	r3, r1, r3
 8000eb0:	4091      	lsls	r1, r2
 8000eb2:	4301      	orrs	r1, r0
 8000eb4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb8:	fa1f fe8c 	uxth.w	lr, ip
 8000ebc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ec0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ec4:	0c0b      	lsrs	r3, r1, #16
 8000ec6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eca:	fb00 f60e 	mul.w	r6, r0, lr
 8000ece:	429e      	cmp	r6, r3
 8000ed0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ed4:	d908      	bls.n	8000ee8 <__udivmoddi4+0x260>
 8000ed6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eda:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ede:	d22f      	bcs.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee0:	429e      	cmp	r6, r3
 8000ee2:	d92d      	bls.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4463      	add	r3, ip
 8000ee8:	1b9b      	subs	r3, r3, r6
 8000eea:	b289      	uxth	r1, r1
 8000eec:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ef0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ef4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef8:	fb06 f30e 	mul.w	r3, r6, lr
 8000efc:	428b      	cmp	r3, r1
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x28a>
 8000f00:	eb1c 0101 	adds.w	r1, ip, r1
 8000f04:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f08:	d216      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0a:	428b      	cmp	r3, r1
 8000f0c:	d914      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0e:	3e02      	subs	r6, #2
 8000f10:	4461      	add	r1, ip
 8000f12:	1ac9      	subs	r1, r1, r3
 8000f14:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f18:	e738      	b.n	8000d8c <__udivmoddi4+0x104>
 8000f1a:	462e      	mov	r6, r5
 8000f1c:	4628      	mov	r0, r5
 8000f1e:	e705      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000f20:	4606      	mov	r6, r0
 8000f22:	e6e3      	b.n	8000cec <__udivmoddi4+0x64>
 8000f24:	4618      	mov	r0, r3
 8000f26:	e6f8      	b.n	8000d1a <__udivmoddi4+0x92>
 8000f28:	454b      	cmp	r3, r9
 8000f2a:	d2a9      	bcs.n	8000e80 <__udivmoddi4+0x1f8>
 8000f2c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f30:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f34:	3801      	subs	r0, #1
 8000f36:	e7a3      	b.n	8000e80 <__udivmoddi4+0x1f8>
 8000f38:	4646      	mov	r6, r8
 8000f3a:	e7ea      	b.n	8000f12 <__udivmoddi4+0x28a>
 8000f3c:	4620      	mov	r0, r4
 8000f3e:	e794      	b.n	8000e6a <__udivmoddi4+0x1e2>
 8000f40:	4640      	mov	r0, r8
 8000f42:	e7d1      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f44:	46d0      	mov	r8, sl
 8000f46:	e77b      	b.n	8000e40 <__udivmoddi4+0x1b8>
 8000f48:	3b02      	subs	r3, #2
 8000f4a:	4461      	add	r1, ip
 8000f4c:	e732      	b.n	8000db4 <__udivmoddi4+0x12c>
 8000f4e:	4630      	mov	r0, r6
 8000f50:	e709      	b.n	8000d66 <__udivmoddi4+0xde>
 8000f52:	4464      	add	r4, ip
 8000f54:	3802      	subs	r0, #2
 8000f56:	e742      	b.n	8000dde <__udivmoddi4+0x156>

08000f58 <__aeabi_idiv0>:
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop

08000f5c <floatToString>:
//const for water level

float value = 0; // variable to store the sensor value
float level = 0; // variable to store the water level

char* floatToString(float input) {
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b086      	sub	sp, #24
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	ed87 0a01 	vstr	s0, [r7, #4]
  int integerPart = (int)input % 1000;
 8000f66:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f6a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f6e:	ee17 3a90 	vmov	r3, s15
 8000f72:	4a1c      	ldr	r2, [pc, #112]	; (8000fe4 <floatToString+0x88>)
 8000f74:	fb82 1203 	smull	r1, r2, r2, r3
 8000f78:	1191      	asrs	r1, r2, #6
 8000f7a:	17da      	asrs	r2, r3, #31
 8000f7c:	1a8a      	subs	r2, r1, r2
 8000f7e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000f82:	fb01 f202 	mul.w	r2, r1, r2
 8000f86:	1a9b      	subs	r3, r3, r2
 8000f88:	617b      	str	r3, [r7, #20]
  int decimalPart = (int)((input - integerPart) * 100) % 100;
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	ee07 3a90 	vmov	s15, r3
 8000f90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f94:	ed97 7a01 	vldr	s14, [r7, #4]
 8000f98:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f9c:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8000fe8 <floatToString+0x8c>
 8000fa0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fa4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000fa8:	ee17 3a90 	vmov	r3, s15
 8000fac:	4a0f      	ldr	r2, [pc, #60]	; (8000fec <floatToString+0x90>)
 8000fae:	fb82 1203 	smull	r1, r2, r2, r3
 8000fb2:	1151      	asrs	r1, r2, #5
 8000fb4:	17da      	asrs	r2, r3, #31
 8000fb6:	1a8a      	subs	r2, r1, r2
 8000fb8:	2164      	movs	r1, #100	; 0x64
 8000fba:	fb01 f202 	mul.w	r2, r1, r2
 8000fbe:	1a9b      	subs	r3, r3, r2
 8000fc0:	613b      	str	r3, [r7, #16]

  char* output = (char*)malloc(7 * sizeof(char)); // Allocate memory for the string
 8000fc2:	2007      	movs	r0, #7
 8000fc4:	f003 ff34 	bl	8004e30 <malloc>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	60fb      	str	r3, [r7, #12]

  sprintf(output, "%03d.%02d", integerPart, decimalPart);
 8000fcc:	693b      	ldr	r3, [r7, #16]
 8000fce:	697a      	ldr	r2, [r7, #20]
 8000fd0:	4907      	ldr	r1, [pc, #28]	; (8000ff0 <floatToString+0x94>)
 8000fd2:	68f8      	ldr	r0, [r7, #12]
 8000fd4:	f004 fc9e 	bl	8005914 <siprintf>

  return output;
 8000fd8:	68fb      	ldr	r3, [r7, #12]
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	3718      	adds	r7, #24
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	10624dd3 	.word	0x10624dd3
 8000fe8:	42c80000 	.word	0x42c80000
 8000fec:	51eb851f 	.word	0x51eb851f
 8000ff0:	08008140 	.word	0x08008140
 8000ff4:	00000000 	.word	0x00000000

08000ff8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ff8:	b5b0      	push	{r4, r5, r7, lr}
 8000ffa:	b088      	sub	sp, #32
 8000ffc:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	uint32_t numTicks = 0;
 8000ffe:	2300      	movs	r3, #0
 8001000:	617b      	str	r3, [r7, #20]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001002:	f000 ff9b 	bl	8001f3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001006:	f000 f9c9 	bl	800139c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800100a:	f000 fb23 	bl	8001654 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800100e:	f000 faf7 	bl	8001600 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001012:	f000 fa2d 	bl	8001470 <MX_ADC1_Init>
  MX_TIM4_Init();
 8001016:	f000 fa7d 	bl	8001514 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 800101a:	f000 fac7 	bl	80015ac <MX_USART1_UART_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //-------------------- ultrasonic ---------------------------
	  //Set TRIG to LOW for few uSec
	  		HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);
 800101e:	2200      	movs	r2, #0
 8001020:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001024:	48c8      	ldr	r0, [pc, #800]	; (8001348 <main+0x350>)
 8001026:	f001 ff51 	bl	8002ecc <HAL_GPIO_WritePin>
	  		usDelay(3);
 800102a:	2003      	movs	r0, #3
 800102c:	f000 fbde 	bl	80017ec <usDelay>

	  		//*** START Ultrasonic measure routine ***//
	  		//1. Output 10 usec TRIG
	  		HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_SET);
 8001030:	2201      	movs	r2, #1
 8001032:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001036:	48c4      	ldr	r0, [pc, #784]	; (8001348 <main+0x350>)
 8001038:	f001 ff48 	bl	8002ecc <HAL_GPIO_WritePin>
	  		usDelay(10);
 800103c:	200a      	movs	r0, #10
 800103e:	f000 fbd5 	bl	80017ec <usDelay>
	  		HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);
 8001042:	2200      	movs	r2, #0
 8001044:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001048:	48bf      	ldr	r0, [pc, #764]	; (8001348 <main+0x350>)
 800104a:	f001 ff3f 	bl	8002ecc <HAL_GPIO_WritePin>

	  		//2. Wait for ECHO pin rising edge
	  		while(HAL_GPIO_ReadPin(ECHO_GPIO_Port, ECHO_Pin) == GPIO_PIN_RESET);
 800104e:	bf00      	nop
 8001050:	2140      	movs	r1, #64	; 0x40
 8001052:	48bd      	ldr	r0, [pc, #756]	; (8001348 <main+0x350>)
 8001054:	f001 ff22 	bl	8002e9c <HAL_GPIO_ReadPin>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d0f8      	beq.n	8001050 <main+0x58>

	  		//3. Start measuring ECHO pulse width in usec
	  		numTicks = 0;
 800105e:	2300      	movs	r3, #0
 8001060:	617b      	str	r3, [r7, #20]
	  		while(HAL_GPIO_ReadPin(ECHO_GPIO_Port, ECHO_Pin) == GPIO_PIN_SET)
 8001062:	e005      	b.n	8001070 <main+0x78>
	  		{
	  			numTicks++;
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	3301      	adds	r3, #1
 8001068:	617b      	str	r3, [r7, #20]
	  			usDelay(2); //2.8usec
 800106a:	2002      	movs	r0, #2
 800106c:	f000 fbbe 	bl	80017ec <usDelay>
	  		while(HAL_GPIO_ReadPin(ECHO_GPIO_Port, ECHO_Pin) == GPIO_PIN_SET)
 8001070:	2140      	movs	r1, #64	; 0x40
 8001072:	48b5      	ldr	r0, [pc, #724]	; (8001348 <main+0x350>)
 8001074:	f001 ff12 	bl	8002e9c <HAL_GPIO_ReadPin>
 8001078:	4603      	mov	r3, r0
 800107a:	2b01      	cmp	r3, #1
 800107c:	d0f2      	beq.n	8001064 <main+0x6c>
	  		};

	  		//4. Estimate distance in cm
//	  		char uartBuf[50];
	  		distance = (numTicks + 0.0f)*2.8*speedOfSound;
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	ee07 3a90 	vmov	s15, r3
 8001084:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001088:	ed9f 7ab0 	vldr	s14, [pc, #704]	; 800134c <main+0x354>
 800108c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001090:	ee17 0a90 	vmov	r0, s15
 8001094:	f7ff fa60 	bl	8000558 <__aeabi_f2d>
 8001098:	a3a7      	add	r3, pc, #668	; (adr r3, 8001338 <main+0x340>)
 800109a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800109e:	f7ff fab3 	bl	8000608 <__aeabi_dmul>
 80010a2:	4602      	mov	r2, r0
 80010a4:	460b      	mov	r3, r1
 80010a6:	4614      	mov	r4, r2
 80010a8:	461d      	mov	r5, r3
 80010aa:	4ba9      	ldr	r3, [pc, #676]	; (8001350 <main+0x358>)
 80010ac:	4618      	mov	r0, r3
 80010ae:	f7ff fa53 	bl	8000558 <__aeabi_f2d>
 80010b2:	4602      	mov	r2, r0
 80010b4:	460b      	mov	r3, r1
 80010b6:	4620      	mov	r0, r4
 80010b8:	4629      	mov	r1, r5
 80010ba:	f7ff faa5 	bl	8000608 <__aeabi_dmul>
 80010be:	4602      	mov	r2, r0
 80010c0:	460b      	mov	r3, r1
 80010c2:	4610      	mov	r0, r2
 80010c4:	4619      	mov	r1, r3
 80010c6:	f7ff fd77 	bl	8000bb8 <__aeabi_d2f>
 80010ca:	4603      	mov	r3, r0
 80010cc:	4aa1      	ldr	r2, [pc, #644]	; (8001354 <main+0x35c>)
 80010ce:	6013      	str	r3, [r2, #0]

	  		//5. Print to UART terminal for debugging
	  		char* output_height = floatToString(distance);
 80010d0:	4ba0      	ldr	r3, [pc, #640]	; (8001354 <main+0x35c>)
 80010d2:	edd3 7a00 	vldr	s15, [r3]
 80010d6:	eeb0 0a67 	vmov.f32	s0, s15
 80010da:	f7ff ff3f 	bl	8000f5c <floatToString>
 80010de:	6138      	str	r0, [r7, #16]
//	  		sprintf(uartBuf, "Distance (cm)  = %s\r\n", output_height);
//	  		HAL_UART_Transmit(&huart2, (uint8_t *)uartBuf, strlen(uartBuf), HAL_MAX_DELAY);

	  //-------------------- water level sensor -------------------------
	      HAL_Delay(10);                                           // wait 10 milliseconds
 80010e0:	200a      	movs	r0, #10
 80010e2:	f000 ff9d 	bl	8002020 <HAL_Delay>
	      HAL_ADC_Start(&hadc1);
 80010e6:	489c      	ldr	r0, [pc, #624]	; (8001358 <main+0x360>)
 80010e8:	f001 f802 	bl	80020f0 <HAL_ADC_Start>
	      if (HAL_ADC_PollForConversion(&hadc1, 10) == HAL_OK) {
 80010ec:	210a      	movs	r1, #10
 80010ee:	489a      	ldr	r0, [pc, #616]	; (8001358 <main+0x360>)
 80010f0:	f001 f8e5 	bl	80022be <HAL_ADC_PollForConversion>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d10c      	bne.n	8001114 <main+0x11c>
	        value = HAL_ADC_GetValue(&hadc1);                       // read the analog value from sensor
 80010fa:	4897      	ldr	r0, [pc, #604]	; (8001358 <main+0x360>)
 80010fc:	f001 f96a 	bl	80023d4 <HAL_ADC_GetValue>
 8001100:	ee07 0a90 	vmov	s15, r0
 8001104:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001108:	4b94      	ldr	r3, [pc, #592]	; (800135c <main+0x364>)
 800110a:	edc3 7a00 	vstr	s15, [r3]
	        HAL_ADC_Stop(&hadc1);
 800110e:	4892      	ldr	r0, [pc, #584]	; (8001358 <main+0x360>)
 8001110:	f001 f8a2 	bl	8002258 <HAL_ADC_Stop>
	      }

	      level = (value * 4) / 3800; // 4 levels
 8001114:	4b91      	ldr	r3, [pc, #580]	; (800135c <main+0x364>)
 8001116:	edd3 7a00 	vldr	s15, [r3]
 800111a:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800111e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001122:	eddf 6a8f 	vldr	s13, [pc, #572]	; 8001360 <main+0x368>
 8001126:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800112a:	4b8e      	ldr	r3, [pc, #568]	; (8001364 <main+0x36c>)
 800112c:	edc3 7a00 	vstr	s15, [r3]
//	      char buffer[50];
	      char* output_level = floatToString(level);
 8001130:	4b8c      	ldr	r3, [pc, #560]	; (8001364 <main+0x36c>)
 8001132:	edd3 7a00 	vldr	s15, [r3]
 8001136:	eeb0 0a67 	vmov.f32	s0, s15
 800113a:	f7ff ff0f 	bl	8000f5c <floatToString>
 800113e:	60f8      	str	r0, [r7, #12]
//	      sprintf(buffer, "Water level: %s\r\n", output_level);
//	      HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);

//	//-------------------------- water flow --------------------------

	      FlowPx -= FlowMx;
 8001140:	4b89      	ldr	r3, [pc, #548]	; (8001368 <main+0x370>)
 8001142:	ed93 7a00 	vldr	s14, [r3]
 8001146:	4b89      	ldr	r3, [pc, #548]	; (800136c <main+0x374>)
 8001148:	edd3 7a00 	vldr	s15, [r3]
 800114c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001150:	4b85      	ldr	r3, [pc, #532]	; (8001368 <main+0x370>)
 8001152:	edc3 7a00 	vstr	s15, [r3]
	      FlowPy -= FlowMy;
 8001156:	4b86      	ldr	r3, [pc, #536]	; (8001370 <main+0x378>)
 8001158:	ed93 7a00 	vldr	s14, [r3]
 800115c:	4b85      	ldr	r3, [pc, #532]	; (8001374 <main+0x37c>)
 800115e:	edd3 7a00 	vldr	s15, [r3]
 8001162:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001166:	4b82      	ldr	r3, [pc, #520]	; (8001370 <main+0x378>)
 8001168:	edc3 7a00 	vstr	s15, [r3]
	      Flow = sqrt(FlowPx*FlowPx+FlowPy*FlowPy);
 800116c:	4b7e      	ldr	r3, [pc, #504]	; (8001368 <main+0x370>)
 800116e:	ed93 7a00 	vldr	s14, [r3]
 8001172:	4b7d      	ldr	r3, [pc, #500]	; (8001368 <main+0x370>)
 8001174:	edd3 7a00 	vldr	s15, [r3]
 8001178:	ee27 7a27 	vmul.f32	s14, s14, s15
 800117c:	4b7c      	ldr	r3, [pc, #496]	; (8001370 <main+0x378>)
 800117e:	edd3 6a00 	vldr	s13, [r3]
 8001182:	4b7b      	ldr	r3, [pc, #492]	; (8001370 <main+0x378>)
 8001184:	edd3 7a00 	vldr	s15, [r3]
 8001188:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800118c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001190:	ee17 0a90 	vmov	r0, s15
 8001194:	f7ff f9e0 	bl	8000558 <__aeabi_f2d>
 8001198:	4602      	mov	r2, r0
 800119a:	460b      	mov	r3, r1
 800119c:	ec43 2b10 	vmov	d0, r2, r3
 80011a0:	f006 fee3 	bl	8007f6a <sqrt>
 80011a4:	ec53 2b10 	vmov	r2, r3, d0
 80011a8:	4610      	mov	r0, r2
 80011aa:	4619      	mov	r1, r3
 80011ac:	f7ff fd04 	bl	8000bb8 <__aeabi_d2f>
 80011b0:	4603      	mov	r3, r0
 80011b2:	4a71      	ldr	r2, [pc, #452]	; (8001378 <main+0x380>)
 80011b4:	6013      	str	r3, [r2, #0]
	      Angle = atan(fabs(FlowPy)/fabs(FlowPx))* 180 / PI;
 80011b6:	4b6e      	ldr	r3, [pc, #440]	; (8001370 <main+0x378>)
 80011b8:	edd3 7a00 	vldr	s15, [r3]
 80011bc:	eef0 7ae7 	vabs.f32	s15, s15
 80011c0:	ee17 0a90 	vmov	r0, s15
 80011c4:	f7ff f9c8 	bl	8000558 <__aeabi_f2d>
 80011c8:	4604      	mov	r4, r0
 80011ca:	460d      	mov	r5, r1
 80011cc:	4b66      	ldr	r3, [pc, #408]	; (8001368 <main+0x370>)
 80011ce:	edd3 7a00 	vldr	s15, [r3]
 80011d2:	eef0 7ae7 	vabs.f32	s15, s15
 80011d6:	ee17 0a90 	vmov	r0, s15
 80011da:	f7ff f9bd 	bl	8000558 <__aeabi_f2d>
 80011de:	4602      	mov	r2, r0
 80011e0:	460b      	mov	r3, r1
 80011e2:	4620      	mov	r0, r4
 80011e4:	4629      	mov	r1, r5
 80011e6:	f7ff fb39 	bl	800085c <__aeabi_ddiv>
 80011ea:	4602      	mov	r2, r0
 80011ec:	460b      	mov	r3, r1
 80011ee:	ec43 2b17 	vmov	d7, r2, r3
 80011f2:	eeb0 0a47 	vmov.f32	s0, s14
 80011f6:	eef0 0a67 	vmov.f32	s1, s15
 80011fa:	f006 fd0d 	bl	8007c18 <atan>
 80011fe:	ec51 0b10 	vmov	r0, r1, d0
 8001202:	f04f 0200 	mov.w	r2, #0
 8001206:	4b5d      	ldr	r3, [pc, #372]	; (800137c <main+0x384>)
 8001208:	f7ff f9fe 	bl	8000608 <__aeabi_dmul>
 800120c:	4602      	mov	r2, r0
 800120e:	460b      	mov	r3, r1
 8001210:	4610      	mov	r0, r2
 8001212:	4619      	mov	r1, r3
 8001214:	a34a      	add	r3, pc, #296	; (adr r3, 8001340 <main+0x348>)
 8001216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800121a:	f7ff fb1f 	bl	800085c <__aeabi_ddiv>
 800121e:	4602      	mov	r2, r0
 8001220:	460b      	mov	r3, r1
 8001222:	4610      	mov	r0, r2
 8001224:	4619      	mov	r1, r3
 8001226:	f7ff fcc7 	bl	8000bb8 <__aeabi_d2f>
 800122a:	4603      	mov	r3, r0
 800122c:	4a54      	ldr	r2, [pc, #336]	; (8001380 <main+0x388>)
 800122e:	6013      	str	r3, [r2, #0]
	      if (FlowPx<0 && FlowPy<0) Angle += 180;
 8001230:	4b4d      	ldr	r3, [pc, #308]	; (8001368 <main+0x370>)
 8001232:	edd3 7a00 	vldr	s15, [r3]
 8001236:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800123a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800123e:	d512      	bpl.n	8001266 <main+0x26e>
 8001240:	4b4b      	ldr	r3, [pc, #300]	; (8001370 <main+0x378>)
 8001242:	edd3 7a00 	vldr	s15, [r3]
 8001246:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800124a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800124e:	d50a      	bpl.n	8001266 <main+0x26e>
 8001250:	4b4b      	ldr	r3, [pc, #300]	; (8001380 <main+0x388>)
 8001252:	edd3 7a00 	vldr	s15, [r3]
 8001256:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8001384 <main+0x38c>
 800125a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800125e:	4b48      	ldr	r3, [pc, #288]	; (8001380 <main+0x388>)
 8001260:	edc3 7a00 	vstr	s15, [r3]
 8001264:	e024      	b.n	80012b0 <main+0x2b8>
	      else if (FlowPx<0) Angle = 180-Angle;
 8001266:	4b40      	ldr	r3, [pc, #256]	; (8001368 <main+0x370>)
 8001268:	edd3 7a00 	vldr	s15, [r3]
 800126c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001270:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001274:	d50a      	bpl.n	800128c <main+0x294>
 8001276:	4b42      	ldr	r3, [pc, #264]	; (8001380 <main+0x388>)
 8001278:	edd3 7a00 	vldr	s15, [r3]
 800127c:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8001384 <main+0x38c>
 8001280:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001284:	4b3e      	ldr	r3, [pc, #248]	; (8001380 <main+0x388>)
 8001286:	edc3 7a00 	vstr	s15, [r3]
 800128a:	e011      	b.n	80012b0 <main+0x2b8>
	      else if (FlowPy<0) Angle = 360-Angle;
 800128c:	4b38      	ldr	r3, [pc, #224]	; (8001370 <main+0x378>)
 800128e:	edd3 7a00 	vldr	s15, [r3]
 8001292:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001296:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800129a:	d509      	bpl.n	80012b0 <main+0x2b8>
 800129c:	4b38      	ldr	r3, [pc, #224]	; (8001380 <main+0x388>)
 800129e:	edd3 7a00 	vldr	s15, [r3]
 80012a2:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8001388 <main+0x390>
 80012a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012aa:	4b35      	ldr	r3, [pc, #212]	; (8001380 <main+0x388>)
 80012ac:	edc3 7a00 	vstr	s15, [r3]
	      char* output_flow = floatToString(Flow);
 80012b0:	4b31      	ldr	r3, [pc, #196]	; (8001378 <main+0x380>)
 80012b2:	edd3 7a00 	vldr	s15, [r3]
 80012b6:	eeb0 0a67 	vmov.f32	s0, s15
 80012ba:	f7ff fe4f 	bl	8000f5c <floatToString>
 80012be:	60b8      	str	r0, [r7, #8]
	      char* output_ang = floatToString(Angle);
 80012c0:	4b2f      	ldr	r3, [pc, #188]	; (8001380 <main+0x388>)
 80012c2:	edd3 7a00 	vldr	s15, [r3]
 80012c6:	eeb0 0a67 	vmov.f32	s0, s15
 80012ca:	f7ff fe47 	bl	8000f5c <floatToString>
 80012ce:	6078      	str	r0, [r7, #4]

//	      sprintf(bufferflow,"Flow: %s\r\n", output_flow);
//	      HAL_UART_Transmit(&huart2, (uint8_t*)bufferflow, strlen(bufferflow), HAL_MAX_DELAY);

	 //----------transmit
	      sprintf(all_buffer,"%s%s%s%s",output_height,output_level,output_flow,output_ang);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	9301      	str	r3, [sp, #4]
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	9300      	str	r3, [sp, #0]
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	693a      	ldr	r2, [r7, #16]
 80012dc:	492b      	ldr	r1, [pc, #172]	; (800138c <main+0x394>)
 80012de:	482c      	ldr	r0, [pc, #176]	; (8001390 <main+0x398>)
 80012e0:	f004 fb18 	bl	8005914 <siprintf>
	      free(output_height);
 80012e4:	6938      	ldr	r0, [r7, #16]
 80012e6:	f003 fdab 	bl	8004e40 <free>
	      free(output_level);
 80012ea:	68f8      	ldr	r0, [r7, #12]
 80012ec:	f003 fda8 	bl	8004e40 <free>
	      free(output_flow);
 80012f0:	68b8      	ldr	r0, [r7, #8]
 80012f2:	f003 fda5 	bl	8004e40 <free>
	      free(output_ang);
 80012f6:	6878      	ldr	r0, [r7, #4]
 80012f8:	f003 fda2 	bl	8004e40 <free>

	      //print out in console
	      HAL_UART_Transmit(&huart2, (uint8_t*)all_buffer, strlen(all_buffer), HAL_MAX_DELAY);
 80012fc:	4824      	ldr	r0, [pc, #144]	; (8001390 <main+0x398>)
 80012fe:	f7fe ff6f 	bl	80001e0 <strlen>
 8001302:	4603      	mov	r3, r0
 8001304:	b29a      	uxth	r2, r3
 8001306:	f04f 33ff 	mov.w	r3, #4294967295
 800130a:	4921      	ldr	r1, [pc, #132]	; (8001390 <main+0x398>)
 800130c:	4821      	ldr	r0, [pc, #132]	; (8001394 <main+0x39c>)
 800130e:	f002 fd9e 	bl	8003e4e <HAL_UART_Transmit>

	      //transmit to nodemcu
		  HAL_UART_Transmit(&huart1, (uint8_t*)all_buffer, strlen(all_buffer), HAL_MAX_DELAY);
 8001312:	481f      	ldr	r0, [pc, #124]	; (8001390 <main+0x398>)
 8001314:	f7fe ff64 	bl	80001e0 <strlen>
 8001318:	4603      	mov	r3, r0
 800131a:	b29a      	uxth	r2, r3
 800131c:	f04f 33ff 	mov.w	r3, #4294967295
 8001320:	491b      	ldr	r1, [pc, #108]	; (8001390 <main+0x398>)
 8001322:	481d      	ldr	r0, [pc, #116]	; (8001398 <main+0x3a0>)
 8001324:	f002 fd93 	bl	8003e4e <HAL_UART_Transmit>

	      HAL_Delay(2000);
 8001328:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800132c:	f000 fe78 	bl	8002020 <HAL_Delay>
  {
 8001330:	e675      	b.n	800101e <main+0x26>
 8001332:	bf00      	nop
 8001334:	f3af 8000 	nop.w
 8001338:	66666666 	.word	0x66666666
 800133c:	40066666 	.word	0x40066666
 8001340:	53c8d4f1 	.word	0x53c8d4f1
 8001344:	400921fb 	.word	0x400921fb
 8001348:	40020800 	.word	0x40020800
 800134c:	00000000 	.word	0x00000000
 8001350:	3c8c7e28 	.word	0x3c8c7e28
 8001354:	20000328 	.word	0x20000328
 8001358:	20000210 	.word	0x20000210
 800135c:	20000344 	.word	0x20000344
 8001360:	456d8000 	.word	0x456d8000
 8001364:	20000348 	.word	0x20000348
 8001368:	200001f8 	.word	0x200001f8
 800136c:	200001fc 	.word	0x200001fc
 8001370:	20000200 	.word	0x20000200
 8001374:	20000204 	.word	0x20000204
 8001378:	20000208 	.word	0x20000208
 800137c:	40668000 	.word	0x40668000
 8001380:	2000020c 	.word	0x2000020c
 8001384:	43340000 	.word	0x43340000
 8001388:	43b40000 	.word	0x43b40000
 800138c:	08008154 	.word	0x08008154
 8001390:	2000032c 	.word	0x2000032c
 8001394:	200002e4 	.word	0x200002e4
 8001398:	200002a0 	.word	0x200002a0

0800139c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b094      	sub	sp, #80	; 0x50
 80013a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013a2:	f107 0320 	add.w	r3, r7, #32
 80013a6:	2230      	movs	r2, #48	; 0x30
 80013a8:	2100      	movs	r1, #0
 80013aa:	4618      	mov	r0, r3
 80013ac:	f003 fd50 	bl	8004e50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013b0:	f107 030c 	add.w	r3, r7, #12
 80013b4:	2200      	movs	r2, #0
 80013b6:	601a      	str	r2, [r3, #0]
 80013b8:	605a      	str	r2, [r3, #4]
 80013ba:	609a      	str	r2, [r3, #8]
 80013bc:	60da      	str	r2, [r3, #12]
 80013be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013c0:	2300      	movs	r3, #0
 80013c2:	60bb      	str	r3, [r7, #8]
 80013c4:	4b28      	ldr	r3, [pc, #160]	; (8001468 <SystemClock_Config+0xcc>)
 80013c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c8:	4a27      	ldr	r2, [pc, #156]	; (8001468 <SystemClock_Config+0xcc>)
 80013ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013ce:	6413      	str	r3, [r2, #64]	; 0x40
 80013d0:	4b25      	ldr	r3, [pc, #148]	; (8001468 <SystemClock_Config+0xcc>)
 80013d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013d8:	60bb      	str	r3, [r7, #8]
 80013da:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013dc:	2300      	movs	r3, #0
 80013de:	607b      	str	r3, [r7, #4]
 80013e0:	4b22      	ldr	r3, [pc, #136]	; (800146c <SystemClock_Config+0xd0>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a21      	ldr	r2, [pc, #132]	; (800146c <SystemClock_Config+0xd0>)
 80013e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80013ea:	6013      	str	r3, [r2, #0]
 80013ec:	4b1f      	ldr	r3, [pc, #124]	; (800146c <SystemClock_Config+0xd0>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80013f4:	607b      	str	r3, [r7, #4]
 80013f6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013f8:	2302      	movs	r3, #2
 80013fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013fc:	2301      	movs	r3, #1
 80013fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001400:	2310      	movs	r3, #16
 8001402:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001404:	2302      	movs	r3, #2
 8001406:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001408:	2300      	movs	r3, #0
 800140a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800140c:	2310      	movs	r3, #16
 800140e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001410:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001414:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001416:	2304      	movs	r3, #4
 8001418:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800141a:	2304      	movs	r3, #4
 800141c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800141e:	f107 0320 	add.w	r3, r7, #32
 8001422:	4618      	mov	r0, r3
 8001424:	f001 fd90 	bl	8002f48 <HAL_RCC_OscConfig>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800142e:	f000 fa0f 	bl	8001850 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001432:	230f      	movs	r3, #15
 8001434:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001436:	2302      	movs	r3, #2
 8001438:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800143a:	2300      	movs	r3, #0
 800143c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800143e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001442:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001444:	2300      	movs	r3, #0
 8001446:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001448:	f107 030c 	add.w	r3, r7, #12
 800144c:	2102      	movs	r1, #2
 800144e:	4618      	mov	r0, r3
 8001450:	f001 fff2 	bl	8003438 <HAL_RCC_ClockConfig>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800145a:	f000 f9f9 	bl	8001850 <Error_Handler>
  }
}
 800145e:	bf00      	nop
 8001460:	3750      	adds	r7, #80	; 0x50
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	40023800 	.word	0x40023800
 800146c:	40007000 	.word	0x40007000

08001470 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b084      	sub	sp, #16
 8001474:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001476:	463b      	mov	r3, r7
 8001478:	2200      	movs	r2, #0
 800147a:	601a      	str	r2, [r3, #0]
 800147c:	605a      	str	r2, [r3, #4]
 800147e:	609a      	str	r2, [r3, #8]
 8001480:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001482:	4b21      	ldr	r3, [pc, #132]	; (8001508 <MX_ADC1_Init+0x98>)
 8001484:	4a21      	ldr	r2, [pc, #132]	; (800150c <MX_ADC1_Init+0x9c>)
 8001486:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001488:	4b1f      	ldr	r3, [pc, #124]	; (8001508 <MX_ADC1_Init+0x98>)
 800148a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800148e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001490:	4b1d      	ldr	r3, [pc, #116]	; (8001508 <MX_ADC1_Init+0x98>)
 8001492:	2200      	movs	r2, #0
 8001494:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001496:	4b1c      	ldr	r3, [pc, #112]	; (8001508 <MX_ADC1_Init+0x98>)
 8001498:	2200      	movs	r2, #0
 800149a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800149c:	4b1a      	ldr	r3, [pc, #104]	; (8001508 <MX_ADC1_Init+0x98>)
 800149e:	2200      	movs	r2, #0
 80014a0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80014a2:	4b19      	ldr	r3, [pc, #100]	; (8001508 <MX_ADC1_Init+0x98>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80014aa:	4b17      	ldr	r3, [pc, #92]	; (8001508 <MX_ADC1_Init+0x98>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014b0:	4b15      	ldr	r3, [pc, #84]	; (8001508 <MX_ADC1_Init+0x98>)
 80014b2:	4a17      	ldr	r2, [pc, #92]	; (8001510 <MX_ADC1_Init+0xa0>)
 80014b4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014b6:	4b14      	ldr	r3, [pc, #80]	; (8001508 <MX_ADC1_Init+0x98>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80014bc:	4b12      	ldr	r3, [pc, #72]	; (8001508 <MX_ADC1_Init+0x98>)
 80014be:	2201      	movs	r2, #1
 80014c0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80014c2:	4b11      	ldr	r3, [pc, #68]	; (8001508 <MX_ADC1_Init+0x98>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014ca:	4b0f      	ldr	r3, [pc, #60]	; (8001508 <MX_ADC1_Init+0x98>)
 80014cc:	2201      	movs	r2, #1
 80014ce:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80014d0:	480d      	ldr	r0, [pc, #52]	; (8001508 <MX_ADC1_Init+0x98>)
 80014d2:	f000 fdc9 	bl	8002068 <HAL_ADC_Init>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80014dc:	f000 f9b8 	bl	8001850 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80014e0:	2300      	movs	r3, #0
 80014e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80014e4:	2301      	movs	r3, #1
 80014e6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80014e8:	2300      	movs	r3, #0
 80014ea:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014ec:	463b      	mov	r3, r7
 80014ee:	4619      	mov	r1, r3
 80014f0:	4805      	ldr	r0, [pc, #20]	; (8001508 <MX_ADC1_Init+0x98>)
 80014f2:	f000 ff7d 	bl	80023f0 <HAL_ADC_ConfigChannel>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d001      	beq.n	8001500 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80014fc:	f000 f9a8 	bl	8001850 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001500:	bf00      	nop
 8001502:	3710      	adds	r7, #16
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	20000210 	.word	0x20000210
 800150c:	40012000 	.word	0x40012000
 8001510:	0f000001 	.word	0x0f000001

08001514 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b086      	sub	sp, #24
 8001518:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800151a:	f107 0308 	add.w	r3, r7, #8
 800151e:	2200      	movs	r2, #0
 8001520:	601a      	str	r2, [r3, #0]
 8001522:	605a      	str	r2, [r3, #4]
 8001524:	609a      	str	r2, [r3, #8]
 8001526:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001528:	463b      	mov	r3, r7
 800152a:	2200      	movs	r2, #0
 800152c:	601a      	str	r2, [r3, #0]
 800152e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001530:	4b1c      	ldr	r3, [pc, #112]	; (80015a4 <MX_TIM4_Init+0x90>)
 8001532:	4a1d      	ldr	r2, [pc, #116]	; (80015a8 <MX_TIM4_Init+0x94>)
 8001534:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 8001536:	4b1b      	ldr	r3, [pc, #108]	; (80015a4 <MX_TIM4_Init+0x90>)
 8001538:	2253      	movs	r2, #83	; 0x53
 800153a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800153c:	4b19      	ldr	r3, [pc, #100]	; (80015a4 <MX_TIM4_Init+0x90>)
 800153e:	2200      	movs	r2, #0
 8001540:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0;
 8001542:	4b18      	ldr	r3, [pc, #96]	; (80015a4 <MX_TIM4_Init+0x90>)
 8001544:	2200      	movs	r2, #0
 8001546:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001548:	4b16      	ldr	r3, [pc, #88]	; (80015a4 <MX_TIM4_Init+0x90>)
 800154a:	2200      	movs	r2, #0
 800154c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800154e:	4b15      	ldr	r3, [pc, #84]	; (80015a4 <MX_TIM4_Init+0x90>)
 8001550:	2200      	movs	r2, #0
 8001552:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001554:	4813      	ldr	r0, [pc, #76]	; (80015a4 <MX_TIM4_Init+0x90>)
 8001556:	f002 f98f 	bl	8003878 <HAL_TIM_Base_Init>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <MX_TIM4_Init+0x50>
  {
    Error_Handler();
 8001560:	f000 f976 	bl	8001850 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001564:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001568:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800156a:	f107 0308 	add.w	r3, r7, #8
 800156e:	4619      	mov	r1, r3
 8001570:	480c      	ldr	r0, [pc, #48]	; (80015a4 <MX_TIM4_Init+0x90>)
 8001572:	f002 f9d0 	bl	8003916 <HAL_TIM_ConfigClockSource>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d001      	beq.n	8001580 <MX_TIM4_Init+0x6c>
  {
    Error_Handler();
 800157c:	f000 f968 	bl	8001850 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001580:	2300      	movs	r3, #0
 8001582:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001584:	2300      	movs	r3, #0
 8001586:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001588:	463b      	mov	r3, r7
 800158a:	4619      	mov	r1, r3
 800158c:	4805      	ldr	r0, [pc, #20]	; (80015a4 <MX_TIM4_Init+0x90>)
 800158e:	f002 fba3 	bl	8003cd8 <HAL_TIMEx_MasterConfigSynchronization>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <MX_TIM4_Init+0x88>
  {
    Error_Handler();
 8001598:	f000 f95a 	bl	8001850 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800159c:	bf00      	nop
 800159e:	3718      	adds	r7, #24
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	20000258 	.word	0x20000258
 80015a8:	40000800 	.word	0x40000800

080015ac <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80015b0:	4b11      	ldr	r3, [pc, #68]	; (80015f8 <MX_USART1_UART_Init+0x4c>)
 80015b2:	4a12      	ldr	r2, [pc, #72]	; (80015fc <MX_USART1_UART_Init+0x50>)
 80015b4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80015b6:	4b10      	ldr	r3, [pc, #64]	; (80015f8 <MX_USART1_UART_Init+0x4c>)
 80015b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015bc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80015be:	4b0e      	ldr	r3, [pc, #56]	; (80015f8 <MX_USART1_UART_Init+0x4c>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80015c4:	4b0c      	ldr	r3, [pc, #48]	; (80015f8 <MX_USART1_UART_Init+0x4c>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80015ca:	4b0b      	ldr	r3, [pc, #44]	; (80015f8 <MX_USART1_UART_Init+0x4c>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80015d0:	4b09      	ldr	r3, [pc, #36]	; (80015f8 <MX_USART1_UART_Init+0x4c>)
 80015d2:	220c      	movs	r2, #12
 80015d4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 80015d6:	4b08      	ldr	r3, [pc, #32]	; (80015f8 <MX_USART1_UART_Init+0x4c>)
 80015d8:	f44f 7240 	mov.w	r2, #768	; 0x300
 80015dc:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80015de:	4b06      	ldr	r3, [pc, #24]	; (80015f8 <MX_USART1_UART_Init+0x4c>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80015e4:	4804      	ldr	r0, [pc, #16]	; (80015f8 <MX_USART1_UART_Init+0x4c>)
 80015e6:	f002 fbe5 	bl	8003db4 <HAL_UART_Init>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <MX_USART1_UART_Init+0x48>
  {
    Error_Handler();
 80015f0:	f000 f92e 	bl	8001850 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80015f4:	bf00      	nop
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	200002a0 	.word	0x200002a0
 80015fc:	40011000 	.word	0x40011000

08001600 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001604:	4b11      	ldr	r3, [pc, #68]	; (800164c <MX_USART2_UART_Init+0x4c>)
 8001606:	4a12      	ldr	r2, [pc, #72]	; (8001650 <MX_USART2_UART_Init+0x50>)
 8001608:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800160a:	4b10      	ldr	r3, [pc, #64]	; (800164c <MX_USART2_UART_Init+0x4c>)
 800160c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001610:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001612:	4b0e      	ldr	r3, [pc, #56]	; (800164c <MX_USART2_UART_Init+0x4c>)
 8001614:	2200      	movs	r2, #0
 8001616:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001618:	4b0c      	ldr	r3, [pc, #48]	; (800164c <MX_USART2_UART_Init+0x4c>)
 800161a:	2200      	movs	r2, #0
 800161c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800161e:	4b0b      	ldr	r3, [pc, #44]	; (800164c <MX_USART2_UART_Init+0x4c>)
 8001620:	2200      	movs	r2, #0
 8001622:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001624:	4b09      	ldr	r3, [pc, #36]	; (800164c <MX_USART2_UART_Init+0x4c>)
 8001626:	220c      	movs	r2, #12
 8001628:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800162a:	4b08      	ldr	r3, [pc, #32]	; (800164c <MX_USART2_UART_Init+0x4c>)
 800162c:	2200      	movs	r2, #0
 800162e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001630:	4b06      	ldr	r3, [pc, #24]	; (800164c <MX_USART2_UART_Init+0x4c>)
 8001632:	2200      	movs	r2, #0
 8001634:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001636:	4805      	ldr	r0, [pc, #20]	; (800164c <MX_USART2_UART_Init+0x4c>)
 8001638:	f002 fbbc 	bl	8003db4 <HAL_UART_Init>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001642:	f000 f905 	bl	8001850 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001646:	bf00      	nop
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	200002e4 	.word	0x200002e4
 8001650:	40004400 	.word	0x40004400

08001654 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b08a      	sub	sp, #40	; 0x28
 8001658:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800165a:	f107 0314 	add.w	r3, r7, #20
 800165e:	2200      	movs	r2, #0
 8001660:	601a      	str	r2, [r3, #0]
 8001662:	605a      	str	r2, [r3, #4]
 8001664:	609a      	str	r2, [r3, #8]
 8001666:	60da      	str	r2, [r3, #12]
 8001668:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800166a:	2300      	movs	r3, #0
 800166c:	613b      	str	r3, [r7, #16]
 800166e:	4b5b      	ldr	r3, [pc, #364]	; (80017dc <MX_GPIO_Init+0x188>)
 8001670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001672:	4a5a      	ldr	r2, [pc, #360]	; (80017dc <MX_GPIO_Init+0x188>)
 8001674:	f043 0304 	orr.w	r3, r3, #4
 8001678:	6313      	str	r3, [r2, #48]	; 0x30
 800167a:	4b58      	ldr	r3, [pc, #352]	; (80017dc <MX_GPIO_Init+0x188>)
 800167c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167e:	f003 0304 	and.w	r3, r3, #4
 8001682:	613b      	str	r3, [r7, #16]
 8001684:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001686:	2300      	movs	r3, #0
 8001688:	60fb      	str	r3, [r7, #12]
 800168a:	4b54      	ldr	r3, [pc, #336]	; (80017dc <MX_GPIO_Init+0x188>)
 800168c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168e:	4a53      	ldr	r2, [pc, #332]	; (80017dc <MX_GPIO_Init+0x188>)
 8001690:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001694:	6313      	str	r3, [r2, #48]	; 0x30
 8001696:	4b51      	ldr	r3, [pc, #324]	; (80017dc <MX_GPIO_Init+0x188>)
 8001698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800169e:	60fb      	str	r3, [r7, #12]
 80016a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016a2:	2300      	movs	r3, #0
 80016a4:	60bb      	str	r3, [r7, #8]
 80016a6:	4b4d      	ldr	r3, [pc, #308]	; (80017dc <MX_GPIO_Init+0x188>)
 80016a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016aa:	4a4c      	ldr	r2, [pc, #304]	; (80017dc <MX_GPIO_Init+0x188>)
 80016ac:	f043 0301 	orr.w	r3, r3, #1
 80016b0:	6313      	str	r3, [r2, #48]	; 0x30
 80016b2:	4b4a      	ldr	r3, [pc, #296]	; (80017dc <MX_GPIO_Init+0x188>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b6:	f003 0301 	and.w	r3, r3, #1
 80016ba:	60bb      	str	r3, [r7, #8]
 80016bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016be:	2300      	movs	r3, #0
 80016c0:	607b      	str	r3, [r7, #4]
 80016c2:	4b46      	ldr	r3, [pc, #280]	; (80017dc <MX_GPIO_Init+0x188>)
 80016c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c6:	4a45      	ldr	r2, [pc, #276]	; (80017dc <MX_GPIO_Init+0x188>)
 80016c8:	f043 0302 	orr.w	r3, r3, #2
 80016cc:	6313      	str	r3, [r2, #48]	; 0x30
 80016ce:	4b43      	ldr	r3, [pc, #268]	; (80017dc <MX_GPIO_Init+0x188>)
 80016d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d2:	f003 0302 	and.w	r3, r3, #2
 80016d6:	607b      	str	r3, [r7, #4]
 80016d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80016da:	2200      	movs	r2, #0
 80016dc:	2120      	movs	r1, #32
 80016de:	4840      	ldr	r0, [pc, #256]	; (80017e0 <MX_GPIO_Init+0x18c>)
 80016e0:	f001 fbf4 	bl	8002ecc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);
 80016e4:	2200      	movs	r2, #0
 80016e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016ea:	483e      	ldr	r0, [pc, #248]	; (80017e4 <MX_GPIO_Init+0x190>)
 80016ec:	f001 fbee 	bl	8002ecc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80016f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80016f6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80016fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fc:	2300      	movs	r3, #0
 80016fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001700:	f107 0314 	add.w	r3, r7, #20
 8001704:	4619      	mov	r1, r3
 8001706:	4837      	ldr	r0, [pc, #220]	; (80017e4 <MX_GPIO_Init+0x190>)
 8001708:	f001 fa44 	bl	8002b94 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800170c:	2320      	movs	r3, #32
 800170e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001710:	2301      	movs	r3, #1
 8001712:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001714:	2300      	movs	r3, #0
 8001716:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001718:	2300      	movs	r3, #0
 800171a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800171c:	f107 0314 	add.w	r3, r7, #20
 8001720:	4619      	mov	r1, r3
 8001722:	482f      	ldr	r0, [pc, #188]	; (80017e0 <MX_GPIO_Init+0x18c>)
 8001724:	f001 fa36 	bl	8002b94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001728:	2320      	movs	r3, #32
 800172a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800172c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001730:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001732:	2300      	movs	r3, #0
 8001734:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001736:	f107 0314 	add.w	r3, r7, #20
 800173a:	4619      	mov	r1, r3
 800173c:	4829      	ldr	r0, [pc, #164]	; (80017e4 <MX_GPIO_Init+0x190>)
 800173e:	f001 fa29 	bl	8002b94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001742:	2307      	movs	r3, #7
 8001744:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001746:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800174a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174c:	2300      	movs	r3, #0
 800174e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001750:	f107 0314 	add.w	r3, r7, #20
 8001754:	4619      	mov	r1, r3
 8001756:	4824      	ldr	r0, [pc, #144]	; (80017e8 <MX_GPIO_Init+0x194>)
 8001758:	f001 fa1c 	bl	8002b94 <HAL_GPIO_Init>

  /*Configure GPIO pin : ECHO_Pin */
  GPIO_InitStruct.Pin = ECHO_Pin;
 800175c:	2340      	movs	r3, #64	; 0x40
 800175e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001760:	2300      	movs	r3, #0
 8001762:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001764:	2300      	movs	r3, #0
 8001766:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ECHO_GPIO_Port, &GPIO_InitStruct);
 8001768:	f107 0314 	add.w	r3, r7, #20
 800176c:	4619      	mov	r1, r3
 800176e:	481d      	ldr	r0, [pc, #116]	; (80017e4 <MX_GPIO_Init+0x190>)
 8001770:	f001 fa10 	bl	8002b94 <HAL_GPIO_Init>

  /*Configure GPIO pin : TRIG_Pin */
  GPIO_InitStruct.Pin = TRIG_Pin;
 8001774:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001778:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800177a:	2301      	movs	r3, #1
 800177c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177e:	2300      	movs	r3, #0
 8001780:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001782:	2300      	movs	r3, #0
 8001784:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TRIG_GPIO_Port, &GPIO_InitStruct);
 8001786:	f107 0314 	add.w	r3, r7, #20
 800178a:	4619      	mov	r1, r3
 800178c:	4815      	ldr	r0, [pc, #84]	; (80017e4 <MX_GPIO_Init+0x190>)
 800178e:	f001 fa01 	bl	8002b94 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001792:	2200      	movs	r2, #0
 8001794:	2100      	movs	r1, #0
 8001796:	2006      	movs	r0, #6
 8001798:	f001 f933 	bl	8002a02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800179c:	2006      	movs	r0, #6
 800179e:	f001 f94c 	bl	8002a3a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80017a2:	2200      	movs	r2, #0
 80017a4:	2100      	movs	r1, #0
 80017a6:	2007      	movs	r0, #7
 80017a8:	f001 f92b 	bl	8002a02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80017ac:	2007      	movs	r0, #7
 80017ae:	f001 f944 	bl	8002a3a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80017b2:	2200      	movs	r2, #0
 80017b4:	2100      	movs	r1, #0
 80017b6:	2008      	movs	r0, #8
 80017b8:	f001 f923 	bl	8002a02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80017bc:	2008      	movs	r0, #8
 80017be:	f001 f93c 	bl	8002a3a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80017c2:	2200      	movs	r2, #0
 80017c4:	2100      	movs	r1, #0
 80017c6:	2017      	movs	r0, #23
 80017c8:	f001 f91b 	bl	8002a02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80017cc:	2017      	movs	r0, #23
 80017ce:	f001 f934 	bl	8002a3a <HAL_NVIC_EnableIRQ>

}
 80017d2:	bf00      	nop
 80017d4:	3728      	adds	r7, #40	; 0x28
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	40023800 	.word	0x40023800
 80017e0:	40020000 	.word	0x40020000
 80017e4:	40020800 	.word	0x40020800
 80017e8:	40020400 	.word	0x40020400

080017ec <usDelay>:

/* USER CODE BEGIN 4 */
void usDelay(uint32_t uSec)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
	if(uSec < 2) uSec = 2;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2b01      	cmp	r3, #1
 80017f8:	d801      	bhi.n	80017fe <usDelay+0x12>
 80017fa:	2302      	movs	r3, #2
 80017fc:	607b      	str	r3, [r7, #4]
	usTIM->ARR = uSec - 1; 	/*sets the value in the auto-reload register*/
 80017fe:	4a13      	ldr	r2, [pc, #76]	; (800184c <usDelay+0x60>)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	3b01      	subs	r3, #1
 8001804:	62d3      	str	r3, [r2, #44]	; 0x2c
	usTIM->EGR = 1; 			/*Re-initialises the timer*/
 8001806:	4b11      	ldr	r3, [pc, #68]	; (800184c <usDelay+0x60>)
 8001808:	2201      	movs	r2, #1
 800180a:	615a      	str	r2, [r3, #20]
	usTIM->SR &= ~1; 		//Resets the flag
 800180c:	4b0f      	ldr	r3, [pc, #60]	; (800184c <usDelay+0x60>)
 800180e:	691b      	ldr	r3, [r3, #16]
 8001810:	4a0e      	ldr	r2, [pc, #56]	; (800184c <usDelay+0x60>)
 8001812:	f023 0301 	bic.w	r3, r3, #1
 8001816:	6113      	str	r3, [r2, #16]
	usTIM->CR1 |= 1; 		//Enables the counter
 8001818:	4b0c      	ldr	r3, [pc, #48]	; (800184c <usDelay+0x60>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a0b      	ldr	r2, [pc, #44]	; (800184c <usDelay+0x60>)
 800181e:	f043 0301 	orr.w	r3, r3, #1
 8001822:	6013      	str	r3, [r2, #0]
	while((usTIM->SR&0x0001) != 1);
 8001824:	bf00      	nop
 8001826:	4b09      	ldr	r3, [pc, #36]	; (800184c <usDelay+0x60>)
 8001828:	691b      	ldr	r3, [r3, #16]
 800182a:	f003 0301 	and.w	r3, r3, #1
 800182e:	2b01      	cmp	r3, #1
 8001830:	d1f9      	bne.n	8001826 <usDelay+0x3a>
	usTIM->SR &= ~(0x0001);
 8001832:	4b06      	ldr	r3, [pc, #24]	; (800184c <usDelay+0x60>)
 8001834:	691b      	ldr	r3, [r3, #16]
 8001836:	4a05      	ldr	r2, [pc, #20]	; (800184c <usDelay+0x60>)
 8001838:	f023 0301 	bic.w	r3, r3, #1
 800183c:	6113      	str	r3, [r2, #16]
}
 800183e:	bf00      	nop
 8001840:	370c      	adds	r7, #12
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr
 800184a:	bf00      	nop
 800184c:	40000800 	.word	0x40000800

08001850 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001854:	b672      	cpsid	i
}
 8001856:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001858:	e7fe      	b.n	8001858 <Error_Handler+0x8>
	...

0800185c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001862:	2300      	movs	r3, #0
 8001864:	607b      	str	r3, [r7, #4]
 8001866:	4b10      	ldr	r3, [pc, #64]	; (80018a8 <HAL_MspInit+0x4c>)
 8001868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800186a:	4a0f      	ldr	r2, [pc, #60]	; (80018a8 <HAL_MspInit+0x4c>)
 800186c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001870:	6453      	str	r3, [r2, #68]	; 0x44
 8001872:	4b0d      	ldr	r3, [pc, #52]	; (80018a8 <HAL_MspInit+0x4c>)
 8001874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001876:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800187a:	607b      	str	r3, [r7, #4]
 800187c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800187e:	2300      	movs	r3, #0
 8001880:	603b      	str	r3, [r7, #0]
 8001882:	4b09      	ldr	r3, [pc, #36]	; (80018a8 <HAL_MspInit+0x4c>)
 8001884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001886:	4a08      	ldr	r2, [pc, #32]	; (80018a8 <HAL_MspInit+0x4c>)
 8001888:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800188c:	6413      	str	r3, [r2, #64]	; 0x40
 800188e:	4b06      	ldr	r3, [pc, #24]	; (80018a8 <HAL_MspInit+0x4c>)
 8001890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001892:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001896:	603b      	str	r3, [r7, #0]
 8001898:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800189a:	2007      	movs	r0, #7
 800189c:	f001 f8a6 	bl	80029ec <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018a0:	bf00      	nop
 80018a2:	3708      	adds	r7, #8
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	40023800 	.word	0x40023800

080018ac <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b08a      	sub	sp, #40	; 0x28
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b4:	f107 0314 	add.w	r3, r7, #20
 80018b8:	2200      	movs	r2, #0
 80018ba:	601a      	str	r2, [r3, #0]
 80018bc:	605a      	str	r2, [r3, #4]
 80018be:	609a      	str	r2, [r3, #8]
 80018c0:	60da      	str	r2, [r3, #12]
 80018c2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a17      	ldr	r2, [pc, #92]	; (8001928 <HAL_ADC_MspInit+0x7c>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d127      	bne.n	800191e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80018ce:	2300      	movs	r3, #0
 80018d0:	613b      	str	r3, [r7, #16]
 80018d2:	4b16      	ldr	r3, [pc, #88]	; (800192c <HAL_ADC_MspInit+0x80>)
 80018d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018d6:	4a15      	ldr	r2, [pc, #84]	; (800192c <HAL_ADC_MspInit+0x80>)
 80018d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018dc:	6453      	str	r3, [r2, #68]	; 0x44
 80018de:	4b13      	ldr	r3, [pc, #76]	; (800192c <HAL_ADC_MspInit+0x80>)
 80018e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018e6:	613b      	str	r3, [r7, #16]
 80018e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ea:	2300      	movs	r3, #0
 80018ec:	60fb      	str	r3, [r7, #12]
 80018ee:	4b0f      	ldr	r3, [pc, #60]	; (800192c <HAL_ADC_MspInit+0x80>)
 80018f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f2:	4a0e      	ldr	r2, [pc, #56]	; (800192c <HAL_ADC_MspInit+0x80>)
 80018f4:	f043 0301 	orr.w	r3, r3, #1
 80018f8:	6313      	str	r3, [r2, #48]	; 0x30
 80018fa:	4b0c      	ldr	r3, [pc, #48]	; (800192c <HAL_ADC_MspInit+0x80>)
 80018fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fe:	f003 0301 	and.w	r3, r3, #1
 8001902:	60fb      	str	r3, [r7, #12]
 8001904:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001906:	2301      	movs	r3, #1
 8001908:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800190a:	2303      	movs	r3, #3
 800190c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190e:	2300      	movs	r3, #0
 8001910:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001912:	f107 0314 	add.w	r3, r7, #20
 8001916:	4619      	mov	r1, r3
 8001918:	4805      	ldr	r0, [pc, #20]	; (8001930 <HAL_ADC_MspInit+0x84>)
 800191a:	f001 f93b 	bl	8002b94 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800191e:	bf00      	nop
 8001920:	3728      	adds	r7, #40	; 0x28
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	40012000 	.word	0x40012000
 800192c:	40023800 	.word	0x40023800
 8001930:	40020000 	.word	0x40020000

08001934 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001934:	b480      	push	{r7}
 8001936:	b085      	sub	sp, #20
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a0b      	ldr	r2, [pc, #44]	; (8001970 <HAL_TIM_Base_MspInit+0x3c>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d10d      	bne.n	8001962 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001946:	2300      	movs	r3, #0
 8001948:	60fb      	str	r3, [r7, #12]
 800194a:	4b0a      	ldr	r3, [pc, #40]	; (8001974 <HAL_TIM_Base_MspInit+0x40>)
 800194c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194e:	4a09      	ldr	r2, [pc, #36]	; (8001974 <HAL_TIM_Base_MspInit+0x40>)
 8001950:	f043 0304 	orr.w	r3, r3, #4
 8001954:	6413      	str	r3, [r2, #64]	; 0x40
 8001956:	4b07      	ldr	r3, [pc, #28]	; (8001974 <HAL_TIM_Base_MspInit+0x40>)
 8001958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800195a:	f003 0304 	and.w	r3, r3, #4
 800195e:	60fb      	str	r3, [r7, #12]
 8001960:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001962:	bf00      	nop
 8001964:	3714      	adds	r7, #20
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
 800196e:	bf00      	nop
 8001970:	40000800 	.word	0x40000800
 8001974:	40023800 	.word	0x40023800

08001978 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b08c      	sub	sp, #48	; 0x30
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001980:	f107 031c 	add.w	r3, r7, #28
 8001984:	2200      	movs	r2, #0
 8001986:	601a      	str	r2, [r3, #0]
 8001988:	605a      	str	r2, [r3, #4]
 800198a:	609a      	str	r2, [r3, #8]
 800198c:	60da      	str	r2, [r3, #12]
 800198e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a36      	ldr	r2, [pc, #216]	; (8001a70 <HAL_UART_MspInit+0xf8>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d135      	bne.n	8001a06 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800199a:	2300      	movs	r3, #0
 800199c:	61bb      	str	r3, [r7, #24]
 800199e:	4b35      	ldr	r3, [pc, #212]	; (8001a74 <HAL_UART_MspInit+0xfc>)
 80019a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019a2:	4a34      	ldr	r2, [pc, #208]	; (8001a74 <HAL_UART_MspInit+0xfc>)
 80019a4:	f043 0310 	orr.w	r3, r3, #16
 80019a8:	6453      	str	r3, [r2, #68]	; 0x44
 80019aa:	4b32      	ldr	r3, [pc, #200]	; (8001a74 <HAL_UART_MspInit+0xfc>)
 80019ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ae:	f003 0310 	and.w	r3, r3, #16
 80019b2:	61bb      	str	r3, [r7, #24]
 80019b4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019b6:	2300      	movs	r3, #0
 80019b8:	617b      	str	r3, [r7, #20]
 80019ba:	4b2e      	ldr	r3, [pc, #184]	; (8001a74 <HAL_UART_MspInit+0xfc>)
 80019bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019be:	4a2d      	ldr	r2, [pc, #180]	; (8001a74 <HAL_UART_MspInit+0xfc>)
 80019c0:	f043 0301 	orr.w	r3, r3, #1
 80019c4:	6313      	str	r3, [r2, #48]	; 0x30
 80019c6:	4b2b      	ldr	r3, [pc, #172]	; (8001a74 <HAL_UART_MspInit+0xfc>)
 80019c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ca:	f003 0301 	and.w	r3, r3, #1
 80019ce:	617b      	str	r3, [r7, #20]
 80019d0:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    PA11     ------> USART1_CTS
    PA12     ------> USART1_RTS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80019d2:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 80019d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d8:	2302      	movs	r3, #2
 80019da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019dc:	2300      	movs	r3, #0
 80019de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019e0:	2303      	movs	r3, #3
 80019e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80019e4:	2307      	movs	r3, #7
 80019e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019e8:	f107 031c 	add.w	r3, r7, #28
 80019ec:	4619      	mov	r1, r3
 80019ee:	4822      	ldr	r0, [pc, #136]	; (8001a78 <HAL_UART_MspInit+0x100>)
 80019f0:	f001 f8d0 	bl	8002b94 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80019f4:	2200      	movs	r2, #0
 80019f6:	2100      	movs	r1, #0
 80019f8:	2025      	movs	r0, #37	; 0x25
 80019fa:	f001 f802 	bl	8002a02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80019fe:	2025      	movs	r0, #37	; 0x25
 8001a00:	f001 f81b 	bl	8002a3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001a04:	e030      	b.n	8001a68 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a1c      	ldr	r2, [pc, #112]	; (8001a7c <HAL_UART_MspInit+0x104>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d12b      	bne.n	8001a68 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a10:	2300      	movs	r3, #0
 8001a12:	613b      	str	r3, [r7, #16]
 8001a14:	4b17      	ldr	r3, [pc, #92]	; (8001a74 <HAL_UART_MspInit+0xfc>)
 8001a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a18:	4a16      	ldr	r2, [pc, #88]	; (8001a74 <HAL_UART_MspInit+0xfc>)
 8001a1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a1e:	6413      	str	r3, [r2, #64]	; 0x40
 8001a20:	4b14      	ldr	r3, [pc, #80]	; (8001a74 <HAL_UART_MspInit+0xfc>)
 8001a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a28:	613b      	str	r3, [r7, #16]
 8001a2a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	60fb      	str	r3, [r7, #12]
 8001a30:	4b10      	ldr	r3, [pc, #64]	; (8001a74 <HAL_UART_MspInit+0xfc>)
 8001a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a34:	4a0f      	ldr	r2, [pc, #60]	; (8001a74 <HAL_UART_MspInit+0xfc>)
 8001a36:	f043 0301 	orr.w	r3, r3, #1
 8001a3a:	6313      	str	r3, [r2, #48]	; 0x30
 8001a3c:	4b0d      	ldr	r3, [pc, #52]	; (8001a74 <HAL_UART_MspInit+0xfc>)
 8001a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a40:	f003 0301 	and.w	r3, r3, #1
 8001a44:	60fb      	str	r3, [r7, #12]
 8001a46:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001a48:	230c      	movs	r3, #12
 8001a4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a4c:	2302      	movs	r3, #2
 8001a4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a50:	2300      	movs	r3, #0
 8001a52:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a54:	2303      	movs	r3, #3
 8001a56:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a58:	2307      	movs	r3, #7
 8001a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a5c:	f107 031c 	add.w	r3, r7, #28
 8001a60:	4619      	mov	r1, r3
 8001a62:	4805      	ldr	r0, [pc, #20]	; (8001a78 <HAL_UART_MspInit+0x100>)
 8001a64:	f001 f896 	bl	8002b94 <HAL_GPIO_Init>
}
 8001a68:	bf00      	nop
 8001a6a:	3730      	adds	r7, #48	; 0x30
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	40011000 	.word	0x40011000
 8001a74:	40023800 	.word	0x40023800
 8001a78:	40020000 	.word	0x40020000
 8001a7c:	40004400 	.word	0x40004400

08001a80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a84:	e7fe      	b.n	8001a84 <NMI_Handler+0x4>

08001a86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a86:	b480      	push	{r7}
 8001a88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a8a:	e7fe      	b.n	8001a8a <HardFault_Handler+0x4>

08001a8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a90:	e7fe      	b.n	8001a90 <MemManage_Handler+0x4>

08001a92 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a92:	b480      	push	{r7}
 8001a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a96:	e7fe      	b.n	8001a96 <BusFault_Handler+0x4>

08001a98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a9c:	e7fe      	b.n	8001a9c <UsageFault_Handler+0x4>

08001a9e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a9e:	b480      	push	{r7}
 8001aa0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001aa2:	bf00      	nop
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr

08001aac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ab0:	bf00      	nop
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr

08001aba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001aba:	b480      	push	{r7}
 8001abc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001abe:	bf00      	nop
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr

08001ac8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	i++;
 8001acc:	4b57      	ldr	r3, [pc, #348]	; (8001c2c <SysTick_Handler+0x164>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	3301      	adds	r3, #1
 8001ad2:	4a56      	ldr	r2, [pc, #344]	; (8001c2c <SysTick_Handler+0x164>)
 8001ad4:	6013      	str	r3, [r2, #0]
	if(i==100){
 8001ad6:	4b55      	ldr	r3, [pc, #340]	; (8001c2c <SysTick_Handler+0x164>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	2b64      	cmp	r3, #100	; 0x64
 8001adc:	d121      	bne.n	8001b22 <SysTick_Handler+0x5a>
		FlowPx = (pulsePx)*2.25*60; // ml / min
 8001ade:	4b54      	ldr	r3, [pc, #336]	; (8001c30 <SysTick_Handler+0x168>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f7fe fd26 	bl	8000534 <__aeabi_i2d>
 8001ae8:	f04f 0200 	mov.w	r2, #0
 8001aec:	4b51      	ldr	r3, [pc, #324]	; (8001c34 <SysTick_Handler+0x16c>)
 8001aee:	f7fe fd8b 	bl	8000608 <__aeabi_dmul>
 8001af2:	4602      	mov	r2, r0
 8001af4:	460b      	mov	r3, r1
 8001af6:	4610      	mov	r0, r2
 8001af8:	4619      	mov	r1, r3
 8001afa:	f04f 0200 	mov.w	r2, #0
 8001afe:	4b4e      	ldr	r3, [pc, #312]	; (8001c38 <SysTick_Handler+0x170>)
 8001b00:	f7fe fd82 	bl	8000608 <__aeabi_dmul>
 8001b04:	4602      	mov	r2, r0
 8001b06:	460b      	mov	r3, r1
 8001b08:	4610      	mov	r0, r2
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	f7ff f854 	bl	8000bb8 <__aeabi_d2f>
 8001b10:	4603      	mov	r3, r0
 8001b12:	4a4a      	ldr	r2, [pc, #296]	; (8001c3c <SysTick_Handler+0x174>)
 8001b14:	6013      	str	r3, [r2, #0]
		i = 0;
 8001b16:	4b45      	ldr	r3, [pc, #276]	; (8001c2c <SysTick_Handler+0x164>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	601a      	str	r2, [r3, #0]
		pulsePx = 0;
 8001b1c:	4b44      	ldr	r3, [pc, #272]	; (8001c30 <SysTick_Handler+0x168>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	601a      	str	r2, [r3, #0]
	}
	j++;
 8001b22:	4b47      	ldr	r3, [pc, #284]	; (8001c40 <SysTick_Handler+0x178>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	3301      	adds	r3, #1
 8001b28:	4a45      	ldr	r2, [pc, #276]	; (8001c40 <SysTick_Handler+0x178>)
 8001b2a:	6013      	str	r3, [r2, #0]
	if(j==100){
 8001b2c:	4b44      	ldr	r3, [pc, #272]	; (8001c40 <SysTick_Handler+0x178>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	2b64      	cmp	r3, #100	; 0x64
 8001b32:	d121      	bne.n	8001b78 <SysTick_Handler+0xb0>
		FlowMx = (pulseMx)*2.25*60; // ml / min
 8001b34:	4b43      	ldr	r3, [pc, #268]	; (8001c44 <SysTick_Handler+0x17c>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f7fe fcfb 	bl	8000534 <__aeabi_i2d>
 8001b3e:	f04f 0200 	mov.w	r2, #0
 8001b42:	4b3c      	ldr	r3, [pc, #240]	; (8001c34 <SysTick_Handler+0x16c>)
 8001b44:	f7fe fd60 	bl	8000608 <__aeabi_dmul>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	460b      	mov	r3, r1
 8001b4c:	4610      	mov	r0, r2
 8001b4e:	4619      	mov	r1, r3
 8001b50:	f04f 0200 	mov.w	r2, #0
 8001b54:	4b38      	ldr	r3, [pc, #224]	; (8001c38 <SysTick_Handler+0x170>)
 8001b56:	f7fe fd57 	bl	8000608 <__aeabi_dmul>
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	460b      	mov	r3, r1
 8001b5e:	4610      	mov	r0, r2
 8001b60:	4619      	mov	r1, r3
 8001b62:	f7ff f829 	bl	8000bb8 <__aeabi_d2f>
 8001b66:	4603      	mov	r3, r0
 8001b68:	4a37      	ldr	r2, [pc, #220]	; (8001c48 <SysTick_Handler+0x180>)
 8001b6a:	6013      	str	r3, [r2, #0]
		j = 0;
 8001b6c:	4b34      	ldr	r3, [pc, #208]	; (8001c40 <SysTick_Handler+0x178>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	601a      	str	r2, [r3, #0]
		pulseMx = 0;
 8001b72:	4b34      	ldr	r3, [pc, #208]	; (8001c44 <SysTick_Handler+0x17c>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	601a      	str	r2, [r3, #0]
	}
	m++;
 8001b78:	4b34      	ldr	r3, [pc, #208]	; (8001c4c <SysTick_Handler+0x184>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	3301      	adds	r3, #1
 8001b7e:	4a33      	ldr	r2, [pc, #204]	; (8001c4c <SysTick_Handler+0x184>)
 8001b80:	6013      	str	r3, [r2, #0]
	if(m==100){
 8001b82:	4b32      	ldr	r3, [pc, #200]	; (8001c4c <SysTick_Handler+0x184>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	2b64      	cmp	r3, #100	; 0x64
 8001b88:	d121      	bne.n	8001bce <SysTick_Handler+0x106>
		FlowPy = (pulsePy)*2.25*60; // ml / min
 8001b8a:	4b31      	ldr	r3, [pc, #196]	; (8001c50 <SysTick_Handler+0x188>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f7fe fcd0 	bl	8000534 <__aeabi_i2d>
 8001b94:	f04f 0200 	mov.w	r2, #0
 8001b98:	4b26      	ldr	r3, [pc, #152]	; (8001c34 <SysTick_Handler+0x16c>)
 8001b9a:	f7fe fd35 	bl	8000608 <__aeabi_dmul>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	460b      	mov	r3, r1
 8001ba2:	4610      	mov	r0, r2
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	f04f 0200 	mov.w	r2, #0
 8001baa:	4b23      	ldr	r3, [pc, #140]	; (8001c38 <SysTick_Handler+0x170>)
 8001bac:	f7fe fd2c 	bl	8000608 <__aeabi_dmul>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	460b      	mov	r3, r1
 8001bb4:	4610      	mov	r0, r2
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	f7fe fffe 	bl	8000bb8 <__aeabi_d2f>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	4a25      	ldr	r2, [pc, #148]	; (8001c54 <SysTick_Handler+0x18c>)
 8001bc0:	6013      	str	r3, [r2, #0]
		m = 0;
 8001bc2:	4b22      	ldr	r3, [pc, #136]	; (8001c4c <SysTick_Handler+0x184>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	601a      	str	r2, [r3, #0]
		pulsePy = 0;
 8001bc8:	4b21      	ldr	r3, [pc, #132]	; (8001c50 <SysTick_Handler+0x188>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	601a      	str	r2, [r3, #0]
	}
	n++;
 8001bce:	4b22      	ldr	r3, [pc, #136]	; (8001c58 <SysTick_Handler+0x190>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	3301      	adds	r3, #1
 8001bd4:	4a20      	ldr	r2, [pc, #128]	; (8001c58 <SysTick_Handler+0x190>)
 8001bd6:	6013      	str	r3, [r2, #0]
	if(n==100){
 8001bd8:	4b1f      	ldr	r3, [pc, #124]	; (8001c58 <SysTick_Handler+0x190>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	2b64      	cmp	r3, #100	; 0x64
 8001bde:	d121      	bne.n	8001c24 <SysTick_Handler+0x15c>
		FlowMy = (pulseMy)*2.25*60; // ml / min
 8001be0:	4b1e      	ldr	r3, [pc, #120]	; (8001c5c <SysTick_Handler+0x194>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4618      	mov	r0, r3
 8001be6:	f7fe fca5 	bl	8000534 <__aeabi_i2d>
 8001bea:	f04f 0200 	mov.w	r2, #0
 8001bee:	4b11      	ldr	r3, [pc, #68]	; (8001c34 <SysTick_Handler+0x16c>)
 8001bf0:	f7fe fd0a 	bl	8000608 <__aeabi_dmul>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	460b      	mov	r3, r1
 8001bf8:	4610      	mov	r0, r2
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	f04f 0200 	mov.w	r2, #0
 8001c00:	4b0d      	ldr	r3, [pc, #52]	; (8001c38 <SysTick_Handler+0x170>)
 8001c02:	f7fe fd01 	bl	8000608 <__aeabi_dmul>
 8001c06:	4602      	mov	r2, r0
 8001c08:	460b      	mov	r3, r1
 8001c0a:	4610      	mov	r0, r2
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	f7fe ffd3 	bl	8000bb8 <__aeabi_d2f>
 8001c12:	4603      	mov	r3, r0
 8001c14:	4a12      	ldr	r2, [pc, #72]	; (8001c60 <SysTick_Handler+0x198>)
 8001c16:	6013      	str	r3, [r2, #0]
		n = 0;
 8001c18:	4b0f      	ldr	r3, [pc, #60]	; (8001c58 <SysTick_Handler+0x190>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	601a      	str	r2, [r3, #0]
		pulseMy = 0;
 8001c1e:	4b0f      	ldr	r3, [pc, #60]	; (8001c5c <SysTick_Handler+0x194>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	601a      	str	r2, [r3, #0]
	}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c24:	f000 f9dc 	bl	8001fe0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c28:	bf00      	nop
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	2000035c 	.word	0x2000035c
 8001c30:	2000034c 	.word	0x2000034c
 8001c34:	40020000 	.word	0x40020000
 8001c38:	404e0000 	.word	0x404e0000
 8001c3c:	200001f8 	.word	0x200001f8
 8001c40:	20000360 	.word	0x20000360
 8001c44:	20000350 	.word	0x20000350
 8001c48:	200001fc 	.word	0x200001fc
 8001c4c:	20000364 	.word	0x20000364
 8001c50:	20000354 	.word	0x20000354
 8001c54:	20000200 	.word	0x20000200
 8001c58:	20000368 	.word	0x20000368
 8001c5c:	20000358 	.word	0x20000358
 8001c60:	20000204 	.word	0x20000204

08001c64 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_0)){
 8001c68:	2101      	movs	r1, #1
 8001c6a:	4808      	ldr	r0, [pc, #32]	; (8001c8c <EXTI0_IRQHandler+0x28>)
 8001c6c:	f001 f916 	bl	8002e9c <HAL_GPIO_ReadPin>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d004      	beq.n	8001c80 <EXTI0_IRQHandler+0x1c>
		pulsePx++;
 8001c76:	4b06      	ldr	r3, [pc, #24]	; (8001c90 <EXTI0_IRQHandler+0x2c>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	3301      	adds	r3, #1
 8001c7c:	4a04      	ldr	r2, [pc, #16]	; (8001c90 <EXTI0_IRQHandler+0x2c>)
 8001c7e:	6013      	str	r3, [r2, #0]
	}
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001c80:	2001      	movs	r0, #1
 8001c82:	f001 f93d 	bl	8002f00 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001c86:	bf00      	nop
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	40020400 	.word	0x40020400
 8001c90:	2000034c 	.word	0x2000034c

08001c94 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */
	if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_1)){
 8001c98:	2102      	movs	r1, #2
 8001c9a:	4808      	ldr	r0, [pc, #32]	; (8001cbc <EXTI1_IRQHandler+0x28>)
 8001c9c:	f001 f8fe 	bl	8002e9c <HAL_GPIO_ReadPin>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d004      	beq.n	8001cb0 <EXTI1_IRQHandler+0x1c>
		pulseMx++;
 8001ca6:	4b06      	ldr	r3, [pc, #24]	; (8001cc0 <EXTI1_IRQHandler+0x2c>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	3301      	adds	r3, #1
 8001cac:	4a04      	ldr	r2, [pc, #16]	; (8001cc0 <EXTI1_IRQHandler+0x2c>)
 8001cae:	6013      	str	r3, [r2, #0]
	}
  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001cb0:	2002      	movs	r0, #2
 8001cb2:	f001 f925 	bl	8002f00 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001cb6:	bf00      	nop
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	40020400 	.word	0x40020400
 8001cc0:	20000350 	.word	0x20000350

08001cc4 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */
	if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_2)){
 8001cc8:	2104      	movs	r1, #4
 8001cca:	4808      	ldr	r0, [pc, #32]	; (8001cec <EXTI2_IRQHandler+0x28>)
 8001ccc:	f001 f8e6 	bl	8002e9c <HAL_GPIO_ReadPin>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d004      	beq.n	8001ce0 <EXTI2_IRQHandler+0x1c>
		pulsePy++;
 8001cd6:	4b06      	ldr	r3, [pc, #24]	; (8001cf0 <EXTI2_IRQHandler+0x2c>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	3301      	adds	r3, #1
 8001cdc:	4a04      	ldr	r2, [pc, #16]	; (8001cf0 <EXTI2_IRQHandler+0x2c>)
 8001cde:	6013      	str	r3, [r2, #0]
	}
  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8001ce0:	2004      	movs	r0, #4
 8001ce2:	f001 f90d 	bl	8002f00 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001ce6:	bf00      	nop
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	40020400 	.word	0x40020400
 8001cf0:	20000354 	.word	0x20000354

08001cf4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_5)){
 8001cf8:	2120      	movs	r1, #32
 8001cfa:	4808      	ldr	r0, [pc, #32]	; (8001d1c <EXTI9_5_IRQHandler+0x28>)
 8001cfc:	f001 f8ce 	bl	8002e9c <HAL_GPIO_ReadPin>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d004      	beq.n	8001d10 <EXTI9_5_IRQHandler+0x1c>
		pulseMy++;
 8001d06:	4b06      	ldr	r3, [pc, #24]	; (8001d20 <EXTI9_5_IRQHandler+0x2c>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	3301      	adds	r3, #1
 8001d0c:	4a04      	ldr	r2, [pc, #16]	; (8001d20 <EXTI9_5_IRQHandler+0x2c>)
 8001d0e:	6013      	str	r3, [r2, #0]
	}
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001d10:	2020      	movs	r0, #32
 8001d12:	f001 f8f5 	bl	8002f00 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001d16:	bf00      	nop
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	40020800 	.word	0x40020800
 8001d20:	20000358 	.word	0x20000358

08001d24 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001d28:	4802      	ldr	r0, [pc, #8]	; (8001d34 <USART1_IRQHandler+0x10>)
 8001d2a:	f002 f923 	bl	8003f74 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001d2e:	bf00      	nop
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	200002a0 	.word	0x200002a0

08001d38 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0
  return 1;
 8001d3c:	2301      	movs	r3, #1
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr

08001d48 <_kill>:

int _kill(int pid, int sig)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
 8001d50:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001d52:	f003 f843 	bl	8004ddc <__errno>
 8001d56:	4603      	mov	r3, r0
 8001d58:	2216      	movs	r2, #22
 8001d5a:	601a      	str	r2, [r3, #0]
  return -1;
 8001d5c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3708      	adds	r7, #8
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}

08001d68 <_exit>:

void _exit (int status)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001d70:	f04f 31ff 	mov.w	r1, #4294967295
 8001d74:	6878      	ldr	r0, [r7, #4]
 8001d76:	f7ff ffe7 	bl	8001d48 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001d7a:	e7fe      	b.n	8001d7a <_exit+0x12>

08001d7c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b086      	sub	sp, #24
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	60f8      	str	r0, [r7, #12]
 8001d84:	60b9      	str	r1, [r7, #8]
 8001d86:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d88:	2300      	movs	r3, #0
 8001d8a:	617b      	str	r3, [r7, #20]
 8001d8c:	e00a      	b.n	8001da4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001d8e:	f3af 8000 	nop.w
 8001d92:	4601      	mov	r1, r0
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	1c5a      	adds	r2, r3, #1
 8001d98:	60ba      	str	r2, [r7, #8]
 8001d9a:	b2ca      	uxtb	r2, r1
 8001d9c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	3301      	adds	r3, #1
 8001da2:	617b      	str	r3, [r7, #20]
 8001da4:	697a      	ldr	r2, [r7, #20]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	429a      	cmp	r2, r3
 8001daa:	dbf0      	blt.n	8001d8e <_read+0x12>
  }

  return len;
 8001dac:	687b      	ldr	r3, [r7, #4]
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3718      	adds	r7, #24
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}

08001db6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001db6:	b580      	push	{r7, lr}
 8001db8:	b086      	sub	sp, #24
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	60f8      	str	r0, [r7, #12]
 8001dbe:	60b9      	str	r1, [r7, #8]
 8001dc0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	617b      	str	r3, [r7, #20]
 8001dc6:	e009      	b.n	8001ddc <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	1c5a      	adds	r2, r3, #1
 8001dcc:	60ba      	str	r2, [r7, #8]
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	3301      	adds	r3, #1
 8001dda:	617b      	str	r3, [r7, #20]
 8001ddc:	697a      	ldr	r2, [r7, #20]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	429a      	cmp	r2, r3
 8001de2:	dbf1      	blt.n	8001dc8 <_write+0x12>
  }
  return len;
 8001de4:	687b      	ldr	r3, [r7, #4]
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3718      	adds	r7, #24
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}

08001dee <_close>:

int _close(int file)
{
 8001dee:	b480      	push	{r7}
 8001df0:	b083      	sub	sp, #12
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001df6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	370c      	adds	r7, #12
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr

08001e06 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e06:	b480      	push	{r7}
 8001e08:	b083      	sub	sp, #12
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	6078      	str	r0, [r7, #4]
 8001e0e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e16:	605a      	str	r2, [r3, #4]
  return 0;
 8001e18:	2300      	movs	r3, #0
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	370c      	adds	r7, #12
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr

08001e26 <_isatty>:

int _isatty(int file)
{
 8001e26:	b480      	push	{r7}
 8001e28:	b083      	sub	sp, #12
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e2e:	2301      	movs	r3, #1
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	370c      	adds	r7, #12
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr

08001e3c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b085      	sub	sp, #20
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	60f8      	str	r0, [r7, #12]
 8001e44:	60b9      	str	r1, [r7, #8]
 8001e46:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e48:	2300      	movs	r3, #0
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3714      	adds	r7, #20
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr
	...

08001e58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b086      	sub	sp, #24
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e60:	4a14      	ldr	r2, [pc, #80]	; (8001eb4 <_sbrk+0x5c>)
 8001e62:	4b15      	ldr	r3, [pc, #84]	; (8001eb8 <_sbrk+0x60>)
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e6c:	4b13      	ldr	r3, [pc, #76]	; (8001ebc <_sbrk+0x64>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d102      	bne.n	8001e7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e74:	4b11      	ldr	r3, [pc, #68]	; (8001ebc <_sbrk+0x64>)
 8001e76:	4a12      	ldr	r2, [pc, #72]	; (8001ec0 <_sbrk+0x68>)
 8001e78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e7a:	4b10      	ldr	r3, [pc, #64]	; (8001ebc <_sbrk+0x64>)
 8001e7c:	681a      	ldr	r2, [r3, #0]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	4413      	add	r3, r2
 8001e82:	693a      	ldr	r2, [r7, #16]
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d207      	bcs.n	8001e98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e88:	f002 ffa8 	bl	8004ddc <__errno>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	220c      	movs	r2, #12
 8001e90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e92:	f04f 33ff 	mov.w	r3, #4294967295
 8001e96:	e009      	b.n	8001eac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e98:	4b08      	ldr	r3, [pc, #32]	; (8001ebc <_sbrk+0x64>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e9e:	4b07      	ldr	r3, [pc, #28]	; (8001ebc <_sbrk+0x64>)
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	4413      	add	r3, r2
 8001ea6:	4a05      	ldr	r2, [pc, #20]	; (8001ebc <_sbrk+0x64>)
 8001ea8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	3718      	adds	r7, #24
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	20020000 	.word	0x20020000
 8001eb8:	00000400 	.word	0x00000400
 8001ebc:	2000036c 	.word	0x2000036c
 8001ec0:	20000388 	.word	0x20000388

08001ec4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ec8:	4b06      	ldr	r3, [pc, #24]	; (8001ee4 <SystemInit+0x20>)
 8001eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ece:	4a05      	ldr	r2, [pc, #20]	; (8001ee4 <SystemInit+0x20>)
 8001ed0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ed4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ed8:	bf00      	nop
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr
 8001ee2:	bf00      	nop
 8001ee4:	e000ed00 	.word	0xe000ed00

08001ee8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ee8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f20 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001eec:	480d      	ldr	r0, [pc, #52]	; (8001f24 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001eee:	490e      	ldr	r1, [pc, #56]	; (8001f28 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001ef0:	4a0e      	ldr	r2, [pc, #56]	; (8001f2c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ef2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ef4:	e002      	b.n	8001efc <LoopCopyDataInit>

08001ef6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ef6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ef8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001efa:	3304      	adds	r3, #4

08001efc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001efc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001efe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f00:	d3f9      	bcc.n	8001ef6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f02:	4a0b      	ldr	r2, [pc, #44]	; (8001f30 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001f04:	4c0b      	ldr	r4, [pc, #44]	; (8001f34 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001f06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f08:	e001      	b.n	8001f0e <LoopFillZerobss>

08001f0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f0c:	3204      	adds	r2, #4

08001f0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f10:	d3fb      	bcc.n	8001f0a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001f12:	f7ff ffd7 	bl	8001ec4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f16:	f002 ff67 	bl	8004de8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f1a:	f7ff f86d 	bl	8000ff8 <main>
  bx  lr    
 8001f1e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001f20:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001f24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f28:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001f2c:	080085a8 	.word	0x080085a8
  ldr r2, =_sbss
 8001f30:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001f34:	20000384 	.word	0x20000384

08001f38 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f38:	e7fe      	b.n	8001f38 <ADC_IRQHandler>
	...

08001f3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f40:	4b0e      	ldr	r3, [pc, #56]	; (8001f7c <HAL_Init+0x40>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a0d      	ldr	r2, [pc, #52]	; (8001f7c <HAL_Init+0x40>)
 8001f46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f4a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f4c:	4b0b      	ldr	r3, [pc, #44]	; (8001f7c <HAL_Init+0x40>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a0a      	ldr	r2, [pc, #40]	; (8001f7c <HAL_Init+0x40>)
 8001f52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f56:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f58:	4b08      	ldr	r3, [pc, #32]	; (8001f7c <HAL_Init+0x40>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a07      	ldr	r2, [pc, #28]	; (8001f7c <HAL_Init+0x40>)
 8001f5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f64:	2003      	movs	r0, #3
 8001f66:	f000 fd41 	bl	80029ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f6a:	2000      	movs	r0, #0
 8001f6c:	f000 f808 	bl	8001f80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f70:	f7ff fc74 	bl	800185c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f74:	2300      	movs	r3, #0
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	40023c00 	.word	0x40023c00

08001f80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f88:	4b12      	ldr	r3, [pc, #72]	; (8001fd4 <HAL_InitTick+0x54>)
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	4b12      	ldr	r3, [pc, #72]	; (8001fd8 <HAL_InitTick+0x58>)
 8001f8e:	781b      	ldrb	r3, [r3, #0]
 8001f90:	4619      	mov	r1, r3
 8001f92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f96:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f000 fd59 	bl	8002a56 <HAL_SYSTICK_Config>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d001      	beq.n	8001fae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e00e      	b.n	8001fcc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2b0f      	cmp	r3, #15
 8001fb2:	d80a      	bhi.n	8001fca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	6879      	ldr	r1, [r7, #4]
 8001fb8:	f04f 30ff 	mov.w	r0, #4294967295
 8001fbc:	f000 fd21 	bl	8002a02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fc0:	4a06      	ldr	r2, [pc, #24]	; (8001fdc <HAL_InitTick+0x5c>)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	e000      	b.n	8001fcc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3708      	adds	r7, #8
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	20000000 	.word	0x20000000
 8001fd8:	20000008 	.word	0x20000008
 8001fdc:	20000004 	.word	0x20000004

08001fe0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fe4:	4b06      	ldr	r3, [pc, #24]	; (8002000 <HAL_IncTick+0x20>)
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	461a      	mov	r2, r3
 8001fea:	4b06      	ldr	r3, [pc, #24]	; (8002004 <HAL_IncTick+0x24>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4413      	add	r3, r2
 8001ff0:	4a04      	ldr	r2, [pc, #16]	; (8002004 <HAL_IncTick+0x24>)
 8001ff2:	6013      	str	r3, [r2, #0]
}
 8001ff4:	bf00      	nop
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr
 8001ffe:	bf00      	nop
 8002000:	20000008 	.word	0x20000008
 8002004:	20000370 	.word	0x20000370

08002008 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002008:	b480      	push	{r7}
 800200a:	af00      	add	r7, sp, #0
  return uwTick;
 800200c:	4b03      	ldr	r3, [pc, #12]	; (800201c <HAL_GetTick+0x14>)
 800200e:	681b      	ldr	r3, [r3, #0]
}
 8002010:	4618      	mov	r0, r3
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr
 800201a:	bf00      	nop
 800201c:	20000370 	.word	0x20000370

08002020 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b084      	sub	sp, #16
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002028:	f7ff ffee 	bl	8002008 <HAL_GetTick>
 800202c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002038:	d005      	beq.n	8002046 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800203a:	4b0a      	ldr	r3, [pc, #40]	; (8002064 <HAL_Delay+0x44>)
 800203c:	781b      	ldrb	r3, [r3, #0]
 800203e:	461a      	mov	r2, r3
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	4413      	add	r3, r2
 8002044:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002046:	bf00      	nop
 8002048:	f7ff ffde 	bl	8002008 <HAL_GetTick>
 800204c:	4602      	mov	r2, r0
 800204e:	68bb      	ldr	r3, [r7, #8]
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	68fa      	ldr	r2, [r7, #12]
 8002054:	429a      	cmp	r2, r3
 8002056:	d8f7      	bhi.n	8002048 <HAL_Delay+0x28>
  {
  }
}
 8002058:	bf00      	nop
 800205a:	bf00      	nop
 800205c:	3710      	adds	r7, #16
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	20000008 	.word	0x20000008

08002068 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b084      	sub	sp, #16
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002070:	2300      	movs	r3, #0
 8002072:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d101      	bne.n	800207e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e033      	b.n	80020e6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002082:	2b00      	cmp	r3, #0
 8002084:	d109      	bne.n	800209a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	f7ff fc10 	bl	80018ac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2200      	movs	r2, #0
 8002090:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2200      	movs	r2, #0
 8002096:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209e:	f003 0310 	and.w	r3, r3, #16
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d118      	bne.n	80020d8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020aa:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80020ae:	f023 0302 	bic.w	r3, r3, #2
 80020b2:	f043 0202 	orr.w	r2, r3, #2
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f000 faca 	bl	8002654 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2200      	movs	r2, #0
 80020c4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ca:	f023 0303 	bic.w	r3, r3, #3
 80020ce:	f043 0201 	orr.w	r2, r3, #1
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	641a      	str	r2, [r3, #64]	; 0x40
 80020d6:	e001      	b.n	80020dc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2200      	movs	r2, #0
 80020e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80020e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3710      	adds	r7, #16
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
	...

080020f0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b085      	sub	sp, #20
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80020f8:	2300      	movs	r3, #0
 80020fa:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002102:	2b01      	cmp	r3, #1
 8002104:	d101      	bne.n	800210a <HAL_ADC_Start+0x1a>
 8002106:	2302      	movs	r3, #2
 8002108:	e097      	b.n	800223a <HAL_ADC_Start+0x14a>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2201      	movs	r2, #1
 800210e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	f003 0301 	and.w	r3, r3, #1
 800211c:	2b01      	cmp	r3, #1
 800211e:	d018      	beq.n	8002152 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	689a      	ldr	r2, [r3, #8]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f042 0201 	orr.w	r2, r2, #1
 800212e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002130:	4b45      	ldr	r3, [pc, #276]	; (8002248 <HAL_ADC_Start+0x158>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a45      	ldr	r2, [pc, #276]	; (800224c <HAL_ADC_Start+0x15c>)
 8002136:	fba2 2303 	umull	r2, r3, r2, r3
 800213a:	0c9a      	lsrs	r2, r3, #18
 800213c:	4613      	mov	r3, r2
 800213e:	005b      	lsls	r3, r3, #1
 8002140:	4413      	add	r3, r2
 8002142:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002144:	e002      	b.n	800214c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	3b01      	subs	r3, #1
 800214a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d1f9      	bne.n	8002146 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	f003 0301 	and.w	r3, r3, #1
 800215c:	2b01      	cmp	r3, #1
 800215e:	d15f      	bne.n	8002220 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002164:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002168:	f023 0301 	bic.w	r3, r3, #1
 800216c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800217e:	2b00      	cmp	r3, #0
 8002180:	d007      	beq.n	8002192 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002186:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800218a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002196:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800219a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800219e:	d106      	bne.n	80021ae <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021a4:	f023 0206 	bic.w	r2, r3, #6
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	645a      	str	r2, [r3, #68]	; 0x44
 80021ac:	e002      	b.n	80021b4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2200      	movs	r2, #0
 80021b2:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2200      	movs	r2, #0
 80021b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80021bc:	4b24      	ldr	r3, [pc, #144]	; (8002250 <HAL_ADC_Start+0x160>)
 80021be:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80021c8:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	f003 031f 	and.w	r3, r3, #31
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d10f      	bne.n	80021f6 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d129      	bne.n	8002238 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	689a      	ldr	r2, [r3, #8]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80021f2:	609a      	str	r2, [r3, #8]
 80021f4:	e020      	b.n	8002238 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a16      	ldr	r2, [pc, #88]	; (8002254 <HAL_ADC_Start+0x164>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d11b      	bne.n	8002238 <HAL_ADC_Start+0x148>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800220a:	2b00      	cmp	r3, #0
 800220c:	d114      	bne.n	8002238 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	689a      	ldr	r2, [r3, #8]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800221c:	609a      	str	r2, [r3, #8]
 800221e:	e00b      	b.n	8002238 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002224:	f043 0210 	orr.w	r2, r3, #16
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002230:	f043 0201 	orr.w	r2, r3, #1
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002238:	2300      	movs	r3, #0
}
 800223a:	4618      	mov	r0, r3
 800223c:	3714      	adds	r7, #20
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr
 8002246:	bf00      	nop
 8002248:	20000000 	.word	0x20000000
 800224c:	431bde83 	.word	0x431bde83
 8002250:	40012300 	.word	0x40012300
 8002254:	40012000 	.word	0x40012000

08002258 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002266:	2b01      	cmp	r3, #1
 8002268:	d101      	bne.n	800226e <HAL_ADC_Stop+0x16>
 800226a:	2302      	movs	r3, #2
 800226c:	e021      	b.n	80022b2 <HAL_ADC_Stop+0x5a>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2201      	movs	r2, #1
 8002272:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	689a      	ldr	r2, [r3, #8]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f022 0201 	bic.w	r2, r2, #1
 8002284:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	f003 0301 	and.w	r3, r3, #1
 8002290:	2b00      	cmp	r3, #0
 8002292:	d109      	bne.n	80022a8 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002298:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800229c:	f023 0301 	bic.w	r3, r3, #1
 80022a0:	f043 0201 	orr.w	r2, r3, #1
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2200      	movs	r2, #0
 80022ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80022b0:	2300      	movs	r3, #0
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	370c      	adds	r7, #12
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr

080022be <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80022be:	b580      	push	{r7, lr}
 80022c0:	b084      	sub	sp, #16
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	6078      	str	r0, [r7, #4]
 80022c6:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80022c8:	2300      	movs	r3, #0
 80022ca:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022da:	d113      	bne.n	8002304 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80022e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022ea:	d10b      	bne.n	8002304 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f0:	f043 0220 	orr.w	r2, r3, #32
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2200      	movs	r2, #0
 80022fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002300:	2301      	movs	r3, #1
 8002302:	e063      	b.n	80023cc <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002304:	f7ff fe80 	bl	8002008 <HAL_GetTick>
 8002308:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800230a:	e021      	b.n	8002350 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002312:	d01d      	beq.n	8002350 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d007      	beq.n	800232a <HAL_ADC_PollForConversion+0x6c>
 800231a:	f7ff fe75 	bl	8002008 <HAL_GetTick>
 800231e:	4602      	mov	r2, r0
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	1ad3      	subs	r3, r2, r3
 8002324:	683a      	ldr	r2, [r7, #0]
 8002326:	429a      	cmp	r2, r3
 8002328:	d212      	bcs.n	8002350 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f003 0302 	and.w	r3, r3, #2
 8002334:	2b02      	cmp	r3, #2
 8002336:	d00b      	beq.n	8002350 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233c:	f043 0204 	orr.w	r2, r3, #4
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2200      	movs	r2, #0
 8002348:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 800234c:	2303      	movs	r3, #3
 800234e:	e03d      	b.n	80023cc <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 0302 	and.w	r3, r3, #2
 800235a:	2b02      	cmp	r3, #2
 800235c:	d1d6      	bne.n	800230c <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f06f 0212 	mvn.w	r2, #18
 8002366:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800237e:	2b00      	cmp	r3, #0
 8002380:	d123      	bne.n	80023ca <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002386:	2b00      	cmp	r3, #0
 8002388:	d11f      	bne.n	80023ca <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002390:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002394:	2b00      	cmp	r3, #0
 8002396:	d006      	beq.n	80023a6 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d111      	bne.n	80023ca <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023aa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d105      	bne.n	80023ca <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c2:	f043 0201 	orr.w	r2, r3, #1
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80023ca:	2300      	movs	r3, #0
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	3710      	adds	r7, #16
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}

080023d4 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80023d4:	b480      	push	{r7}
 80023d6:	b083      	sub	sp, #12
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	370c      	adds	r7, #12
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr
	...

080023f0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b085      	sub	sp, #20
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
 80023f8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80023fa:	2300      	movs	r3, #0
 80023fc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002404:	2b01      	cmp	r3, #1
 8002406:	d101      	bne.n	800240c <HAL_ADC_ConfigChannel+0x1c>
 8002408:	2302      	movs	r3, #2
 800240a:	e113      	b.n	8002634 <HAL_ADC_ConfigChannel+0x244>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2201      	movs	r2, #1
 8002410:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	2b09      	cmp	r3, #9
 800241a:	d925      	bls.n	8002468 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	68d9      	ldr	r1, [r3, #12]
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	b29b      	uxth	r3, r3
 8002428:	461a      	mov	r2, r3
 800242a:	4613      	mov	r3, r2
 800242c:	005b      	lsls	r3, r3, #1
 800242e:	4413      	add	r3, r2
 8002430:	3b1e      	subs	r3, #30
 8002432:	2207      	movs	r2, #7
 8002434:	fa02 f303 	lsl.w	r3, r2, r3
 8002438:	43da      	mvns	r2, r3
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	400a      	ands	r2, r1
 8002440:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	68d9      	ldr	r1, [r3, #12]
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	689a      	ldr	r2, [r3, #8]
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	b29b      	uxth	r3, r3
 8002452:	4618      	mov	r0, r3
 8002454:	4603      	mov	r3, r0
 8002456:	005b      	lsls	r3, r3, #1
 8002458:	4403      	add	r3, r0
 800245a:	3b1e      	subs	r3, #30
 800245c:	409a      	lsls	r2, r3
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	430a      	orrs	r2, r1
 8002464:	60da      	str	r2, [r3, #12]
 8002466:	e022      	b.n	80024ae <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	6919      	ldr	r1, [r3, #16]
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	b29b      	uxth	r3, r3
 8002474:	461a      	mov	r2, r3
 8002476:	4613      	mov	r3, r2
 8002478:	005b      	lsls	r3, r3, #1
 800247a:	4413      	add	r3, r2
 800247c:	2207      	movs	r2, #7
 800247e:	fa02 f303 	lsl.w	r3, r2, r3
 8002482:	43da      	mvns	r2, r3
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	400a      	ands	r2, r1
 800248a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	6919      	ldr	r1, [r3, #16]
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	689a      	ldr	r2, [r3, #8]
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	b29b      	uxth	r3, r3
 800249c:	4618      	mov	r0, r3
 800249e:	4603      	mov	r3, r0
 80024a0:	005b      	lsls	r3, r3, #1
 80024a2:	4403      	add	r3, r0
 80024a4:	409a      	lsls	r2, r3
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	430a      	orrs	r2, r1
 80024ac:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	2b06      	cmp	r3, #6
 80024b4:	d824      	bhi.n	8002500 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	685a      	ldr	r2, [r3, #4]
 80024c0:	4613      	mov	r3, r2
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	4413      	add	r3, r2
 80024c6:	3b05      	subs	r3, #5
 80024c8:	221f      	movs	r2, #31
 80024ca:	fa02 f303 	lsl.w	r3, r2, r3
 80024ce:	43da      	mvns	r2, r3
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	400a      	ands	r2, r1
 80024d6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	b29b      	uxth	r3, r3
 80024e4:	4618      	mov	r0, r3
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	685a      	ldr	r2, [r3, #4]
 80024ea:	4613      	mov	r3, r2
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	4413      	add	r3, r2
 80024f0:	3b05      	subs	r3, #5
 80024f2:	fa00 f203 	lsl.w	r2, r0, r3
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	430a      	orrs	r2, r1
 80024fc:	635a      	str	r2, [r3, #52]	; 0x34
 80024fe:	e04c      	b.n	800259a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	2b0c      	cmp	r3, #12
 8002506:	d824      	bhi.n	8002552 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	685a      	ldr	r2, [r3, #4]
 8002512:	4613      	mov	r3, r2
 8002514:	009b      	lsls	r3, r3, #2
 8002516:	4413      	add	r3, r2
 8002518:	3b23      	subs	r3, #35	; 0x23
 800251a:	221f      	movs	r2, #31
 800251c:	fa02 f303 	lsl.w	r3, r2, r3
 8002520:	43da      	mvns	r2, r3
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	400a      	ands	r2, r1
 8002528:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	b29b      	uxth	r3, r3
 8002536:	4618      	mov	r0, r3
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	685a      	ldr	r2, [r3, #4]
 800253c:	4613      	mov	r3, r2
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	4413      	add	r3, r2
 8002542:	3b23      	subs	r3, #35	; 0x23
 8002544:	fa00 f203 	lsl.w	r2, r0, r3
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	430a      	orrs	r2, r1
 800254e:	631a      	str	r2, [r3, #48]	; 0x30
 8002550:	e023      	b.n	800259a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	685a      	ldr	r2, [r3, #4]
 800255c:	4613      	mov	r3, r2
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	4413      	add	r3, r2
 8002562:	3b41      	subs	r3, #65	; 0x41
 8002564:	221f      	movs	r2, #31
 8002566:	fa02 f303 	lsl.w	r3, r2, r3
 800256a:	43da      	mvns	r2, r3
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	400a      	ands	r2, r1
 8002572:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	b29b      	uxth	r3, r3
 8002580:	4618      	mov	r0, r3
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	685a      	ldr	r2, [r3, #4]
 8002586:	4613      	mov	r3, r2
 8002588:	009b      	lsls	r3, r3, #2
 800258a:	4413      	add	r3, r2
 800258c:	3b41      	subs	r3, #65	; 0x41
 800258e:	fa00 f203 	lsl.w	r2, r0, r3
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	430a      	orrs	r2, r1
 8002598:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800259a:	4b29      	ldr	r3, [pc, #164]	; (8002640 <HAL_ADC_ConfigChannel+0x250>)
 800259c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a28      	ldr	r2, [pc, #160]	; (8002644 <HAL_ADC_ConfigChannel+0x254>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d10f      	bne.n	80025c8 <HAL_ADC_ConfigChannel+0x1d8>
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	2b12      	cmp	r3, #18
 80025ae:	d10b      	bne.n	80025c8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a1d      	ldr	r2, [pc, #116]	; (8002644 <HAL_ADC_ConfigChannel+0x254>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d12b      	bne.n	800262a <HAL_ADC_ConfigChannel+0x23a>
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a1c      	ldr	r2, [pc, #112]	; (8002648 <HAL_ADC_ConfigChannel+0x258>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d003      	beq.n	80025e4 <HAL_ADC_ConfigChannel+0x1f4>
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	2b11      	cmp	r3, #17
 80025e2:	d122      	bne.n	800262a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a11      	ldr	r2, [pc, #68]	; (8002648 <HAL_ADC_ConfigChannel+0x258>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d111      	bne.n	800262a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002606:	4b11      	ldr	r3, [pc, #68]	; (800264c <HAL_ADC_ConfigChannel+0x25c>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a11      	ldr	r2, [pc, #68]	; (8002650 <HAL_ADC_ConfigChannel+0x260>)
 800260c:	fba2 2303 	umull	r2, r3, r2, r3
 8002610:	0c9a      	lsrs	r2, r3, #18
 8002612:	4613      	mov	r3, r2
 8002614:	009b      	lsls	r3, r3, #2
 8002616:	4413      	add	r3, r2
 8002618:	005b      	lsls	r3, r3, #1
 800261a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800261c:	e002      	b.n	8002624 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	3b01      	subs	r3, #1
 8002622:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d1f9      	bne.n	800261e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2200      	movs	r2, #0
 800262e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002632:	2300      	movs	r3, #0
}
 8002634:	4618      	mov	r0, r3
 8002636:	3714      	adds	r7, #20
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr
 8002640:	40012300 	.word	0x40012300
 8002644:	40012000 	.word	0x40012000
 8002648:	10000012 	.word	0x10000012
 800264c:	20000000 	.word	0x20000000
 8002650:	431bde83 	.word	0x431bde83

08002654 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002654:	b480      	push	{r7}
 8002656:	b085      	sub	sp, #20
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800265c:	4b79      	ldr	r3, [pc, #484]	; (8002844 <ADC_Init+0x1f0>)
 800265e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	685a      	ldr	r2, [r3, #4]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	431a      	orrs	r2, r3
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	685a      	ldr	r2, [r3, #4]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002688:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	6859      	ldr	r1, [r3, #4]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	691b      	ldr	r3, [r3, #16]
 8002694:	021a      	lsls	r2, r3, #8
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	430a      	orrs	r2, r1
 800269c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	685a      	ldr	r2, [r3, #4]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80026ac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	6859      	ldr	r1, [r3, #4]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	689a      	ldr	r2, [r3, #8]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	430a      	orrs	r2, r1
 80026be:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	689a      	ldr	r2, [r3, #8]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026ce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	6899      	ldr	r1, [r3, #8]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	68da      	ldr	r2, [r3, #12]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	430a      	orrs	r2, r1
 80026e0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026e6:	4a58      	ldr	r2, [pc, #352]	; (8002848 <ADC_Init+0x1f4>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d022      	beq.n	8002732 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	689a      	ldr	r2, [r3, #8]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80026fa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	6899      	ldr	r1, [r3, #8]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	430a      	orrs	r2, r1
 800270c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	689a      	ldr	r2, [r3, #8]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800271c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	6899      	ldr	r1, [r3, #8]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	430a      	orrs	r2, r1
 800272e:	609a      	str	r2, [r3, #8]
 8002730:	e00f      	b.n	8002752 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	689a      	ldr	r2, [r3, #8]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002740:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	689a      	ldr	r2, [r3, #8]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002750:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	689a      	ldr	r2, [r3, #8]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f022 0202 	bic.w	r2, r2, #2
 8002760:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	6899      	ldr	r1, [r3, #8]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	7e1b      	ldrb	r3, [r3, #24]
 800276c:	005a      	lsls	r2, r3, #1
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	430a      	orrs	r2, r1
 8002774:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	f893 3020 	ldrb.w	r3, [r3, #32]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d01b      	beq.n	80027b8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	685a      	ldr	r2, [r3, #4]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800278e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	685a      	ldr	r2, [r3, #4]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800279e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	6859      	ldr	r1, [r3, #4]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027aa:	3b01      	subs	r3, #1
 80027ac:	035a      	lsls	r2, r3, #13
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	430a      	orrs	r2, r1
 80027b4:	605a      	str	r2, [r3, #4]
 80027b6:	e007      	b.n	80027c8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	685a      	ldr	r2, [r3, #4]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027c6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80027d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	69db      	ldr	r3, [r3, #28]
 80027e2:	3b01      	subs	r3, #1
 80027e4:	051a      	lsls	r2, r3, #20
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	430a      	orrs	r2, r1
 80027ec:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	689a      	ldr	r2, [r3, #8]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80027fc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	6899      	ldr	r1, [r3, #8]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800280a:	025a      	lsls	r2, r3, #9
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	430a      	orrs	r2, r1
 8002812:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	689a      	ldr	r2, [r3, #8]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002822:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	6899      	ldr	r1, [r3, #8]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	695b      	ldr	r3, [r3, #20]
 800282e:	029a      	lsls	r2, r3, #10
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	430a      	orrs	r2, r1
 8002836:	609a      	str	r2, [r3, #8]
}
 8002838:	bf00      	nop
 800283a:	3714      	adds	r7, #20
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr
 8002844:	40012300 	.word	0x40012300
 8002848:	0f000001 	.word	0x0f000001

0800284c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800284c:	b480      	push	{r7}
 800284e:	b085      	sub	sp, #20
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	f003 0307 	and.w	r3, r3, #7
 800285a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800285c:	4b0c      	ldr	r3, [pc, #48]	; (8002890 <__NVIC_SetPriorityGrouping+0x44>)
 800285e:	68db      	ldr	r3, [r3, #12]
 8002860:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002862:	68ba      	ldr	r2, [r7, #8]
 8002864:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002868:	4013      	ands	r3, r2
 800286a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002874:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002878:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800287c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800287e:	4a04      	ldr	r2, [pc, #16]	; (8002890 <__NVIC_SetPriorityGrouping+0x44>)
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	60d3      	str	r3, [r2, #12]
}
 8002884:	bf00      	nop
 8002886:	3714      	adds	r7, #20
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr
 8002890:	e000ed00 	.word	0xe000ed00

08002894 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002894:	b480      	push	{r7}
 8002896:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002898:	4b04      	ldr	r3, [pc, #16]	; (80028ac <__NVIC_GetPriorityGrouping+0x18>)
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	0a1b      	lsrs	r3, r3, #8
 800289e:	f003 0307 	and.w	r3, r3, #7
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr
 80028ac:	e000ed00 	.word	0xe000ed00

080028b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b083      	sub	sp, #12
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	4603      	mov	r3, r0
 80028b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	db0b      	blt.n	80028da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028c2:	79fb      	ldrb	r3, [r7, #7]
 80028c4:	f003 021f 	and.w	r2, r3, #31
 80028c8:	4907      	ldr	r1, [pc, #28]	; (80028e8 <__NVIC_EnableIRQ+0x38>)
 80028ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ce:	095b      	lsrs	r3, r3, #5
 80028d0:	2001      	movs	r0, #1
 80028d2:	fa00 f202 	lsl.w	r2, r0, r2
 80028d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80028da:	bf00      	nop
 80028dc:	370c      	adds	r7, #12
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr
 80028e6:	bf00      	nop
 80028e8:	e000e100 	.word	0xe000e100

080028ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b083      	sub	sp, #12
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	4603      	mov	r3, r0
 80028f4:	6039      	str	r1, [r7, #0]
 80028f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	db0a      	blt.n	8002916 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	b2da      	uxtb	r2, r3
 8002904:	490c      	ldr	r1, [pc, #48]	; (8002938 <__NVIC_SetPriority+0x4c>)
 8002906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800290a:	0112      	lsls	r2, r2, #4
 800290c:	b2d2      	uxtb	r2, r2
 800290e:	440b      	add	r3, r1
 8002910:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002914:	e00a      	b.n	800292c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	b2da      	uxtb	r2, r3
 800291a:	4908      	ldr	r1, [pc, #32]	; (800293c <__NVIC_SetPriority+0x50>)
 800291c:	79fb      	ldrb	r3, [r7, #7]
 800291e:	f003 030f 	and.w	r3, r3, #15
 8002922:	3b04      	subs	r3, #4
 8002924:	0112      	lsls	r2, r2, #4
 8002926:	b2d2      	uxtb	r2, r2
 8002928:	440b      	add	r3, r1
 800292a:	761a      	strb	r2, [r3, #24]
}
 800292c:	bf00      	nop
 800292e:	370c      	adds	r7, #12
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr
 8002938:	e000e100 	.word	0xe000e100
 800293c:	e000ed00 	.word	0xe000ed00

08002940 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002940:	b480      	push	{r7}
 8002942:	b089      	sub	sp, #36	; 0x24
 8002944:	af00      	add	r7, sp, #0
 8002946:	60f8      	str	r0, [r7, #12]
 8002948:	60b9      	str	r1, [r7, #8]
 800294a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	f003 0307 	and.w	r3, r3, #7
 8002952:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002954:	69fb      	ldr	r3, [r7, #28]
 8002956:	f1c3 0307 	rsb	r3, r3, #7
 800295a:	2b04      	cmp	r3, #4
 800295c:	bf28      	it	cs
 800295e:	2304      	movcs	r3, #4
 8002960:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	3304      	adds	r3, #4
 8002966:	2b06      	cmp	r3, #6
 8002968:	d902      	bls.n	8002970 <NVIC_EncodePriority+0x30>
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	3b03      	subs	r3, #3
 800296e:	e000      	b.n	8002972 <NVIC_EncodePriority+0x32>
 8002970:	2300      	movs	r3, #0
 8002972:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002974:	f04f 32ff 	mov.w	r2, #4294967295
 8002978:	69bb      	ldr	r3, [r7, #24]
 800297a:	fa02 f303 	lsl.w	r3, r2, r3
 800297e:	43da      	mvns	r2, r3
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	401a      	ands	r2, r3
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002988:	f04f 31ff 	mov.w	r1, #4294967295
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	fa01 f303 	lsl.w	r3, r1, r3
 8002992:	43d9      	mvns	r1, r3
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002998:	4313      	orrs	r3, r2
         );
}
 800299a:	4618      	mov	r0, r3
 800299c:	3724      	adds	r7, #36	; 0x24
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr
	...

080029a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b082      	sub	sp, #8
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	3b01      	subs	r3, #1
 80029b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029b8:	d301      	bcc.n	80029be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029ba:	2301      	movs	r3, #1
 80029bc:	e00f      	b.n	80029de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029be:	4a0a      	ldr	r2, [pc, #40]	; (80029e8 <SysTick_Config+0x40>)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	3b01      	subs	r3, #1
 80029c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029c6:	210f      	movs	r1, #15
 80029c8:	f04f 30ff 	mov.w	r0, #4294967295
 80029cc:	f7ff ff8e 	bl	80028ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029d0:	4b05      	ldr	r3, [pc, #20]	; (80029e8 <SysTick_Config+0x40>)
 80029d2:	2200      	movs	r2, #0
 80029d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029d6:	4b04      	ldr	r3, [pc, #16]	; (80029e8 <SysTick_Config+0x40>)
 80029d8:	2207      	movs	r2, #7
 80029da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029dc:	2300      	movs	r3, #0
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3708      	adds	r7, #8
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop
 80029e8:	e000e010 	.word	0xe000e010

080029ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b082      	sub	sp, #8
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029f4:	6878      	ldr	r0, [r7, #4]
 80029f6:	f7ff ff29 	bl	800284c <__NVIC_SetPriorityGrouping>
}
 80029fa:	bf00      	nop
 80029fc:	3708      	adds	r7, #8
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}

08002a02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a02:	b580      	push	{r7, lr}
 8002a04:	b086      	sub	sp, #24
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	4603      	mov	r3, r0
 8002a0a:	60b9      	str	r1, [r7, #8]
 8002a0c:	607a      	str	r2, [r7, #4]
 8002a0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a10:	2300      	movs	r3, #0
 8002a12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a14:	f7ff ff3e 	bl	8002894 <__NVIC_GetPriorityGrouping>
 8002a18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a1a:	687a      	ldr	r2, [r7, #4]
 8002a1c:	68b9      	ldr	r1, [r7, #8]
 8002a1e:	6978      	ldr	r0, [r7, #20]
 8002a20:	f7ff ff8e 	bl	8002940 <NVIC_EncodePriority>
 8002a24:	4602      	mov	r2, r0
 8002a26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a2a:	4611      	mov	r1, r2
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f7ff ff5d 	bl	80028ec <__NVIC_SetPriority>
}
 8002a32:	bf00      	nop
 8002a34:	3718      	adds	r7, #24
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}

08002a3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a3a:	b580      	push	{r7, lr}
 8002a3c:	b082      	sub	sp, #8
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	4603      	mov	r3, r0
 8002a42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f7ff ff31 	bl	80028b0 <__NVIC_EnableIRQ>
}
 8002a4e:	bf00      	nop
 8002a50:	3708      	adds	r7, #8
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}

08002a56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a56:	b580      	push	{r7, lr}
 8002a58:	b082      	sub	sp, #8
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f7ff ffa2 	bl	80029a8 <SysTick_Config>
 8002a64:	4603      	mov	r3, r0
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3708      	adds	r7, #8
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}

08002a6e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002a6e:	b580      	push	{r7, lr}
 8002a70:	b084      	sub	sp, #16
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a7a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002a7c:	f7ff fac4 	bl	8002008 <HAL_GetTick>
 8002a80:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	2b02      	cmp	r3, #2
 8002a8c:	d008      	beq.n	8002aa0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2280      	movs	r2, #128	; 0x80
 8002a92:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2200      	movs	r2, #0
 8002a98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	e052      	b.n	8002b46 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f022 0216 	bic.w	r2, r2, #22
 8002aae:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	695a      	ldr	r2, [r3, #20]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002abe:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d103      	bne.n	8002ad0 <HAL_DMA_Abort+0x62>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d007      	beq.n	8002ae0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f022 0208 	bic.w	r2, r2, #8
 8002ade:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f022 0201 	bic.w	r2, r2, #1
 8002aee:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002af0:	e013      	b.n	8002b1a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002af2:	f7ff fa89 	bl	8002008 <HAL_GetTick>
 8002af6:	4602      	mov	r2, r0
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	1ad3      	subs	r3, r2, r3
 8002afc:	2b05      	cmp	r3, #5
 8002afe:	d90c      	bls.n	8002b1a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2220      	movs	r2, #32
 8002b04:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2203      	movs	r2, #3
 8002b0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2200      	movs	r2, #0
 8002b12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002b16:	2303      	movs	r3, #3
 8002b18:	e015      	b.n	8002b46 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 0301 	and.w	r3, r3, #1
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d1e4      	bne.n	8002af2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b2c:	223f      	movs	r2, #63	; 0x3f
 8002b2e:	409a      	lsls	r2, r3
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2201      	movs	r2, #1
 8002b38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002b44:	2300      	movs	r3, #0
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3710      	adds	r7, #16
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}

08002b4e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002b4e:	b480      	push	{r7}
 8002b50:	b083      	sub	sp, #12
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	2b02      	cmp	r3, #2
 8002b60:	d004      	beq.n	8002b6c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2280      	movs	r2, #128	; 0x80
 8002b66:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	e00c      	b.n	8002b86 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2205      	movs	r2, #5
 8002b70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f022 0201 	bic.w	r2, r2, #1
 8002b82:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002b84:	2300      	movs	r3, #0
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	370c      	adds	r7, #12
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b90:	4770      	bx	lr
	...

08002b94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b089      	sub	sp, #36	; 0x24
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
 8002b9c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002baa:	2300      	movs	r3, #0
 8002bac:	61fb      	str	r3, [r7, #28]
 8002bae:	e159      	b.n	8002e64 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	69fb      	ldr	r3, [r7, #28]
 8002bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	697a      	ldr	r2, [r7, #20]
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002bc4:	693a      	ldr	r2, [r7, #16]
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	f040 8148 	bne.w	8002e5e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	f003 0303 	and.w	r3, r3, #3
 8002bd6:	2b01      	cmp	r3, #1
 8002bd8:	d005      	beq.n	8002be6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002be2:	2b02      	cmp	r3, #2
 8002be4:	d130      	bne.n	8002c48 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002bec:	69fb      	ldr	r3, [r7, #28]
 8002bee:	005b      	lsls	r3, r3, #1
 8002bf0:	2203      	movs	r2, #3
 8002bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf6:	43db      	mvns	r3, r3
 8002bf8:	69ba      	ldr	r2, [r7, #24]
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	68da      	ldr	r2, [r3, #12]
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	005b      	lsls	r3, r3, #1
 8002c06:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0a:	69ba      	ldr	r2, [r7, #24]
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	69ba      	ldr	r2, [r7, #24]
 8002c14:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	69fb      	ldr	r3, [r7, #28]
 8002c20:	fa02 f303 	lsl.w	r3, r2, r3
 8002c24:	43db      	mvns	r3, r3
 8002c26:	69ba      	ldr	r2, [r7, #24]
 8002c28:	4013      	ands	r3, r2
 8002c2a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	091b      	lsrs	r3, r3, #4
 8002c32:	f003 0201 	and.w	r2, r3, #1
 8002c36:	69fb      	ldr	r3, [r7, #28]
 8002c38:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3c:	69ba      	ldr	r2, [r7, #24]
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	69ba      	ldr	r2, [r7, #24]
 8002c46:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f003 0303 	and.w	r3, r3, #3
 8002c50:	2b03      	cmp	r3, #3
 8002c52:	d017      	beq.n	8002c84 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	68db      	ldr	r3, [r3, #12]
 8002c58:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	005b      	lsls	r3, r3, #1
 8002c5e:	2203      	movs	r2, #3
 8002c60:	fa02 f303 	lsl.w	r3, r2, r3
 8002c64:	43db      	mvns	r3, r3
 8002c66:	69ba      	ldr	r2, [r7, #24]
 8002c68:	4013      	ands	r3, r2
 8002c6a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	689a      	ldr	r2, [r3, #8]
 8002c70:	69fb      	ldr	r3, [r7, #28]
 8002c72:	005b      	lsls	r3, r3, #1
 8002c74:	fa02 f303 	lsl.w	r3, r2, r3
 8002c78:	69ba      	ldr	r2, [r7, #24]
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	69ba      	ldr	r2, [r7, #24]
 8002c82:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	f003 0303 	and.w	r3, r3, #3
 8002c8c:	2b02      	cmp	r3, #2
 8002c8e:	d123      	bne.n	8002cd8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c90:	69fb      	ldr	r3, [r7, #28]
 8002c92:	08da      	lsrs	r2, r3, #3
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	3208      	adds	r2, #8
 8002c98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	f003 0307 	and.w	r3, r3, #7
 8002ca4:	009b      	lsls	r3, r3, #2
 8002ca6:	220f      	movs	r2, #15
 8002ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cac:	43db      	mvns	r3, r3
 8002cae:	69ba      	ldr	r2, [r7, #24]
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	691a      	ldr	r2, [r3, #16]
 8002cb8:	69fb      	ldr	r3, [r7, #28]
 8002cba:	f003 0307 	and.w	r3, r3, #7
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc4:	69ba      	ldr	r2, [r7, #24]
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002cca:	69fb      	ldr	r3, [r7, #28]
 8002ccc:	08da      	lsrs	r2, r3, #3
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	3208      	adds	r2, #8
 8002cd2:	69b9      	ldr	r1, [r7, #24]
 8002cd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002cde:	69fb      	ldr	r3, [r7, #28]
 8002ce0:	005b      	lsls	r3, r3, #1
 8002ce2:	2203      	movs	r2, #3
 8002ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce8:	43db      	mvns	r3, r3
 8002cea:	69ba      	ldr	r2, [r7, #24]
 8002cec:	4013      	ands	r3, r2
 8002cee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	f003 0203 	and.w	r2, r3, #3
 8002cf8:	69fb      	ldr	r3, [r7, #28]
 8002cfa:	005b      	lsls	r3, r3, #1
 8002cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002d00:	69ba      	ldr	r2, [r7, #24]
 8002d02:	4313      	orrs	r3, r2
 8002d04:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	69ba      	ldr	r2, [r7, #24]
 8002d0a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	f000 80a2 	beq.w	8002e5e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	60fb      	str	r3, [r7, #12]
 8002d1e:	4b57      	ldr	r3, [pc, #348]	; (8002e7c <HAL_GPIO_Init+0x2e8>)
 8002d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d22:	4a56      	ldr	r2, [pc, #344]	; (8002e7c <HAL_GPIO_Init+0x2e8>)
 8002d24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d28:	6453      	str	r3, [r2, #68]	; 0x44
 8002d2a:	4b54      	ldr	r3, [pc, #336]	; (8002e7c <HAL_GPIO_Init+0x2e8>)
 8002d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d32:	60fb      	str	r3, [r7, #12]
 8002d34:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d36:	4a52      	ldr	r2, [pc, #328]	; (8002e80 <HAL_GPIO_Init+0x2ec>)
 8002d38:	69fb      	ldr	r3, [r7, #28]
 8002d3a:	089b      	lsrs	r3, r3, #2
 8002d3c:	3302      	adds	r3, #2
 8002d3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d44:	69fb      	ldr	r3, [r7, #28]
 8002d46:	f003 0303 	and.w	r3, r3, #3
 8002d4a:	009b      	lsls	r3, r3, #2
 8002d4c:	220f      	movs	r2, #15
 8002d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d52:	43db      	mvns	r3, r3
 8002d54:	69ba      	ldr	r2, [r7, #24]
 8002d56:	4013      	ands	r3, r2
 8002d58:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	4a49      	ldr	r2, [pc, #292]	; (8002e84 <HAL_GPIO_Init+0x2f0>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d019      	beq.n	8002d96 <HAL_GPIO_Init+0x202>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	4a48      	ldr	r2, [pc, #288]	; (8002e88 <HAL_GPIO_Init+0x2f4>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d013      	beq.n	8002d92 <HAL_GPIO_Init+0x1fe>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	4a47      	ldr	r2, [pc, #284]	; (8002e8c <HAL_GPIO_Init+0x2f8>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d00d      	beq.n	8002d8e <HAL_GPIO_Init+0x1fa>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	4a46      	ldr	r2, [pc, #280]	; (8002e90 <HAL_GPIO_Init+0x2fc>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d007      	beq.n	8002d8a <HAL_GPIO_Init+0x1f6>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	4a45      	ldr	r2, [pc, #276]	; (8002e94 <HAL_GPIO_Init+0x300>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d101      	bne.n	8002d86 <HAL_GPIO_Init+0x1f2>
 8002d82:	2304      	movs	r3, #4
 8002d84:	e008      	b.n	8002d98 <HAL_GPIO_Init+0x204>
 8002d86:	2307      	movs	r3, #7
 8002d88:	e006      	b.n	8002d98 <HAL_GPIO_Init+0x204>
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	e004      	b.n	8002d98 <HAL_GPIO_Init+0x204>
 8002d8e:	2302      	movs	r3, #2
 8002d90:	e002      	b.n	8002d98 <HAL_GPIO_Init+0x204>
 8002d92:	2301      	movs	r3, #1
 8002d94:	e000      	b.n	8002d98 <HAL_GPIO_Init+0x204>
 8002d96:	2300      	movs	r3, #0
 8002d98:	69fa      	ldr	r2, [r7, #28]
 8002d9a:	f002 0203 	and.w	r2, r2, #3
 8002d9e:	0092      	lsls	r2, r2, #2
 8002da0:	4093      	lsls	r3, r2
 8002da2:	69ba      	ldr	r2, [r7, #24]
 8002da4:	4313      	orrs	r3, r2
 8002da6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002da8:	4935      	ldr	r1, [pc, #212]	; (8002e80 <HAL_GPIO_Init+0x2ec>)
 8002daa:	69fb      	ldr	r3, [r7, #28]
 8002dac:	089b      	lsrs	r3, r3, #2
 8002dae:	3302      	adds	r3, #2
 8002db0:	69ba      	ldr	r2, [r7, #24]
 8002db2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002db6:	4b38      	ldr	r3, [pc, #224]	; (8002e98 <HAL_GPIO_Init+0x304>)
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dbc:	693b      	ldr	r3, [r7, #16]
 8002dbe:	43db      	mvns	r3, r3
 8002dc0:	69ba      	ldr	r2, [r7, #24]
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d003      	beq.n	8002dda <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002dd2:	69ba      	ldr	r2, [r7, #24]
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002dda:	4a2f      	ldr	r2, [pc, #188]	; (8002e98 <HAL_GPIO_Init+0x304>)
 8002ddc:	69bb      	ldr	r3, [r7, #24]
 8002dde:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002de0:	4b2d      	ldr	r3, [pc, #180]	; (8002e98 <HAL_GPIO_Init+0x304>)
 8002de2:	68db      	ldr	r3, [r3, #12]
 8002de4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	43db      	mvns	r3, r3
 8002dea:	69ba      	ldr	r2, [r7, #24]
 8002dec:	4013      	ands	r3, r2
 8002dee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d003      	beq.n	8002e04 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002dfc:	69ba      	ldr	r2, [r7, #24]
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	4313      	orrs	r3, r2
 8002e02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e04:	4a24      	ldr	r2, [pc, #144]	; (8002e98 <HAL_GPIO_Init+0x304>)
 8002e06:	69bb      	ldr	r3, [r7, #24]
 8002e08:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002e0a:	4b23      	ldr	r3, [pc, #140]	; (8002e98 <HAL_GPIO_Init+0x304>)
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e10:	693b      	ldr	r3, [r7, #16]
 8002e12:	43db      	mvns	r3, r3
 8002e14:	69ba      	ldr	r2, [r7, #24]
 8002e16:	4013      	ands	r3, r2
 8002e18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d003      	beq.n	8002e2e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002e26:	69ba      	ldr	r2, [r7, #24]
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e2e:	4a1a      	ldr	r2, [pc, #104]	; (8002e98 <HAL_GPIO_Init+0x304>)
 8002e30:	69bb      	ldr	r3, [r7, #24]
 8002e32:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e34:	4b18      	ldr	r3, [pc, #96]	; (8002e98 <HAL_GPIO_Init+0x304>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	43db      	mvns	r3, r3
 8002e3e:	69ba      	ldr	r2, [r7, #24]
 8002e40:	4013      	ands	r3, r2
 8002e42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d003      	beq.n	8002e58 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002e50:	69ba      	ldr	r2, [r7, #24]
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	4313      	orrs	r3, r2
 8002e56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e58:	4a0f      	ldr	r2, [pc, #60]	; (8002e98 <HAL_GPIO_Init+0x304>)
 8002e5a:	69bb      	ldr	r3, [r7, #24]
 8002e5c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e5e:	69fb      	ldr	r3, [r7, #28]
 8002e60:	3301      	adds	r3, #1
 8002e62:	61fb      	str	r3, [r7, #28]
 8002e64:	69fb      	ldr	r3, [r7, #28]
 8002e66:	2b0f      	cmp	r3, #15
 8002e68:	f67f aea2 	bls.w	8002bb0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002e6c:	bf00      	nop
 8002e6e:	bf00      	nop
 8002e70:	3724      	adds	r7, #36	; 0x24
 8002e72:	46bd      	mov	sp, r7
 8002e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e78:	4770      	bx	lr
 8002e7a:	bf00      	nop
 8002e7c:	40023800 	.word	0x40023800
 8002e80:	40013800 	.word	0x40013800
 8002e84:	40020000 	.word	0x40020000
 8002e88:	40020400 	.word	0x40020400
 8002e8c:	40020800 	.word	0x40020800
 8002e90:	40020c00 	.word	0x40020c00
 8002e94:	40021000 	.word	0x40021000
 8002e98:	40013c00 	.word	0x40013c00

08002e9c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b085      	sub	sp, #20
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
 8002ea4:	460b      	mov	r3, r1
 8002ea6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	691a      	ldr	r2, [r3, #16]
 8002eac:	887b      	ldrh	r3, [r7, #2]
 8002eae:	4013      	ands	r3, r2
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d002      	beq.n	8002eba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	73fb      	strb	r3, [r7, #15]
 8002eb8:	e001      	b.n	8002ebe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002ebe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	3714      	adds	r7, #20
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eca:	4770      	bx	lr

08002ecc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b083      	sub	sp, #12
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
 8002ed4:	460b      	mov	r3, r1
 8002ed6:	807b      	strh	r3, [r7, #2]
 8002ed8:	4613      	mov	r3, r2
 8002eda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002edc:	787b      	ldrb	r3, [r7, #1]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d003      	beq.n	8002eea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ee2:	887a      	ldrh	r2, [r7, #2]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ee8:	e003      	b.n	8002ef2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002eea:	887b      	ldrh	r3, [r7, #2]
 8002eec:	041a      	lsls	r2, r3, #16
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	619a      	str	r2, [r3, #24]
}
 8002ef2:	bf00      	nop
 8002ef4:	370c      	adds	r7, #12
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efc:	4770      	bx	lr
	...

08002f00 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b082      	sub	sp, #8
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	4603      	mov	r3, r0
 8002f08:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002f0a:	4b08      	ldr	r3, [pc, #32]	; (8002f2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f0c:	695a      	ldr	r2, [r3, #20]
 8002f0e:	88fb      	ldrh	r3, [r7, #6]
 8002f10:	4013      	ands	r3, r2
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d006      	beq.n	8002f24 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002f16:	4a05      	ldr	r2, [pc, #20]	; (8002f2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f18:	88fb      	ldrh	r3, [r7, #6]
 8002f1a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002f1c:	88fb      	ldrh	r3, [r7, #6]
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f000 f806 	bl	8002f30 <HAL_GPIO_EXTI_Callback>
  }
}
 8002f24:	bf00      	nop
 8002f26:	3708      	adds	r7, #8
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}
 8002f2c:	40013c00 	.word	0x40013c00

08002f30 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b083      	sub	sp, #12
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	4603      	mov	r3, r0
 8002f38:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002f3a:	bf00      	nop
 8002f3c:	370c      	adds	r7, #12
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f44:	4770      	bx	lr
	...

08002f48 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b086      	sub	sp, #24
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d101      	bne.n	8002f5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	e267      	b.n	800342a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 0301 	and.w	r3, r3, #1
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d075      	beq.n	8003052 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f66:	4b88      	ldr	r3, [pc, #544]	; (8003188 <HAL_RCC_OscConfig+0x240>)
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	f003 030c 	and.w	r3, r3, #12
 8002f6e:	2b04      	cmp	r3, #4
 8002f70:	d00c      	beq.n	8002f8c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f72:	4b85      	ldr	r3, [pc, #532]	; (8003188 <HAL_RCC_OscConfig+0x240>)
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f7a:	2b08      	cmp	r3, #8
 8002f7c:	d112      	bne.n	8002fa4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f7e:	4b82      	ldr	r3, [pc, #520]	; (8003188 <HAL_RCC_OscConfig+0x240>)
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f86:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f8a:	d10b      	bne.n	8002fa4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f8c:	4b7e      	ldr	r3, [pc, #504]	; (8003188 <HAL_RCC_OscConfig+0x240>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d05b      	beq.n	8003050 <HAL_RCC_OscConfig+0x108>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d157      	bne.n	8003050 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	e242      	b.n	800342a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fac:	d106      	bne.n	8002fbc <HAL_RCC_OscConfig+0x74>
 8002fae:	4b76      	ldr	r3, [pc, #472]	; (8003188 <HAL_RCC_OscConfig+0x240>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a75      	ldr	r2, [pc, #468]	; (8003188 <HAL_RCC_OscConfig+0x240>)
 8002fb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fb8:	6013      	str	r3, [r2, #0]
 8002fba:	e01d      	b.n	8002ff8 <HAL_RCC_OscConfig+0xb0>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002fc4:	d10c      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x98>
 8002fc6:	4b70      	ldr	r3, [pc, #448]	; (8003188 <HAL_RCC_OscConfig+0x240>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a6f      	ldr	r2, [pc, #444]	; (8003188 <HAL_RCC_OscConfig+0x240>)
 8002fcc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fd0:	6013      	str	r3, [r2, #0]
 8002fd2:	4b6d      	ldr	r3, [pc, #436]	; (8003188 <HAL_RCC_OscConfig+0x240>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a6c      	ldr	r2, [pc, #432]	; (8003188 <HAL_RCC_OscConfig+0x240>)
 8002fd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fdc:	6013      	str	r3, [r2, #0]
 8002fde:	e00b      	b.n	8002ff8 <HAL_RCC_OscConfig+0xb0>
 8002fe0:	4b69      	ldr	r3, [pc, #420]	; (8003188 <HAL_RCC_OscConfig+0x240>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a68      	ldr	r2, [pc, #416]	; (8003188 <HAL_RCC_OscConfig+0x240>)
 8002fe6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fea:	6013      	str	r3, [r2, #0]
 8002fec:	4b66      	ldr	r3, [pc, #408]	; (8003188 <HAL_RCC_OscConfig+0x240>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a65      	ldr	r2, [pc, #404]	; (8003188 <HAL_RCC_OscConfig+0x240>)
 8002ff2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ff6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d013      	beq.n	8003028 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003000:	f7ff f802 	bl	8002008 <HAL_GetTick>
 8003004:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003006:	e008      	b.n	800301a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003008:	f7fe fffe 	bl	8002008 <HAL_GetTick>
 800300c:	4602      	mov	r2, r0
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	2b64      	cmp	r3, #100	; 0x64
 8003014:	d901      	bls.n	800301a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003016:	2303      	movs	r3, #3
 8003018:	e207      	b.n	800342a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800301a:	4b5b      	ldr	r3, [pc, #364]	; (8003188 <HAL_RCC_OscConfig+0x240>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003022:	2b00      	cmp	r3, #0
 8003024:	d0f0      	beq.n	8003008 <HAL_RCC_OscConfig+0xc0>
 8003026:	e014      	b.n	8003052 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003028:	f7fe ffee 	bl	8002008 <HAL_GetTick>
 800302c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800302e:	e008      	b.n	8003042 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003030:	f7fe ffea 	bl	8002008 <HAL_GetTick>
 8003034:	4602      	mov	r2, r0
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	2b64      	cmp	r3, #100	; 0x64
 800303c:	d901      	bls.n	8003042 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800303e:	2303      	movs	r3, #3
 8003040:	e1f3      	b.n	800342a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003042:	4b51      	ldr	r3, [pc, #324]	; (8003188 <HAL_RCC_OscConfig+0x240>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800304a:	2b00      	cmp	r3, #0
 800304c:	d1f0      	bne.n	8003030 <HAL_RCC_OscConfig+0xe8>
 800304e:	e000      	b.n	8003052 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003050:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 0302 	and.w	r3, r3, #2
 800305a:	2b00      	cmp	r3, #0
 800305c:	d063      	beq.n	8003126 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800305e:	4b4a      	ldr	r3, [pc, #296]	; (8003188 <HAL_RCC_OscConfig+0x240>)
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	f003 030c 	and.w	r3, r3, #12
 8003066:	2b00      	cmp	r3, #0
 8003068:	d00b      	beq.n	8003082 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800306a:	4b47      	ldr	r3, [pc, #284]	; (8003188 <HAL_RCC_OscConfig+0x240>)
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003072:	2b08      	cmp	r3, #8
 8003074:	d11c      	bne.n	80030b0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003076:	4b44      	ldr	r3, [pc, #272]	; (8003188 <HAL_RCC_OscConfig+0x240>)
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800307e:	2b00      	cmp	r3, #0
 8003080:	d116      	bne.n	80030b0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003082:	4b41      	ldr	r3, [pc, #260]	; (8003188 <HAL_RCC_OscConfig+0x240>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 0302 	and.w	r3, r3, #2
 800308a:	2b00      	cmp	r3, #0
 800308c:	d005      	beq.n	800309a <HAL_RCC_OscConfig+0x152>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	68db      	ldr	r3, [r3, #12]
 8003092:	2b01      	cmp	r3, #1
 8003094:	d001      	beq.n	800309a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	e1c7      	b.n	800342a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800309a:	4b3b      	ldr	r3, [pc, #236]	; (8003188 <HAL_RCC_OscConfig+0x240>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	691b      	ldr	r3, [r3, #16]
 80030a6:	00db      	lsls	r3, r3, #3
 80030a8:	4937      	ldr	r1, [pc, #220]	; (8003188 <HAL_RCC_OscConfig+0x240>)
 80030aa:	4313      	orrs	r3, r2
 80030ac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030ae:	e03a      	b.n	8003126 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	68db      	ldr	r3, [r3, #12]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d020      	beq.n	80030fa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030b8:	4b34      	ldr	r3, [pc, #208]	; (800318c <HAL_RCC_OscConfig+0x244>)
 80030ba:	2201      	movs	r2, #1
 80030bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030be:	f7fe ffa3 	bl	8002008 <HAL_GetTick>
 80030c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030c4:	e008      	b.n	80030d8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030c6:	f7fe ff9f 	bl	8002008 <HAL_GetTick>
 80030ca:	4602      	mov	r2, r0
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	1ad3      	subs	r3, r2, r3
 80030d0:	2b02      	cmp	r3, #2
 80030d2:	d901      	bls.n	80030d8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80030d4:	2303      	movs	r3, #3
 80030d6:	e1a8      	b.n	800342a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030d8:	4b2b      	ldr	r3, [pc, #172]	; (8003188 <HAL_RCC_OscConfig+0x240>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f003 0302 	and.w	r3, r3, #2
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d0f0      	beq.n	80030c6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030e4:	4b28      	ldr	r3, [pc, #160]	; (8003188 <HAL_RCC_OscConfig+0x240>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	691b      	ldr	r3, [r3, #16]
 80030f0:	00db      	lsls	r3, r3, #3
 80030f2:	4925      	ldr	r1, [pc, #148]	; (8003188 <HAL_RCC_OscConfig+0x240>)
 80030f4:	4313      	orrs	r3, r2
 80030f6:	600b      	str	r3, [r1, #0]
 80030f8:	e015      	b.n	8003126 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030fa:	4b24      	ldr	r3, [pc, #144]	; (800318c <HAL_RCC_OscConfig+0x244>)
 80030fc:	2200      	movs	r2, #0
 80030fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003100:	f7fe ff82 	bl	8002008 <HAL_GetTick>
 8003104:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003106:	e008      	b.n	800311a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003108:	f7fe ff7e 	bl	8002008 <HAL_GetTick>
 800310c:	4602      	mov	r2, r0
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	1ad3      	subs	r3, r2, r3
 8003112:	2b02      	cmp	r3, #2
 8003114:	d901      	bls.n	800311a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003116:	2303      	movs	r3, #3
 8003118:	e187      	b.n	800342a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800311a:	4b1b      	ldr	r3, [pc, #108]	; (8003188 <HAL_RCC_OscConfig+0x240>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 0302 	and.w	r3, r3, #2
 8003122:	2b00      	cmp	r3, #0
 8003124:	d1f0      	bne.n	8003108 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f003 0308 	and.w	r3, r3, #8
 800312e:	2b00      	cmp	r3, #0
 8003130:	d036      	beq.n	80031a0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	695b      	ldr	r3, [r3, #20]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d016      	beq.n	8003168 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800313a:	4b15      	ldr	r3, [pc, #84]	; (8003190 <HAL_RCC_OscConfig+0x248>)
 800313c:	2201      	movs	r2, #1
 800313e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003140:	f7fe ff62 	bl	8002008 <HAL_GetTick>
 8003144:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003146:	e008      	b.n	800315a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003148:	f7fe ff5e 	bl	8002008 <HAL_GetTick>
 800314c:	4602      	mov	r2, r0
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	1ad3      	subs	r3, r2, r3
 8003152:	2b02      	cmp	r3, #2
 8003154:	d901      	bls.n	800315a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003156:	2303      	movs	r3, #3
 8003158:	e167      	b.n	800342a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800315a:	4b0b      	ldr	r3, [pc, #44]	; (8003188 <HAL_RCC_OscConfig+0x240>)
 800315c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800315e:	f003 0302 	and.w	r3, r3, #2
 8003162:	2b00      	cmp	r3, #0
 8003164:	d0f0      	beq.n	8003148 <HAL_RCC_OscConfig+0x200>
 8003166:	e01b      	b.n	80031a0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003168:	4b09      	ldr	r3, [pc, #36]	; (8003190 <HAL_RCC_OscConfig+0x248>)
 800316a:	2200      	movs	r2, #0
 800316c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800316e:	f7fe ff4b 	bl	8002008 <HAL_GetTick>
 8003172:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003174:	e00e      	b.n	8003194 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003176:	f7fe ff47 	bl	8002008 <HAL_GetTick>
 800317a:	4602      	mov	r2, r0
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	1ad3      	subs	r3, r2, r3
 8003180:	2b02      	cmp	r3, #2
 8003182:	d907      	bls.n	8003194 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003184:	2303      	movs	r3, #3
 8003186:	e150      	b.n	800342a <HAL_RCC_OscConfig+0x4e2>
 8003188:	40023800 	.word	0x40023800
 800318c:	42470000 	.word	0x42470000
 8003190:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003194:	4b88      	ldr	r3, [pc, #544]	; (80033b8 <HAL_RCC_OscConfig+0x470>)
 8003196:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003198:	f003 0302 	and.w	r3, r3, #2
 800319c:	2b00      	cmp	r3, #0
 800319e:	d1ea      	bne.n	8003176 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f003 0304 	and.w	r3, r3, #4
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	f000 8097 	beq.w	80032dc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031ae:	2300      	movs	r3, #0
 80031b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031b2:	4b81      	ldr	r3, [pc, #516]	; (80033b8 <HAL_RCC_OscConfig+0x470>)
 80031b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d10f      	bne.n	80031de <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031be:	2300      	movs	r3, #0
 80031c0:	60bb      	str	r3, [r7, #8]
 80031c2:	4b7d      	ldr	r3, [pc, #500]	; (80033b8 <HAL_RCC_OscConfig+0x470>)
 80031c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c6:	4a7c      	ldr	r2, [pc, #496]	; (80033b8 <HAL_RCC_OscConfig+0x470>)
 80031c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031cc:	6413      	str	r3, [r2, #64]	; 0x40
 80031ce:	4b7a      	ldr	r3, [pc, #488]	; (80033b8 <HAL_RCC_OscConfig+0x470>)
 80031d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031d6:	60bb      	str	r3, [r7, #8]
 80031d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031da:	2301      	movs	r3, #1
 80031dc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031de:	4b77      	ldr	r3, [pc, #476]	; (80033bc <HAL_RCC_OscConfig+0x474>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d118      	bne.n	800321c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031ea:	4b74      	ldr	r3, [pc, #464]	; (80033bc <HAL_RCC_OscConfig+0x474>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a73      	ldr	r2, [pc, #460]	; (80033bc <HAL_RCC_OscConfig+0x474>)
 80031f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031f6:	f7fe ff07 	bl	8002008 <HAL_GetTick>
 80031fa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031fc:	e008      	b.n	8003210 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031fe:	f7fe ff03 	bl	8002008 <HAL_GetTick>
 8003202:	4602      	mov	r2, r0
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	1ad3      	subs	r3, r2, r3
 8003208:	2b02      	cmp	r3, #2
 800320a:	d901      	bls.n	8003210 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800320c:	2303      	movs	r3, #3
 800320e:	e10c      	b.n	800342a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003210:	4b6a      	ldr	r3, [pc, #424]	; (80033bc <HAL_RCC_OscConfig+0x474>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003218:	2b00      	cmp	r3, #0
 800321a:	d0f0      	beq.n	80031fe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	2b01      	cmp	r3, #1
 8003222:	d106      	bne.n	8003232 <HAL_RCC_OscConfig+0x2ea>
 8003224:	4b64      	ldr	r3, [pc, #400]	; (80033b8 <HAL_RCC_OscConfig+0x470>)
 8003226:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003228:	4a63      	ldr	r2, [pc, #396]	; (80033b8 <HAL_RCC_OscConfig+0x470>)
 800322a:	f043 0301 	orr.w	r3, r3, #1
 800322e:	6713      	str	r3, [r2, #112]	; 0x70
 8003230:	e01c      	b.n	800326c <HAL_RCC_OscConfig+0x324>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	2b05      	cmp	r3, #5
 8003238:	d10c      	bne.n	8003254 <HAL_RCC_OscConfig+0x30c>
 800323a:	4b5f      	ldr	r3, [pc, #380]	; (80033b8 <HAL_RCC_OscConfig+0x470>)
 800323c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800323e:	4a5e      	ldr	r2, [pc, #376]	; (80033b8 <HAL_RCC_OscConfig+0x470>)
 8003240:	f043 0304 	orr.w	r3, r3, #4
 8003244:	6713      	str	r3, [r2, #112]	; 0x70
 8003246:	4b5c      	ldr	r3, [pc, #368]	; (80033b8 <HAL_RCC_OscConfig+0x470>)
 8003248:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800324a:	4a5b      	ldr	r2, [pc, #364]	; (80033b8 <HAL_RCC_OscConfig+0x470>)
 800324c:	f043 0301 	orr.w	r3, r3, #1
 8003250:	6713      	str	r3, [r2, #112]	; 0x70
 8003252:	e00b      	b.n	800326c <HAL_RCC_OscConfig+0x324>
 8003254:	4b58      	ldr	r3, [pc, #352]	; (80033b8 <HAL_RCC_OscConfig+0x470>)
 8003256:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003258:	4a57      	ldr	r2, [pc, #348]	; (80033b8 <HAL_RCC_OscConfig+0x470>)
 800325a:	f023 0301 	bic.w	r3, r3, #1
 800325e:	6713      	str	r3, [r2, #112]	; 0x70
 8003260:	4b55      	ldr	r3, [pc, #340]	; (80033b8 <HAL_RCC_OscConfig+0x470>)
 8003262:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003264:	4a54      	ldr	r2, [pc, #336]	; (80033b8 <HAL_RCC_OscConfig+0x470>)
 8003266:	f023 0304 	bic.w	r3, r3, #4
 800326a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d015      	beq.n	80032a0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003274:	f7fe fec8 	bl	8002008 <HAL_GetTick>
 8003278:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800327a:	e00a      	b.n	8003292 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800327c:	f7fe fec4 	bl	8002008 <HAL_GetTick>
 8003280:	4602      	mov	r2, r0
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	1ad3      	subs	r3, r2, r3
 8003286:	f241 3288 	movw	r2, #5000	; 0x1388
 800328a:	4293      	cmp	r3, r2
 800328c:	d901      	bls.n	8003292 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800328e:	2303      	movs	r3, #3
 8003290:	e0cb      	b.n	800342a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003292:	4b49      	ldr	r3, [pc, #292]	; (80033b8 <HAL_RCC_OscConfig+0x470>)
 8003294:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003296:	f003 0302 	and.w	r3, r3, #2
 800329a:	2b00      	cmp	r3, #0
 800329c:	d0ee      	beq.n	800327c <HAL_RCC_OscConfig+0x334>
 800329e:	e014      	b.n	80032ca <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032a0:	f7fe feb2 	bl	8002008 <HAL_GetTick>
 80032a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032a6:	e00a      	b.n	80032be <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032a8:	f7fe feae 	bl	8002008 <HAL_GetTick>
 80032ac:	4602      	mov	r2, r0
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	1ad3      	subs	r3, r2, r3
 80032b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d901      	bls.n	80032be <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80032ba:	2303      	movs	r3, #3
 80032bc:	e0b5      	b.n	800342a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032be:	4b3e      	ldr	r3, [pc, #248]	; (80033b8 <HAL_RCC_OscConfig+0x470>)
 80032c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032c2:	f003 0302 	and.w	r3, r3, #2
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d1ee      	bne.n	80032a8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80032ca:	7dfb      	ldrb	r3, [r7, #23]
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d105      	bne.n	80032dc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032d0:	4b39      	ldr	r3, [pc, #228]	; (80033b8 <HAL_RCC_OscConfig+0x470>)
 80032d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d4:	4a38      	ldr	r2, [pc, #224]	; (80033b8 <HAL_RCC_OscConfig+0x470>)
 80032d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032da:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	699b      	ldr	r3, [r3, #24]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	f000 80a1 	beq.w	8003428 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80032e6:	4b34      	ldr	r3, [pc, #208]	; (80033b8 <HAL_RCC_OscConfig+0x470>)
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	f003 030c 	and.w	r3, r3, #12
 80032ee:	2b08      	cmp	r3, #8
 80032f0:	d05c      	beq.n	80033ac <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	699b      	ldr	r3, [r3, #24]
 80032f6:	2b02      	cmp	r3, #2
 80032f8:	d141      	bne.n	800337e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032fa:	4b31      	ldr	r3, [pc, #196]	; (80033c0 <HAL_RCC_OscConfig+0x478>)
 80032fc:	2200      	movs	r2, #0
 80032fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003300:	f7fe fe82 	bl	8002008 <HAL_GetTick>
 8003304:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003306:	e008      	b.n	800331a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003308:	f7fe fe7e 	bl	8002008 <HAL_GetTick>
 800330c:	4602      	mov	r2, r0
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	1ad3      	subs	r3, r2, r3
 8003312:	2b02      	cmp	r3, #2
 8003314:	d901      	bls.n	800331a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003316:	2303      	movs	r3, #3
 8003318:	e087      	b.n	800342a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800331a:	4b27      	ldr	r3, [pc, #156]	; (80033b8 <HAL_RCC_OscConfig+0x470>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003322:	2b00      	cmp	r3, #0
 8003324:	d1f0      	bne.n	8003308 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	69da      	ldr	r2, [r3, #28]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6a1b      	ldr	r3, [r3, #32]
 800332e:	431a      	orrs	r2, r3
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003334:	019b      	lsls	r3, r3, #6
 8003336:	431a      	orrs	r2, r3
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800333c:	085b      	lsrs	r3, r3, #1
 800333e:	3b01      	subs	r3, #1
 8003340:	041b      	lsls	r3, r3, #16
 8003342:	431a      	orrs	r2, r3
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003348:	061b      	lsls	r3, r3, #24
 800334a:	491b      	ldr	r1, [pc, #108]	; (80033b8 <HAL_RCC_OscConfig+0x470>)
 800334c:	4313      	orrs	r3, r2
 800334e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003350:	4b1b      	ldr	r3, [pc, #108]	; (80033c0 <HAL_RCC_OscConfig+0x478>)
 8003352:	2201      	movs	r2, #1
 8003354:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003356:	f7fe fe57 	bl	8002008 <HAL_GetTick>
 800335a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800335c:	e008      	b.n	8003370 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800335e:	f7fe fe53 	bl	8002008 <HAL_GetTick>
 8003362:	4602      	mov	r2, r0
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	1ad3      	subs	r3, r2, r3
 8003368:	2b02      	cmp	r3, #2
 800336a:	d901      	bls.n	8003370 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800336c:	2303      	movs	r3, #3
 800336e:	e05c      	b.n	800342a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003370:	4b11      	ldr	r3, [pc, #68]	; (80033b8 <HAL_RCC_OscConfig+0x470>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003378:	2b00      	cmp	r3, #0
 800337a:	d0f0      	beq.n	800335e <HAL_RCC_OscConfig+0x416>
 800337c:	e054      	b.n	8003428 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800337e:	4b10      	ldr	r3, [pc, #64]	; (80033c0 <HAL_RCC_OscConfig+0x478>)
 8003380:	2200      	movs	r2, #0
 8003382:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003384:	f7fe fe40 	bl	8002008 <HAL_GetTick>
 8003388:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800338a:	e008      	b.n	800339e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800338c:	f7fe fe3c 	bl	8002008 <HAL_GetTick>
 8003390:	4602      	mov	r2, r0
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	1ad3      	subs	r3, r2, r3
 8003396:	2b02      	cmp	r3, #2
 8003398:	d901      	bls.n	800339e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800339a:	2303      	movs	r3, #3
 800339c:	e045      	b.n	800342a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800339e:	4b06      	ldr	r3, [pc, #24]	; (80033b8 <HAL_RCC_OscConfig+0x470>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d1f0      	bne.n	800338c <HAL_RCC_OscConfig+0x444>
 80033aa:	e03d      	b.n	8003428 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	699b      	ldr	r3, [r3, #24]
 80033b0:	2b01      	cmp	r3, #1
 80033b2:	d107      	bne.n	80033c4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	e038      	b.n	800342a <HAL_RCC_OscConfig+0x4e2>
 80033b8:	40023800 	.word	0x40023800
 80033bc:	40007000 	.word	0x40007000
 80033c0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80033c4:	4b1b      	ldr	r3, [pc, #108]	; (8003434 <HAL_RCC_OscConfig+0x4ec>)
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	699b      	ldr	r3, [r3, #24]
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	d028      	beq.n	8003424 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033dc:	429a      	cmp	r2, r3
 80033de:	d121      	bne.n	8003424 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033ea:	429a      	cmp	r2, r3
 80033ec:	d11a      	bne.n	8003424 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033ee:	68fa      	ldr	r2, [r7, #12]
 80033f0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80033f4:	4013      	ands	r3, r2
 80033f6:	687a      	ldr	r2, [r7, #4]
 80033f8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80033fa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d111      	bne.n	8003424 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800340a:	085b      	lsrs	r3, r3, #1
 800340c:	3b01      	subs	r3, #1
 800340e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003410:	429a      	cmp	r2, r3
 8003412:	d107      	bne.n	8003424 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800341e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003420:	429a      	cmp	r2, r3
 8003422:	d001      	beq.n	8003428 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	e000      	b.n	800342a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003428:	2300      	movs	r3, #0
}
 800342a:	4618      	mov	r0, r3
 800342c:	3718      	adds	r7, #24
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}
 8003432:	bf00      	nop
 8003434:	40023800 	.word	0x40023800

08003438 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b084      	sub	sp, #16
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
 8003440:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d101      	bne.n	800344c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003448:	2301      	movs	r3, #1
 800344a:	e0cc      	b.n	80035e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800344c:	4b68      	ldr	r3, [pc, #416]	; (80035f0 <HAL_RCC_ClockConfig+0x1b8>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f003 0307 	and.w	r3, r3, #7
 8003454:	683a      	ldr	r2, [r7, #0]
 8003456:	429a      	cmp	r2, r3
 8003458:	d90c      	bls.n	8003474 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800345a:	4b65      	ldr	r3, [pc, #404]	; (80035f0 <HAL_RCC_ClockConfig+0x1b8>)
 800345c:	683a      	ldr	r2, [r7, #0]
 800345e:	b2d2      	uxtb	r2, r2
 8003460:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003462:	4b63      	ldr	r3, [pc, #396]	; (80035f0 <HAL_RCC_ClockConfig+0x1b8>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 0307 	and.w	r3, r3, #7
 800346a:	683a      	ldr	r2, [r7, #0]
 800346c:	429a      	cmp	r2, r3
 800346e:	d001      	beq.n	8003474 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003470:	2301      	movs	r3, #1
 8003472:	e0b8      	b.n	80035e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f003 0302 	and.w	r3, r3, #2
 800347c:	2b00      	cmp	r3, #0
 800347e:	d020      	beq.n	80034c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f003 0304 	and.w	r3, r3, #4
 8003488:	2b00      	cmp	r3, #0
 800348a:	d005      	beq.n	8003498 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800348c:	4b59      	ldr	r3, [pc, #356]	; (80035f4 <HAL_RCC_ClockConfig+0x1bc>)
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	4a58      	ldr	r2, [pc, #352]	; (80035f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003492:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003496:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 0308 	and.w	r3, r3, #8
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d005      	beq.n	80034b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80034a4:	4b53      	ldr	r3, [pc, #332]	; (80035f4 <HAL_RCC_ClockConfig+0x1bc>)
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	4a52      	ldr	r2, [pc, #328]	; (80035f4 <HAL_RCC_ClockConfig+0x1bc>)
 80034aa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80034ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034b0:	4b50      	ldr	r3, [pc, #320]	; (80035f4 <HAL_RCC_ClockConfig+0x1bc>)
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	494d      	ldr	r1, [pc, #308]	; (80035f4 <HAL_RCC_ClockConfig+0x1bc>)
 80034be:	4313      	orrs	r3, r2
 80034c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f003 0301 	and.w	r3, r3, #1
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d044      	beq.n	8003558 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	2b01      	cmp	r3, #1
 80034d4:	d107      	bne.n	80034e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034d6:	4b47      	ldr	r3, [pc, #284]	; (80035f4 <HAL_RCC_ClockConfig+0x1bc>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d119      	bne.n	8003516 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e07f      	b.n	80035e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	2b02      	cmp	r3, #2
 80034ec:	d003      	beq.n	80034f6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034f2:	2b03      	cmp	r3, #3
 80034f4:	d107      	bne.n	8003506 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034f6:	4b3f      	ldr	r3, [pc, #252]	; (80035f4 <HAL_RCC_ClockConfig+0x1bc>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d109      	bne.n	8003516 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	e06f      	b.n	80035e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003506:	4b3b      	ldr	r3, [pc, #236]	; (80035f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f003 0302 	and.w	r3, r3, #2
 800350e:	2b00      	cmp	r3, #0
 8003510:	d101      	bne.n	8003516 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	e067      	b.n	80035e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003516:	4b37      	ldr	r3, [pc, #220]	; (80035f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	f023 0203 	bic.w	r2, r3, #3
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	4934      	ldr	r1, [pc, #208]	; (80035f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003524:	4313      	orrs	r3, r2
 8003526:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003528:	f7fe fd6e 	bl	8002008 <HAL_GetTick>
 800352c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800352e:	e00a      	b.n	8003546 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003530:	f7fe fd6a 	bl	8002008 <HAL_GetTick>
 8003534:	4602      	mov	r2, r0
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	1ad3      	subs	r3, r2, r3
 800353a:	f241 3288 	movw	r2, #5000	; 0x1388
 800353e:	4293      	cmp	r3, r2
 8003540:	d901      	bls.n	8003546 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003542:	2303      	movs	r3, #3
 8003544:	e04f      	b.n	80035e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003546:	4b2b      	ldr	r3, [pc, #172]	; (80035f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	f003 020c 	and.w	r2, r3, #12
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	009b      	lsls	r3, r3, #2
 8003554:	429a      	cmp	r2, r3
 8003556:	d1eb      	bne.n	8003530 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003558:	4b25      	ldr	r3, [pc, #148]	; (80035f0 <HAL_RCC_ClockConfig+0x1b8>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f003 0307 	and.w	r3, r3, #7
 8003560:	683a      	ldr	r2, [r7, #0]
 8003562:	429a      	cmp	r2, r3
 8003564:	d20c      	bcs.n	8003580 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003566:	4b22      	ldr	r3, [pc, #136]	; (80035f0 <HAL_RCC_ClockConfig+0x1b8>)
 8003568:	683a      	ldr	r2, [r7, #0]
 800356a:	b2d2      	uxtb	r2, r2
 800356c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800356e:	4b20      	ldr	r3, [pc, #128]	; (80035f0 <HAL_RCC_ClockConfig+0x1b8>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f003 0307 	and.w	r3, r3, #7
 8003576:	683a      	ldr	r2, [r7, #0]
 8003578:	429a      	cmp	r2, r3
 800357a:	d001      	beq.n	8003580 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800357c:	2301      	movs	r3, #1
 800357e:	e032      	b.n	80035e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f003 0304 	and.w	r3, r3, #4
 8003588:	2b00      	cmp	r3, #0
 800358a:	d008      	beq.n	800359e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800358c:	4b19      	ldr	r3, [pc, #100]	; (80035f4 <HAL_RCC_ClockConfig+0x1bc>)
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	68db      	ldr	r3, [r3, #12]
 8003598:	4916      	ldr	r1, [pc, #88]	; (80035f4 <HAL_RCC_ClockConfig+0x1bc>)
 800359a:	4313      	orrs	r3, r2
 800359c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f003 0308 	and.w	r3, r3, #8
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d009      	beq.n	80035be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80035aa:	4b12      	ldr	r3, [pc, #72]	; (80035f4 <HAL_RCC_ClockConfig+0x1bc>)
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	691b      	ldr	r3, [r3, #16]
 80035b6:	00db      	lsls	r3, r3, #3
 80035b8:	490e      	ldr	r1, [pc, #56]	; (80035f4 <HAL_RCC_ClockConfig+0x1bc>)
 80035ba:	4313      	orrs	r3, r2
 80035bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80035be:	f000 f821 	bl	8003604 <HAL_RCC_GetSysClockFreq>
 80035c2:	4602      	mov	r2, r0
 80035c4:	4b0b      	ldr	r3, [pc, #44]	; (80035f4 <HAL_RCC_ClockConfig+0x1bc>)
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	091b      	lsrs	r3, r3, #4
 80035ca:	f003 030f 	and.w	r3, r3, #15
 80035ce:	490a      	ldr	r1, [pc, #40]	; (80035f8 <HAL_RCC_ClockConfig+0x1c0>)
 80035d0:	5ccb      	ldrb	r3, [r1, r3]
 80035d2:	fa22 f303 	lsr.w	r3, r2, r3
 80035d6:	4a09      	ldr	r2, [pc, #36]	; (80035fc <HAL_RCC_ClockConfig+0x1c4>)
 80035d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80035da:	4b09      	ldr	r3, [pc, #36]	; (8003600 <HAL_RCC_ClockConfig+0x1c8>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4618      	mov	r0, r3
 80035e0:	f7fe fcce 	bl	8001f80 <HAL_InitTick>

  return HAL_OK;
 80035e4:	2300      	movs	r3, #0
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3710      	adds	r7, #16
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}
 80035ee:	bf00      	nop
 80035f0:	40023c00 	.word	0x40023c00
 80035f4:	40023800 	.word	0x40023800
 80035f8:	08008160 	.word	0x08008160
 80035fc:	20000000 	.word	0x20000000
 8003600:	20000004 	.word	0x20000004

08003604 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003604:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003608:	b094      	sub	sp, #80	; 0x50
 800360a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800360c:	2300      	movs	r3, #0
 800360e:	647b      	str	r3, [r7, #68]	; 0x44
 8003610:	2300      	movs	r3, #0
 8003612:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003614:	2300      	movs	r3, #0
 8003616:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003618:	2300      	movs	r3, #0
 800361a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800361c:	4b79      	ldr	r3, [pc, #484]	; (8003804 <HAL_RCC_GetSysClockFreq+0x200>)
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	f003 030c 	and.w	r3, r3, #12
 8003624:	2b08      	cmp	r3, #8
 8003626:	d00d      	beq.n	8003644 <HAL_RCC_GetSysClockFreq+0x40>
 8003628:	2b08      	cmp	r3, #8
 800362a:	f200 80e1 	bhi.w	80037f0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800362e:	2b00      	cmp	r3, #0
 8003630:	d002      	beq.n	8003638 <HAL_RCC_GetSysClockFreq+0x34>
 8003632:	2b04      	cmp	r3, #4
 8003634:	d003      	beq.n	800363e <HAL_RCC_GetSysClockFreq+0x3a>
 8003636:	e0db      	b.n	80037f0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003638:	4b73      	ldr	r3, [pc, #460]	; (8003808 <HAL_RCC_GetSysClockFreq+0x204>)
 800363a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800363c:	e0db      	b.n	80037f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800363e:	4b73      	ldr	r3, [pc, #460]	; (800380c <HAL_RCC_GetSysClockFreq+0x208>)
 8003640:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003642:	e0d8      	b.n	80037f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003644:	4b6f      	ldr	r3, [pc, #444]	; (8003804 <HAL_RCC_GetSysClockFreq+0x200>)
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800364c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800364e:	4b6d      	ldr	r3, [pc, #436]	; (8003804 <HAL_RCC_GetSysClockFreq+0x200>)
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003656:	2b00      	cmp	r3, #0
 8003658:	d063      	beq.n	8003722 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800365a:	4b6a      	ldr	r3, [pc, #424]	; (8003804 <HAL_RCC_GetSysClockFreq+0x200>)
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	099b      	lsrs	r3, r3, #6
 8003660:	2200      	movs	r2, #0
 8003662:	63bb      	str	r3, [r7, #56]	; 0x38
 8003664:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003668:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800366c:	633b      	str	r3, [r7, #48]	; 0x30
 800366e:	2300      	movs	r3, #0
 8003670:	637b      	str	r3, [r7, #52]	; 0x34
 8003672:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003676:	4622      	mov	r2, r4
 8003678:	462b      	mov	r3, r5
 800367a:	f04f 0000 	mov.w	r0, #0
 800367e:	f04f 0100 	mov.w	r1, #0
 8003682:	0159      	lsls	r1, r3, #5
 8003684:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003688:	0150      	lsls	r0, r2, #5
 800368a:	4602      	mov	r2, r0
 800368c:	460b      	mov	r3, r1
 800368e:	4621      	mov	r1, r4
 8003690:	1a51      	subs	r1, r2, r1
 8003692:	6139      	str	r1, [r7, #16]
 8003694:	4629      	mov	r1, r5
 8003696:	eb63 0301 	sbc.w	r3, r3, r1
 800369a:	617b      	str	r3, [r7, #20]
 800369c:	f04f 0200 	mov.w	r2, #0
 80036a0:	f04f 0300 	mov.w	r3, #0
 80036a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80036a8:	4659      	mov	r1, fp
 80036aa:	018b      	lsls	r3, r1, #6
 80036ac:	4651      	mov	r1, sl
 80036ae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80036b2:	4651      	mov	r1, sl
 80036b4:	018a      	lsls	r2, r1, #6
 80036b6:	4651      	mov	r1, sl
 80036b8:	ebb2 0801 	subs.w	r8, r2, r1
 80036bc:	4659      	mov	r1, fp
 80036be:	eb63 0901 	sbc.w	r9, r3, r1
 80036c2:	f04f 0200 	mov.w	r2, #0
 80036c6:	f04f 0300 	mov.w	r3, #0
 80036ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80036ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80036d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80036d6:	4690      	mov	r8, r2
 80036d8:	4699      	mov	r9, r3
 80036da:	4623      	mov	r3, r4
 80036dc:	eb18 0303 	adds.w	r3, r8, r3
 80036e0:	60bb      	str	r3, [r7, #8]
 80036e2:	462b      	mov	r3, r5
 80036e4:	eb49 0303 	adc.w	r3, r9, r3
 80036e8:	60fb      	str	r3, [r7, #12]
 80036ea:	f04f 0200 	mov.w	r2, #0
 80036ee:	f04f 0300 	mov.w	r3, #0
 80036f2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80036f6:	4629      	mov	r1, r5
 80036f8:	024b      	lsls	r3, r1, #9
 80036fa:	4621      	mov	r1, r4
 80036fc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003700:	4621      	mov	r1, r4
 8003702:	024a      	lsls	r2, r1, #9
 8003704:	4610      	mov	r0, r2
 8003706:	4619      	mov	r1, r3
 8003708:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800370a:	2200      	movs	r2, #0
 800370c:	62bb      	str	r3, [r7, #40]	; 0x28
 800370e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003710:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003714:	f7fd faa0 	bl	8000c58 <__aeabi_uldivmod>
 8003718:	4602      	mov	r2, r0
 800371a:	460b      	mov	r3, r1
 800371c:	4613      	mov	r3, r2
 800371e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003720:	e058      	b.n	80037d4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003722:	4b38      	ldr	r3, [pc, #224]	; (8003804 <HAL_RCC_GetSysClockFreq+0x200>)
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	099b      	lsrs	r3, r3, #6
 8003728:	2200      	movs	r2, #0
 800372a:	4618      	mov	r0, r3
 800372c:	4611      	mov	r1, r2
 800372e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003732:	623b      	str	r3, [r7, #32]
 8003734:	2300      	movs	r3, #0
 8003736:	627b      	str	r3, [r7, #36]	; 0x24
 8003738:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800373c:	4642      	mov	r2, r8
 800373e:	464b      	mov	r3, r9
 8003740:	f04f 0000 	mov.w	r0, #0
 8003744:	f04f 0100 	mov.w	r1, #0
 8003748:	0159      	lsls	r1, r3, #5
 800374a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800374e:	0150      	lsls	r0, r2, #5
 8003750:	4602      	mov	r2, r0
 8003752:	460b      	mov	r3, r1
 8003754:	4641      	mov	r1, r8
 8003756:	ebb2 0a01 	subs.w	sl, r2, r1
 800375a:	4649      	mov	r1, r9
 800375c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003760:	f04f 0200 	mov.w	r2, #0
 8003764:	f04f 0300 	mov.w	r3, #0
 8003768:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800376c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003770:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003774:	ebb2 040a 	subs.w	r4, r2, sl
 8003778:	eb63 050b 	sbc.w	r5, r3, fp
 800377c:	f04f 0200 	mov.w	r2, #0
 8003780:	f04f 0300 	mov.w	r3, #0
 8003784:	00eb      	lsls	r3, r5, #3
 8003786:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800378a:	00e2      	lsls	r2, r4, #3
 800378c:	4614      	mov	r4, r2
 800378e:	461d      	mov	r5, r3
 8003790:	4643      	mov	r3, r8
 8003792:	18e3      	adds	r3, r4, r3
 8003794:	603b      	str	r3, [r7, #0]
 8003796:	464b      	mov	r3, r9
 8003798:	eb45 0303 	adc.w	r3, r5, r3
 800379c:	607b      	str	r3, [r7, #4]
 800379e:	f04f 0200 	mov.w	r2, #0
 80037a2:	f04f 0300 	mov.w	r3, #0
 80037a6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80037aa:	4629      	mov	r1, r5
 80037ac:	028b      	lsls	r3, r1, #10
 80037ae:	4621      	mov	r1, r4
 80037b0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80037b4:	4621      	mov	r1, r4
 80037b6:	028a      	lsls	r2, r1, #10
 80037b8:	4610      	mov	r0, r2
 80037ba:	4619      	mov	r1, r3
 80037bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037be:	2200      	movs	r2, #0
 80037c0:	61bb      	str	r3, [r7, #24]
 80037c2:	61fa      	str	r2, [r7, #28]
 80037c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80037c8:	f7fd fa46 	bl	8000c58 <__aeabi_uldivmod>
 80037cc:	4602      	mov	r2, r0
 80037ce:	460b      	mov	r3, r1
 80037d0:	4613      	mov	r3, r2
 80037d2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80037d4:	4b0b      	ldr	r3, [pc, #44]	; (8003804 <HAL_RCC_GetSysClockFreq+0x200>)
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	0c1b      	lsrs	r3, r3, #16
 80037da:	f003 0303 	and.w	r3, r3, #3
 80037de:	3301      	adds	r3, #1
 80037e0:	005b      	lsls	r3, r3, #1
 80037e2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80037e4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80037e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80037ec:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80037ee:	e002      	b.n	80037f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80037f0:	4b05      	ldr	r3, [pc, #20]	; (8003808 <HAL_RCC_GetSysClockFreq+0x204>)
 80037f2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80037f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	3750      	adds	r7, #80	; 0x50
 80037fc:	46bd      	mov	sp, r7
 80037fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003802:	bf00      	nop
 8003804:	40023800 	.word	0x40023800
 8003808:	00f42400 	.word	0x00f42400
 800380c:	007a1200 	.word	0x007a1200

08003810 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003810:	b480      	push	{r7}
 8003812:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003814:	4b03      	ldr	r3, [pc, #12]	; (8003824 <HAL_RCC_GetHCLKFreq+0x14>)
 8003816:	681b      	ldr	r3, [r3, #0]
}
 8003818:	4618      	mov	r0, r3
 800381a:	46bd      	mov	sp, r7
 800381c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003820:	4770      	bx	lr
 8003822:	bf00      	nop
 8003824:	20000000 	.word	0x20000000

08003828 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800382c:	f7ff fff0 	bl	8003810 <HAL_RCC_GetHCLKFreq>
 8003830:	4602      	mov	r2, r0
 8003832:	4b05      	ldr	r3, [pc, #20]	; (8003848 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	0a9b      	lsrs	r3, r3, #10
 8003838:	f003 0307 	and.w	r3, r3, #7
 800383c:	4903      	ldr	r1, [pc, #12]	; (800384c <HAL_RCC_GetPCLK1Freq+0x24>)
 800383e:	5ccb      	ldrb	r3, [r1, r3]
 8003840:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003844:	4618      	mov	r0, r3
 8003846:	bd80      	pop	{r7, pc}
 8003848:	40023800 	.word	0x40023800
 800384c:	08008170 	.word	0x08008170

08003850 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003854:	f7ff ffdc 	bl	8003810 <HAL_RCC_GetHCLKFreq>
 8003858:	4602      	mov	r2, r0
 800385a:	4b05      	ldr	r3, [pc, #20]	; (8003870 <HAL_RCC_GetPCLK2Freq+0x20>)
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	0b5b      	lsrs	r3, r3, #13
 8003860:	f003 0307 	and.w	r3, r3, #7
 8003864:	4903      	ldr	r1, [pc, #12]	; (8003874 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003866:	5ccb      	ldrb	r3, [r1, r3]
 8003868:	fa22 f303 	lsr.w	r3, r2, r3
}
 800386c:	4618      	mov	r0, r3
 800386e:	bd80      	pop	{r7, pc}
 8003870:	40023800 	.word	0x40023800
 8003874:	08008170 	.word	0x08008170

08003878 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b082      	sub	sp, #8
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d101      	bne.n	800388a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	e041      	b.n	800390e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003890:	b2db      	uxtb	r3, r3
 8003892:	2b00      	cmp	r3, #0
 8003894:	d106      	bne.n	80038a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2200      	movs	r2, #0
 800389a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f7fe f848 	bl	8001934 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2202      	movs	r2, #2
 80038a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	3304      	adds	r3, #4
 80038b4:	4619      	mov	r1, r3
 80038b6:	4610      	mov	r0, r2
 80038b8:	f000 f8f4 	bl	8003aa4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2201      	movs	r2, #1
 80038c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2201      	movs	r2, #1
 80038c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2201      	movs	r2, #1
 80038d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2201      	movs	r2, #1
 80038d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2201      	movs	r2, #1
 80038e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2201      	movs	r2, #1
 80038e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2201      	movs	r2, #1
 80038f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2201      	movs	r2, #1
 80038f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2201      	movs	r2, #1
 8003900:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2201      	movs	r2, #1
 8003908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800390c:	2300      	movs	r3, #0
}
 800390e:	4618      	mov	r0, r3
 8003910:	3708      	adds	r7, #8
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}

08003916 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003916:	b580      	push	{r7, lr}
 8003918:	b084      	sub	sp, #16
 800391a:	af00      	add	r7, sp, #0
 800391c:	6078      	str	r0, [r7, #4]
 800391e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003920:	2300      	movs	r3, #0
 8003922:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800392a:	2b01      	cmp	r3, #1
 800392c:	d101      	bne.n	8003932 <HAL_TIM_ConfigClockSource+0x1c>
 800392e:	2302      	movs	r3, #2
 8003930:	e0b4      	b.n	8003a9c <HAL_TIM_ConfigClockSource+0x186>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2201      	movs	r2, #1
 8003936:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2202      	movs	r2, #2
 800393e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003950:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003958:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	68ba      	ldr	r2, [r7, #8]
 8003960:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800396a:	d03e      	beq.n	80039ea <HAL_TIM_ConfigClockSource+0xd4>
 800396c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003970:	f200 8087 	bhi.w	8003a82 <HAL_TIM_ConfigClockSource+0x16c>
 8003974:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003978:	f000 8086 	beq.w	8003a88 <HAL_TIM_ConfigClockSource+0x172>
 800397c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003980:	d87f      	bhi.n	8003a82 <HAL_TIM_ConfigClockSource+0x16c>
 8003982:	2b70      	cmp	r3, #112	; 0x70
 8003984:	d01a      	beq.n	80039bc <HAL_TIM_ConfigClockSource+0xa6>
 8003986:	2b70      	cmp	r3, #112	; 0x70
 8003988:	d87b      	bhi.n	8003a82 <HAL_TIM_ConfigClockSource+0x16c>
 800398a:	2b60      	cmp	r3, #96	; 0x60
 800398c:	d050      	beq.n	8003a30 <HAL_TIM_ConfigClockSource+0x11a>
 800398e:	2b60      	cmp	r3, #96	; 0x60
 8003990:	d877      	bhi.n	8003a82 <HAL_TIM_ConfigClockSource+0x16c>
 8003992:	2b50      	cmp	r3, #80	; 0x50
 8003994:	d03c      	beq.n	8003a10 <HAL_TIM_ConfigClockSource+0xfa>
 8003996:	2b50      	cmp	r3, #80	; 0x50
 8003998:	d873      	bhi.n	8003a82 <HAL_TIM_ConfigClockSource+0x16c>
 800399a:	2b40      	cmp	r3, #64	; 0x40
 800399c:	d058      	beq.n	8003a50 <HAL_TIM_ConfigClockSource+0x13a>
 800399e:	2b40      	cmp	r3, #64	; 0x40
 80039a0:	d86f      	bhi.n	8003a82 <HAL_TIM_ConfigClockSource+0x16c>
 80039a2:	2b30      	cmp	r3, #48	; 0x30
 80039a4:	d064      	beq.n	8003a70 <HAL_TIM_ConfigClockSource+0x15a>
 80039a6:	2b30      	cmp	r3, #48	; 0x30
 80039a8:	d86b      	bhi.n	8003a82 <HAL_TIM_ConfigClockSource+0x16c>
 80039aa:	2b20      	cmp	r3, #32
 80039ac:	d060      	beq.n	8003a70 <HAL_TIM_ConfigClockSource+0x15a>
 80039ae:	2b20      	cmp	r3, #32
 80039b0:	d867      	bhi.n	8003a82 <HAL_TIM_ConfigClockSource+0x16c>
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d05c      	beq.n	8003a70 <HAL_TIM_ConfigClockSource+0x15a>
 80039b6:	2b10      	cmp	r3, #16
 80039b8:	d05a      	beq.n	8003a70 <HAL_TIM_ConfigClockSource+0x15a>
 80039ba:	e062      	b.n	8003a82 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6818      	ldr	r0, [r3, #0]
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	6899      	ldr	r1, [r3, #8]
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	685a      	ldr	r2, [r3, #4]
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	68db      	ldr	r3, [r3, #12]
 80039cc:	f000 f964 	bl	8003c98 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80039de:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	68ba      	ldr	r2, [r7, #8]
 80039e6:	609a      	str	r2, [r3, #8]
      break;
 80039e8:	e04f      	b.n	8003a8a <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6818      	ldr	r0, [r3, #0]
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	6899      	ldr	r1, [r3, #8]
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	685a      	ldr	r2, [r3, #4]
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	68db      	ldr	r3, [r3, #12]
 80039fa:	f000 f94d 	bl	8003c98 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	689a      	ldr	r2, [r3, #8]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a0c:	609a      	str	r2, [r3, #8]
      break;
 8003a0e:	e03c      	b.n	8003a8a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6818      	ldr	r0, [r3, #0]
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	6859      	ldr	r1, [r3, #4]
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	68db      	ldr	r3, [r3, #12]
 8003a1c:	461a      	mov	r2, r3
 8003a1e:	f000 f8c1 	bl	8003ba4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	2150      	movs	r1, #80	; 0x50
 8003a28:	4618      	mov	r0, r3
 8003a2a:	f000 f91a 	bl	8003c62 <TIM_ITRx_SetConfig>
      break;
 8003a2e:	e02c      	b.n	8003a8a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6818      	ldr	r0, [r3, #0]
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	6859      	ldr	r1, [r3, #4]
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	68db      	ldr	r3, [r3, #12]
 8003a3c:	461a      	mov	r2, r3
 8003a3e:	f000 f8e0 	bl	8003c02 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	2160      	movs	r1, #96	; 0x60
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f000 f90a 	bl	8003c62 <TIM_ITRx_SetConfig>
      break;
 8003a4e:	e01c      	b.n	8003a8a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6818      	ldr	r0, [r3, #0]
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	6859      	ldr	r1, [r3, #4]
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	68db      	ldr	r3, [r3, #12]
 8003a5c:	461a      	mov	r2, r3
 8003a5e:	f000 f8a1 	bl	8003ba4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	2140      	movs	r1, #64	; 0x40
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f000 f8fa 	bl	8003c62 <TIM_ITRx_SetConfig>
      break;
 8003a6e:	e00c      	b.n	8003a8a <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681a      	ldr	r2, [r3, #0]
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4619      	mov	r1, r3
 8003a7a:	4610      	mov	r0, r2
 8003a7c:	f000 f8f1 	bl	8003c62 <TIM_ITRx_SetConfig>
      break;
 8003a80:	e003      	b.n	8003a8a <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	73fb      	strb	r3, [r7, #15]
      break;
 8003a86:	e000      	b.n	8003a8a <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003a88:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2200      	movs	r2, #0
 8003a96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003a9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	3710      	adds	r7, #16
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}

08003aa4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b085      	sub	sp, #20
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
 8003aac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	4a34      	ldr	r2, [pc, #208]	; (8003b88 <TIM_Base_SetConfig+0xe4>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d00f      	beq.n	8003adc <TIM_Base_SetConfig+0x38>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ac2:	d00b      	beq.n	8003adc <TIM_Base_SetConfig+0x38>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	4a31      	ldr	r2, [pc, #196]	; (8003b8c <TIM_Base_SetConfig+0xe8>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d007      	beq.n	8003adc <TIM_Base_SetConfig+0x38>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	4a30      	ldr	r2, [pc, #192]	; (8003b90 <TIM_Base_SetConfig+0xec>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d003      	beq.n	8003adc <TIM_Base_SetConfig+0x38>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	4a2f      	ldr	r2, [pc, #188]	; (8003b94 <TIM_Base_SetConfig+0xf0>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d108      	bne.n	8003aee <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ae2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	68fa      	ldr	r2, [r7, #12]
 8003aea:	4313      	orrs	r3, r2
 8003aec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	4a25      	ldr	r2, [pc, #148]	; (8003b88 <TIM_Base_SetConfig+0xe4>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d01b      	beq.n	8003b2e <TIM_Base_SetConfig+0x8a>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003afc:	d017      	beq.n	8003b2e <TIM_Base_SetConfig+0x8a>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	4a22      	ldr	r2, [pc, #136]	; (8003b8c <TIM_Base_SetConfig+0xe8>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d013      	beq.n	8003b2e <TIM_Base_SetConfig+0x8a>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	4a21      	ldr	r2, [pc, #132]	; (8003b90 <TIM_Base_SetConfig+0xec>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d00f      	beq.n	8003b2e <TIM_Base_SetConfig+0x8a>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	4a20      	ldr	r2, [pc, #128]	; (8003b94 <TIM_Base_SetConfig+0xf0>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d00b      	beq.n	8003b2e <TIM_Base_SetConfig+0x8a>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	4a1f      	ldr	r2, [pc, #124]	; (8003b98 <TIM_Base_SetConfig+0xf4>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d007      	beq.n	8003b2e <TIM_Base_SetConfig+0x8a>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	4a1e      	ldr	r2, [pc, #120]	; (8003b9c <TIM_Base_SetConfig+0xf8>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d003      	beq.n	8003b2e <TIM_Base_SetConfig+0x8a>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	4a1d      	ldr	r2, [pc, #116]	; (8003ba0 <TIM_Base_SetConfig+0xfc>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d108      	bne.n	8003b40 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	68db      	ldr	r3, [r3, #12]
 8003b3a:	68fa      	ldr	r2, [r7, #12]
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	695b      	ldr	r3, [r3, #20]
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	68fa      	ldr	r2, [r7, #12]
 8003b52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	689a      	ldr	r2, [r3, #8]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	681a      	ldr	r2, [r3, #0]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	4a08      	ldr	r2, [pc, #32]	; (8003b88 <TIM_Base_SetConfig+0xe4>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d103      	bne.n	8003b74 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	691a      	ldr	r2, [r3, #16]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2201      	movs	r2, #1
 8003b78:	615a      	str	r2, [r3, #20]
}
 8003b7a:	bf00      	nop
 8003b7c:	3714      	adds	r7, #20
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b84:	4770      	bx	lr
 8003b86:	bf00      	nop
 8003b88:	40010000 	.word	0x40010000
 8003b8c:	40000400 	.word	0x40000400
 8003b90:	40000800 	.word	0x40000800
 8003b94:	40000c00 	.word	0x40000c00
 8003b98:	40014000 	.word	0x40014000
 8003b9c:	40014400 	.word	0x40014400
 8003ba0:	40014800 	.word	0x40014800

08003ba4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b087      	sub	sp, #28
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	60f8      	str	r0, [r7, #12]
 8003bac:	60b9      	str	r1, [r7, #8]
 8003bae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	6a1b      	ldr	r3, [r3, #32]
 8003bb4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	6a1b      	ldr	r3, [r3, #32]
 8003bba:	f023 0201 	bic.w	r2, r3, #1
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	699b      	ldr	r3, [r3, #24]
 8003bc6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003bce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	011b      	lsls	r3, r3, #4
 8003bd4:	693a      	ldr	r2, [r7, #16]
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	f023 030a 	bic.w	r3, r3, #10
 8003be0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003be2:	697a      	ldr	r2, [r7, #20]
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	4313      	orrs	r3, r2
 8003be8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	693a      	ldr	r2, [r7, #16]
 8003bee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	697a      	ldr	r2, [r7, #20]
 8003bf4:	621a      	str	r2, [r3, #32]
}
 8003bf6:	bf00      	nop
 8003bf8:	371c      	adds	r7, #28
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c00:	4770      	bx	lr

08003c02 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c02:	b480      	push	{r7}
 8003c04:	b087      	sub	sp, #28
 8003c06:	af00      	add	r7, sp, #0
 8003c08:	60f8      	str	r0, [r7, #12]
 8003c0a:	60b9      	str	r1, [r7, #8]
 8003c0c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	6a1b      	ldr	r3, [r3, #32]
 8003c12:	f023 0210 	bic.w	r2, r3, #16
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	699b      	ldr	r3, [r3, #24]
 8003c1e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	6a1b      	ldr	r3, [r3, #32]
 8003c24:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003c2c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	031b      	lsls	r3, r3, #12
 8003c32:	697a      	ldr	r2, [r7, #20]
 8003c34:	4313      	orrs	r3, r2
 8003c36:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003c3e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	011b      	lsls	r3, r3, #4
 8003c44:	693a      	ldr	r2, [r7, #16]
 8003c46:	4313      	orrs	r3, r2
 8003c48:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	697a      	ldr	r2, [r7, #20]
 8003c4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	693a      	ldr	r2, [r7, #16]
 8003c54:	621a      	str	r2, [r3, #32]
}
 8003c56:	bf00      	nop
 8003c58:	371c      	adds	r7, #28
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c60:	4770      	bx	lr

08003c62 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003c62:	b480      	push	{r7}
 8003c64:	b085      	sub	sp, #20
 8003c66:	af00      	add	r7, sp, #0
 8003c68:	6078      	str	r0, [r7, #4]
 8003c6a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c78:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003c7a:	683a      	ldr	r2, [r7, #0]
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	f043 0307 	orr.w	r3, r3, #7
 8003c84:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	68fa      	ldr	r2, [r7, #12]
 8003c8a:	609a      	str	r2, [r3, #8]
}
 8003c8c:	bf00      	nop
 8003c8e:	3714      	adds	r7, #20
 8003c90:	46bd      	mov	sp, r7
 8003c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c96:	4770      	bx	lr

08003c98 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b087      	sub	sp, #28
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	60f8      	str	r0, [r7, #12]
 8003ca0:	60b9      	str	r1, [r7, #8]
 8003ca2:	607a      	str	r2, [r7, #4]
 8003ca4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003cb2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	021a      	lsls	r2, r3, #8
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	431a      	orrs	r2, r3
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	697a      	ldr	r2, [r7, #20]
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	697a      	ldr	r2, [r7, #20]
 8003cca:	609a      	str	r2, [r3, #8]
}
 8003ccc:	bf00      	nop
 8003cce:	371c      	adds	r7, #28
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd6:	4770      	bx	lr

08003cd8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b085      	sub	sp, #20
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
 8003ce0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ce8:	2b01      	cmp	r3, #1
 8003cea:	d101      	bne.n	8003cf0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003cec:	2302      	movs	r3, #2
 8003cee:	e050      	b.n	8003d92 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2202      	movs	r2, #2
 8003cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d16:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	68fa      	ldr	r2, [r7, #12]
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	68fa      	ldr	r2, [r7, #12]
 8003d28:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a1c      	ldr	r2, [pc, #112]	; (8003da0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d018      	beq.n	8003d66 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d3c:	d013      	beq.n	8003d66 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a18      	ldr	r2, [pc, #96]	; (8003da4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d00e      	beq.n	8003d66 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a16      	ldr	r2, [pc, #88]	; (8003da8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d009      	beq.n	8003d66 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a15      	ldr	r2, [pc, #84]	; (8003dac <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d004      	beq.n	8003d66 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a13      	ldr	r2, [pc, #76]	; (8003db0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d10c      	bne.n	8003d80 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d6c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	68ba      	ldr	r2, [r7, #8]
 8003d74:	4313      	orrs	r3, r2
 8003d76:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	68ba      	ldr	r2, [r7, #8]
 8003d7e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2201      	movs	r2, #1
 8003d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d90:	2300      	movs	r3, #0
}
 8003d92:	4618      	mov	r0, r3
 8003d94:	3714      	adds	r7, #20
 8003d96:	46bd      	mov	sp, r7
 8003d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9c:	4770      	bx	lr
 8003d9e:	bf00      	nop
 8003da0:	40010000 	.word	0x40010000
 8003da4:	40000400 	.word	0x40000400
 8003da8:	40000800 	.word	0x40000800
 8003dac:	40000c00 	.word	0x40000c00
 8003db0:	40014000 	.word	0x40014000

08003db4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b082      	sub	sp, #8
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d101      	bne.n	8003dc6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e03f      	b.n	8003e46 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d106      	bne.n	8003de0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f7fd fdcc 	bl	8001978 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2224      	movs	r2, #36	; 0x24
 8003de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	68da      	ldr	r2, [r3, #12]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003df6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003df8:	6878      	ldr	r0, [r7, #4]
 8003dfa:	f000 fd7b 	bl	80048f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	691a      	ldr	r2, [r3, #16]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e0c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	695a      	ldr	r2, [r3, #20]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e1c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	68da      	ldr	r2, [r3, #12]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e2c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2200      	movs	r2, #0
 8003e32:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2220      	movs	r2, #32
 8003e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2220      	movs	r2, #32
 8003e40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003e44:	2300      	movs	r3, #0
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3708      	adds	r7, #8
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}

08003e4e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e4e:	b580      	push	{r7, lr}
 8003e50:	b08a      	sub	sp, #40	; 0x28
 8003e52:	af02      	add	r7, sp, #8
 8003e54:	60f8      	str	r0, [r7, #12]
 8003e56:	60b9      	str	r1, [r7, #8]
 8003e58:	603b      	str	r3, [r7, #0]
 8003e5a:	4613      	mov	r3, r2
 8003e5c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e68:	b2db      	uxtb	r3, r3
 8003e6a:	2b20      	cmp	r3, #32
 8003e6c:	d17c      	bne.n	8003f68 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d002      	beq.n	8003e7a <HAL_UART_Transmit+0x2c>
 8003e74:	88fb      	ldrh	r3, [r7, #6]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d101      	bne.n	8003e7e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e075      	b.n	8003f6a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d101      	bne.n	8003e8c <HAL_UART_Transmit+0x3e>
 8003e88:	2302      	movs	r3, #2
 8003e8a:	e06e      	b.n	8003f6a <HAL_UART_Transmit+0x11c>
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	2201      	movs	r2, #1
 8003e90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2200      	movs	r2, #0
 8003e98:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	2221      	movs	r2, #33	; 0x21
 8003e9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003ea2:	f7fe f8b1 	bl	8002008 <HAL_GetTick>
 8003ea6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	88fa      	ldrh	r2, [r7, #6]
 8003eac:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	88fa      	ldrh	r2, [r7, #6]
 8003eb2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ebc:	d108      	bne.n	8003ed0 <HAL_UART_Transmit+0x82>
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	691b      	ldr	r3, [r3, #16]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d104      	bne.n	8003ed0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	61bb      	str	r3, [r7, #24]
 8003ece:	e003      	b.n	8003ed8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2200      	movs	r2, #0
 8003edc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003ee0:	e02a      	b.n	8003f38 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	9300      	str	r3, [sp, #0]
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	2180      	movs	r1, #128	; 0x80
 8003eec:	68f8      	ldr	r0, [r7, #12]
 8003eee:	f000 faf9 	bl	80044e4 <UART_WaitOnFlagUntilTimeout>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d001      	beq.n	8003efc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003ef8:	2303      	movs	r3, #3
 8003efa:	e036      	b.n	8003f6a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003efc:	69fb      	ldr	r3, [r7, #28]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d10b      	bne.n	8003f1a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003f02:	69bb      	ldr	r3, [r7, #24]
 8003f04:	881b      	ldrh	r3, [r3, #0]
 8003f06:	461a      	mov	r2, r3
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f10:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003f12:	69bb      	ldr	r3, [r7, #24]
 8003f14:	3302      	adds	r3, #2
 8003f16:	61bb      	str	r3, [r7, #24]
 8003f18:	e007      	b.n	8003f2a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003f1a:	69fb      	ldr	r3, [r7, #28]
 8003f1c:	781a      	ldrb	r2, [r3, #0]
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003f24:	69fb      	ldr	r3, [r7, #28]
 8003f26:	3301      	adds	r3, #1
 8003f28:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003f2e:	b29b      	uxth	r3, r3
 8003f30:	3b01      	subs	r3, #1
 8003f32:	b29a      	uxth	r2, r3
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003f3c:	b29b      	uxth	r3, r3
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d1cf      	bne.n	8003ee2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	9300      	str	r3, [sp, #0]
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	2140      	movs	r1, #64	; 0x40
 8003f4c:	68f8      	ldr	r0, [r7, #12]
 8003f4e:	f000 fac9 	bl	80044e4 <UART_WaitOnFlagUntilTimeout>
 8003f52:	4603      	mov	r3, r0
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d001      	beq.n	8003f5c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003f58:	2303      	movs	r3, #3
 8003f5a:	e006      	b.n	8003f6a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2220      	movs	r2, #32
 8003f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003f64:	2300      	movs	r3, #0
 8003f66:	e000      	b.n	8003f6a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003f68:	2302      	movs	r3, #2
  }
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3720      	adds	r7, #32
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}
	...

08003f74 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b0ba      	sub	sp, #232	; 0xe8
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	68db      	ldr	r3, [r3, #12]
 8003f8c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	695b      	ldr	r3, [r3, #20]
 8003f96:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003fa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003faa:	f003 030f 	and.w	r3, r3, #15
 8003fae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003fb2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d10f      	bne.n	8003fda <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003fba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fbe:	f003 0320 	and.w	r3, r3, #32
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d009      	beq.n	8003fda <HAL_UART_IRQHandler+0x66>
 8003fc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fca:	f003 0320 	and.w	r3, r3, #32
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d003      	beq.n	8003fda <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f000 fbd3 	bl	800477e <UART_Receive_IT>
      return;
 8003fd8:	e256      	b.n	8004488 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003fda:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	f000 80de 	beq.w	80041a0 <HAL_UART_IRQHandler+0x22c>
 8003fe4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003fe8:	f003 0301 	and.w	r3, r3, #1
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d106      	bne.n	8003ffe <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003ff0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ff4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	f000 80d1 	beq.w	80041a0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003ffe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004002:	f003 0301 	and.w	r3, r3, #1
 8004006:	2b00      	cmp	r3, #0
 8004008:	d00b      	beq.n	8004022 <HAL_UART_IRQHandler+0xae>
 800400a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800400e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004012:	2b00      	cmp	r3, #0
 8004014:	d005      	beq.n	8004022 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800401a:	f043 0201 	orr.w	r2, r3, #1
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004022:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004026:	f003 0304 	and.w	r3, r3, #4
 800402a:	2b00      	cmp	r3, #0
 800402c:	d00b      	beq.n	8004046 <HAL_UART_IRQHandler+0xd2>
 800402e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004032:	f003 0301 	and.w	r3, r3, #1
 8004036:	2b00      	cmp	r3, #0
 8004038:	d005      	beq.n	8004046 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800403e:	f043 0202 	orr.w	r2, r3, #2
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004046:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800404a:	f003 0302 	and.w	r3, r3, #2
 800404e:	2b00      	cmp	r3, #0
 8004050:	d00b      	beq.n	800406a <HAL_UART_IRQHandler+0xf6>
 8004052:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004056:	f003 0301 	and.w	r3, r3, #1
 800405a:	2b00      	cmp	r3, #0
 800405c:	d005      	beq.n	800406a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004062:	f043 0204 	orr.w	r2, r3, #4
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800406a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800406e:	f003 0308 	and.w	r3, r3, #8
 8004072:	2b00      	cmp	r3, #0
 8004074:	d011      	beq.n	800409a <HAL_UART_IRQHandler+0x126>
 8004076:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800407a:	f003 0320 	and.w	r3, r3, #32
 800407e:	2b00      	cmp	r3, #0
 8004080:	d105      	bne.n	800408e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004082:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004086:	f003 0301 	and.w	r3, r3, #1
 800408a:	2b00      	cmp	r3, #0
 800408c:	d005      	beq.n	800409a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004092:	f043 0208 	orr.w	r2, r3, #8
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800409e:	2b00      	cmp	r3, #0
 80040a0:	f000 81ed 	beq.w	800447e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80040a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040a8:	f003 0320 	and.w	r3, r3, #32
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d008      	beq.n	80040c2 <HAL_UART_IRQHandler+0x14e>
 80040b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040b4:	f003 0320 	and.w	r3, r3, #32
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d002      	beq.n	80040c2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80040bc:	6878      	ldr	r0, [r7, #4]
 80040be:	f000 fb5e 	bl	800477e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	695b      	ldr	r3, [r3, #20]
 80040c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040cc:	2b40      	cmp	r3, #64	; 0x40
 80040ce:	bf0c      	ite	eq
 80040d0:	2301      	moveq	r3, #1
 80040d2:	2300      	movne	r3, #0
 80040d4:	b2db      	uxtb	r3, r3
 80040d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040de:	f003 0308 	and.w	r3, r3, #8
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d103      	bne.n	80040ee <HAL_UART_IRQHandler+0x17a>
 80040e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d04f      	beq.n	800418e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f000 fa66 	bl	80045c0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	695b      	ldr	r3, [r3, #20]
 80040fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040fe:	2b40      	cmp	r3, #64	; 0x40
 8004100:	d141      	bne.n	8004186 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	3314      	adds	r3, #20
 8004108:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800410c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004110:	e853 3f00 	ldrex	r3, [r3]
 8004114:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004118:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800411c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004120:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	3314      	adds	r3, #20
 800412a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800412e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004132:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004136:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800413a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800413e:	e841 2300 	strex	r3, r2, [r1]
 8004142:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004146:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800414a:	2b00      	cmp	r3, #0
 800414c:	d1d9      	bne.n	8004102 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004152:	2b00      	cmp	r3, #0
 8004154:	d013      	beq.n	800417e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800415a:	4a7d      	ldr	r2, [pc, #500]	; (8004350 <HAL_UART_IRQHandler+0x3dc>)
 800415c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004162:	4618      	mov	r0, r3
 8004164:	f7fe fcf3 	bl	8002b4e <HAL_DMA_Abort_IT>
 8004168:	4603      	mov	r3, r0
 800416a:	2b00      	cmp	r3, #0
 800416c:	d016      	beq.n	800419c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004172:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004174:	687a      	ldr	r2, [r7, #4]
 8004176:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004178:	4610      	mov	r0, r2
 800417a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800417c:	e00e      	b.n	800419c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	f000 f99a 	bl	80044b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004184:	e00a      	b.n	800419c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f000 f996 	bl	80044b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800418c:	e006      	b.n	800419c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800418e:	6878      	ldr	r0, [r7, #4]
 8004190:	f000 f992 	bl	80044b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2200      	movs	r2, #0
 8004198:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800419a:	e170      	b.n	800447e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800419c:	bf00      	nop
    return;
 800419e:	e16e      	b.n	800447e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	f040 814a 	bne.w	800443e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80041aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041ae:	f003 0310 	and.w	r3, r3, #16
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	f000 8143 	beq.w	800443e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80041b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041bc:	f003 0310 	and.w	r3, r3, #16
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	f000 813c 	beq.w	800443e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80041c6:	2300      	movs	r3, #0
 80041c8:	60bb      	str	r3, [r7, #8]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	60bb      	str	r3, [r7, #8]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	60bb      	str	r3, [r7, #8]
 80041da:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	695b      	ldr	r3, [r3, #20]
 80041e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041e6:	2b40      	cmp	r3, #64	; 0x40
 80041e8:	f040 80b4 	bne.w	8004354 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80041f8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	f000 8140 	beq.w	8004482 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004206:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800420a:	429a      	cmp	r2, r3
 800420c:	f080 8139 	bcs.w	8004482 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004216:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800421c:	69db      	ldr	r3, [r3, #28]
 800421e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004222:	f000 8088 	beq.w	8004336 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	330c      	adds	r3, #12
 800422c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004230:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004234:	e853 3f00 	ldrex	r3, [r3]
 8004238:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800423c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004240:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004244:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	330c      	adds	r3, #12
 800424e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004252:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004256:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800425a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800425e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004262:	e841 2300 	strex	r3, r2, [r1]
 8004266:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800426a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800426e:	2b00      	cmp	r3, #0
 8004270:	d1d9      	bne.n	8004226 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	3314      	adds	r3, #20
 8004278:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800427a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800427c:	e853 3f00 	ldrex	r3, [r3]
 8004280:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004282:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004284:	f023 0301 	bic.w	r3, r3, #1
 8004288:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	3314      	adds	r3, #20
 8004292:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004296:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800429a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800429c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800429e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80042a2:	e841 2300 	strex	r3, r2, [r1]
 80042a6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80042a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d1e1      	bne.n	8004272 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	3314      	adds	r3, #20
 80042b4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80042b8:	e853 3f00 	ldrex	r3, [r3]
 80042bc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80042be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80042c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	3314      	adds	r3, #20
 80042ce:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80042d2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80042d4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042d6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80042d8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80042da:	e841 2300 	strex	r3, r2, [r1]
 80042de:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80042e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d1e3      	bne.n	80042ae <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2220      	movs	r2, #32
 80042ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2200      	movs	r2, #0
 80042f2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	330c      	adds	r3, #12
 80042fa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042fe:	e853 3f00 	ldrex	r3, [r3]
 8004302:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004304:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004306:	f023 0310 	bic.w	r3, r3, #16
 800430a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	330c      	adds	r3, #12
 8004314:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004318:	65ba      	str	r2, [r7, #88]	; 0x58
 800431a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800431c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800431e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004320:	e841 2300 	strex	r3, r2, [r1]
 8004324:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004326:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004328:	2b00      	cmp	r3, #0
 800432a:	d1e3      	bne.n	80042f4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004330:	4618      	mov	r0, r3
 8004332:	f7fe fb9c 	bl	8002a6e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800433e:	b29b      	uxth	r3, r3
 8004340:	1ad3      	subs	r3, r2, r3
 8004342:	b29b      	uxth	r3, r3
 8004344:	4619      	mov	r1, r3
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f000 f8c0 	bl	80044cc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800434c:	e099      	b.n	8004482 <HAL_UART_IRQHandler+0x50e>
 800434e:	bf00      	nop
 8004350:	08004687 	.word	0x08004687
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800435c:	b29b      	uxth	r3, r3
 800435e:	1ad3      	subs	r3, r2, r3
 8004360:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004368:	b29b      	uxth	r3, r3
 800436a:	2b00      	cmp	r3, #0
 800436c:	f000 808b 	beq.w	8004486 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004370:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004374:	2b00      	cmp	r3, #0
 8004376:	f000 8086 	beq.w	8004486 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	330c      	adds	r3, #12
 8004380:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004384:	e853 3f00 	ldrex	r3, [r3]
 8004388:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800438a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800438c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004390:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	330c      	adds	r3, #12
 800439a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800439e:	647a      	str	r2, [r7, #68]	; 0x44
 80043a0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043a2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80043a4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80043a6:	e841 2300 	strex	r3, r2, [r1]
 80043aa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80043ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d1e3      	bne.n	800437a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	3314      	adds	r3, #20
 80043b8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043bc:	e853 3f00 	ldrex	r3, [r3]
 80043c0:	623b      	str	r3, [r7, #32]
   return(result);
 80043c2:	6a3b      	ldr	r3, [r7, #32]
 80043c4:	f023 0301 	bic.w	r3, r3, #1
 80043c8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	3314      	adds	r3, #20
 80043d2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80043d6:	633a      	str	r2, [r7, #48]	; 0x30
 80043d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80043dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043de:	e841 2300 	strex	r3, r2, [r1]
 80043e2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80043e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d1e3      	bne.n	80043b2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2220      	movs	r2, #32
 80043ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2200      	movs	r2, #0
 80043f6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	330c      	adds	r3, #12
 80043fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	e853 3f00 	ldrex	r3, [r3]
 8004406:	60fb      	str	r3, [r7, #12]
   return(result);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	f023 0310 	bic.w	r3, r3, #16
 800440e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	330c      	adds	r3, #12
 8004418:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800441c:	61fa      	str	r2, [r7, #28]
 800441e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004420:	69b9      	ldr	r1, [r7, #24]
 8004422:	69fa      	ldr	r2, [r7, #28]
 8004424:	e841 2300 	strex	r3, r2, [r1]
 8004428:	617b      	str	r3, [r7, #20]
   return(result);
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d1e3      	bne.n	80043f8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004430:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004434:	4619      	mov	r1, r3
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f000 f848 	bl	80044cc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800443c:	e023      	b.n	8004486 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800443e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004442:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004446:	2b00      	cmp	r3, #0
 8004448:	d009      	beq.n	800445e <HAL_UART_IRQHandler+0x4ea>
 800444a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800444e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004452:	2b00      	cmp	r3, #0
 8004454:	d003      	beq.n	800445e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f000 f929 	bl	80046ae <UART_Transmit_IT>
    return;
 800445c:	e014      	b.n	8004488 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800445e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004462:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004466:	2b00      	cmp	r3, #0
 8004468:	d00e      	beq.n	8004488 <HAL_UART_IRQHandler+0x514>
 800446a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800446e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004472:	2b00      	cmp	r3, #0
 8004474:	d008      	beq.n	8004488 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f000 f969 	bl	800474e <UART_EndTransmit_IT>
    return;
 800447c:	e004      	b.n	8004488 <HAL_UART_IRQHandler+0x514>
    return;
 800447e:	bf00      	nop
 8004480:	e002      	b.n	8004488 <HAL_UART_IRQHandler+0x514>
      return;
 8004482:	bf00      	nop
 8004484:	e000      	b.n	8004488 <HAL_UART_IRQHandler+0x514>
      return;
 8004486:	bf00      	nop
  }
}
 8004488:	37e8      	adds	r7, #232	; 0xe8
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}
 800448e:	bf00      	nop

08004490 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004490:	b480      	push	{r7}
 8004492:	b083      	sub	sp, #12
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004498:	bf00      	nop
 800449a:	370c      	adds	r7, #12
 800449c:	46bd      	mov	sp, r7
 800449e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a2:	4770      	bx	lr

080044a4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b083      	sub	sp, #12
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80044ac:	bf00      	nop
 80044ae:	370c      	adds	r7, #12
 80044b0:	46bd      	mov	sp, r7
 80044b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b6:	4770      	bx	lr

080044b8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80044b8:	b480      	push	{r7}
 80044ba:	b083      	sub	sp, #12
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80044c0:	bf00      	nop
 80044c2:	370c      	adds	r7, #12
 80044c4:	46bd      	mov	sp, r7
 80044c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ca:	4770      	bx	lr

080044cc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b083      	sub	sp, #12
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
 80044d4:	460b      	mov	r3, r1
 80044d6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80044d8:	bf00      	nop
 80044da:	370c      	adds	r7, #12
 80044dc:	46bd      	mov	sp, r7
 80044de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e2:	4770      	bx	lr

080044e4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b090      	sub	sp, #64	; 0x40
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	60f8      	str	r0, [r7, #12]
 80044ec:	60b9      	str	r1, [r7, #8]
 80044ee:	603b      	str	r3, [r7, #0]
 80044f0:	4613      	mov	r3, r2
 80044f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044f4:	e050      	b.n	8004598 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80044f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044fc:	d04c      	beq.n	8004598 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80044fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004500:	2b00      	cmp	r3, #0
 8004502:	d007      	beq.n	8004514 <UART_WaitOnFlagUntilTimeout+0x30>
 8004504:	f7fd fd80 	bl	8002008 <HAL_GetTick>
 8004508:	4602      	mov	r2, r0
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	1ad3      	subs	r3, r2, r3
 800450e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004510:	429a      	cmp	r2, r3
 8004512:	d241      	bcs.n	8004598 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	330c      	adds	r3, #12
 800451a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800451c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800451e:	e853 3f00 	ldrex	r3, [r3]
 8004522:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004526:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800452a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	330c      	adds	r3, #12
 8004532:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004534:	637a      	str	r2, [r7, #52]	; 0x34
 8004536:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004538:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800453a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800453c:	e841 2300 	strex	r3, r2, [r1]
 8004540:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004544:	2b00      	cmp	r3, #0
 8004546:	d1e5      	bne.n	8004514 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	3314      	adds	r3, #20
 800454e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	e853 3f00 	ldrex	r3, [r3]
 8004556:	613b      	str	r3, [r7, #16]
   return(result);
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	f023 0301 	bic.w	r3, r3, #1
 800455e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	3314      	adds	r3, #20
 8004566:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004568:	623a      	str	r2, [r7, #32]
 800456a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800456c:	69f9      	ldr	r1, [r7, #28]
 800456e:	6a3a      	ldr	r2, [r7, #32]
 8004570:	e841 2300 	strex	r3, r2, [r1]
 8004574:	61bb      	str	r3, [r7, #24]
   return(result);
 8004576:	69bb      	ldr	r3, [r7, #24]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d1e5      	bne.n	8004548 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	2220      	movs	r2, #32
 8004580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	2220      	movs	r2, #32
 8004588:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2200      	movs	r2, #0
 8004590:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004594:	2303      	movs	r3, #3
 8004596:	e00f      	b.n	80045b8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	681a      	ldr	r2, [r3, #0]
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	4013      	ands	r3, r2
 80045a2:	68ba      	ldr	r2, [r7, #8]
 80045a4:	429a      	cmp	r2, r3
 80045a6:	bf0c      	ite	eq
 80045a8:	2301      	moveq	r3, #1
 80045aa:	2300      	movne	r3, #0
 80045ac:	b2db      	uxtb	r3, r3
 80045ae:	461a      	mov	r2, r3
 80045b0:	79fb      	ldrb	r3, [r7, #7]
 80045b2:	429a      	cmp	r2, r3
 80045b4:	d09f      	beq.n	80044f6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80045b6:	2300      	movs	r3, #0
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	3740      	adds	r7, #64	; 0x40
 80045bc:	46bd      	mov	sp, r7
 80045be:	bd80      	pop	{r7, pc}

080045c0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b095      	sub	sp, #84	; 0x54
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	330c      	adds	r3, #12
 80045ce:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045d2:	e853 3f00 	ldrex	r3, [r3]
 80045d6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80045d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045da:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80045de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	330c      	adds	r3, #12
 80045e6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80045e8:	643a      	str	r2, [r7, #64]	; 0x40
 80045ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80045ee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80045f0:	e841 2300 	strex	r3, r2, [r1]
 80045f4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80045f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d1e5      	bne.n	80045c8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	3314      	adds	r3, #20
 8004602:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004604:	6a3b      	ldr	r3, [r7, #32]
 8004606:	e853 3f00 	ldrex	r3, [r3]
 800460a:	61fb      	str	r3, [r7, #28]
   return(result);
 800460c:	69fb      	ldr	r3, [r7, #28]
 800460e:	f023 0301 	bic.w	r3, r3, #1
 8004612:	64bb      	str	r3, [r7, #72]	; 0x48
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	3314      	adds	r3, #20
 800461a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800461c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800461e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004620:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004622:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004624:	e841 2300 	strex	r3, r2, [r1]
 8004628:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800462a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800462c:	2b00      	cmp	r3, #0
 800462e:	d1e5      	bne.n	80045fc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004634:	2b01      	cmp	r3, #1
 8004636:	d119      	bne.n	800466c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	330c      	adds	r3, #12
 800463e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	e853 3f00 	ldrex	r3, [r3]
 8004646:	60bb      	str	r3, [r7, #8]
   return(result);
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	f023 0310 	bic.w	r3, r3, #16
 800464e:	647b      	str	r3, [r7, #68]	; 0x44
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	330c      	adds	r3, #12
 8004656:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004658:	61ba      	str	r2, [r7, #24]
 800465a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800465c:	6979      	ldr	r1, [r7, #20]
 800465e:	69ba      	ldr	r2, [r7, #24]
 8004660:	e841 2300 	strex	r3, r2, [r1]
 8004664:	613b      	str	r3, [r7, #16]
   return(result);
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d1e5      	bne.n	8004638 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2220      	movs	r2, #32
 8004670:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2200      	movs	r2, #0
 8004678:	631a      	str	r2, [r3, #48]	; 0x30
}
 800467a:	bf00      	nop
 800467c:	3754      	adds	r7, #84	; 0x54
 800467e:	46bd      	mov	sp, r7
 8004680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004684:	4770      	bx	lr

08004686 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004686:	b580      	push	{r7, lr}
 8004688:	b084      	sub	sp, #16
 800468a:	af00      	add	r7, sp, #0
 800468c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004692:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2200      	movs	r2, #0
 8004698:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	2200      	movs	r2, #0
 800469e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80046a0:	68f8      	ldr	r0, [r7, #12]
 80046a2:	f7ff ff09 	bl	80044b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80046a6:	bf00      	nop
 80046a8:	3710      	adds	r7, #16
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}

080046ae <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80046ae:	b480      	push	{r7}
 80046b0:	b085      	sub	sp, #20
 80046b2:	af00      	add	r7, sp, #0
 80046b4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046bc:	b2db      	uxtb	r3, r3
 80046be:	2b21      	cmp	r3, #33	; 0x21
 80046c0:	d13e      	bne.n	8004740 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	689b      	ldr	r3, [r3, #8]
 80046c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046ca:	d114      	bne.n	80046f6 <UART_Transmit_IT+0x48>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	691b      	ldr	r3, [r3, #16]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d110      	bne.n	80046f6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6a1b      	ldr	r3, [r3, #32]
 80046d8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	881b      	ldrh	r3, [r3, #0]
 80046de:	461a      	mov	r2, r3
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80046e8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6a1b      	ldr	r3, [r3, #32]
 80046ee:	1c9a      	adds	r2, r3, #2
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	621a      	str	r2, [r3, #32]
 80046f4:	e008      	b.n	8004708 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6a1b      	ldr	r3, [r3, #32]
 80046fa:	1c59      	adds	r1, r3, #1
 80046fc:	687a      	ldr	r2, [r7, #4]
 80046fe:	6211      	str	r1, [r2, #32]
 8004700:	781a      	ldrb	r2, [r3, #0]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800470c:	b29b      	uxth	r3, r3
 800470e:	3b01      	subs	r3, #1
 8004710:	b29b      	uxth	r3, r3
 8004712:	687a      	ldr	r2, [r7, #4]
 8004714:	4619      	mov	r1, r3
 8004716:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004718:	2b00      	cmp	r3, #0
 800471a:	d10f      	bne.n	800473c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	68da      	ldr	r2, [r3, #12]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800472a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	68da      	ldr	r2, [r3, #12]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800473a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800473c:	2300      	movs	r3, #0
 800473e:	e000      	b.n	8004742 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004740:	2302      	movs	r3, #2
  }
}
 8004742:	4618      	mov	r0, r3
 8004744:	3714      	adds	r7, #20
 8004746:	46bd      	mov	sp, r7
 8004748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474c:	4770      	bx	lr

0800474e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800474e:	b580      	push	{r7, lr}
 8004750:	b082      	sub	sp, #8
 8004752:	af00      	add	r7, sp, #0
 8004754:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	68da      	ldr	r2, [r3, #12]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004764:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2220      	movs	r2, #32
 800476a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f7ff fe8e 	bl	8004490 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004774:	2300      	movs	r3, #0
}
 8004776:	4618      	mov	r0, r3
 8004778:	3708      	adds	r7, #8
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}

0800477e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800477e:	b580      	push	{r7, lr}
 8004780:	b08c      	sub	sp, #48	; 0x30
 8004782:	af00      	add	r7, sp, #0
 8004784:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800478c:	b2db      	uxtb	r3, r3
 800478e:	2b22      	cmp	r3, #34	; 0x22
 8004790:	f040 80ab 	bne.w	80048ea <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	689b      	ldr	r3, [r3, #8]
 8004798:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800479c:	d117      	bne.n	80047ce <UART_Receive_IT+0x50>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	691b      	ldr	r3, [r3, #16]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d113      	bne.n	80047ce <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80047a6:	2300      	movs	r3, #0
 80047a8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ae:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	b29b      	uxth	r3, r3
 80047b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047bc:	b29a      	uxth	r2, r3
 80047be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047c0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047c6:	1c9a      	adds	r2, r3, #2
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	629a      	str	r2, [r3, #40]	; 0x28
 80047cc:	e026      	b.n	800481c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047d2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80047d4:	2300      	movs	r3, #0
 80047d6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047e0:	d007      	beq.n	80047f2 <UART_Receive_IT+0x74>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d10a      	bne.n	8004800 <UART_Receive_IT+0x82>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	691b      	ldr	r3, [r3, #16]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d106      	bne.n	8004800 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	b2da      	uxtb	r2, r3
 80047fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047fc:	701a      	strb	r2, [r3, #0]
 80047fe:	e008      	b.n	8004812 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	b2db      	uxtb	r3, r3
 8004808:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800480c:	b2da      	uxtb	r2, r3
 800480e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004810:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004816:	1c5a      	adds	r2, r3, #1
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004820:	b29b      	uxth	r3, r3
 8004822:	3b01      	subs	r3, #1
 8004824:	b29b      	uxth	r3, r3
 8004826:	687a      	ldr	r2, [r7, #4]
 8004828:	4619      	mov	r1, r3
 800482a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800482c:	2b00      	cmp	r3, #0
 800482e:	d15a      	bne.n	80048e6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	68da      	ldr	r2, [r3, #12]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f022 0220 	bic.w	r2, r2, #32
 800483e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	68da      	ldr	r2, [r3, #12]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800484e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	695a      	ldr	r2, [r3, #20]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f022 0201 	bic.w	r2, r2, #1
 800485e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2220      	movs	r2, #32
 8004864:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800486c:	2b01      	cmp	r3, #1
 800486e:	d135      	bne.n	80048dc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2200      	movs	r2, #0
 8004874:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	330c      	adds	r3, #12
 800487c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	e853 3f00 	ldrex	r3, [r3]
 8004884:	613b      	str	r3, [r7, #16]
   return(result);
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	f023 0310 	bic.w	r3, r3, #16
 800488c:	627b      	str	r3, [r7, #36]	; 0x24
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	330c      	adds	r3, #12
 8004894:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004896:	623a      	str	r2, [r7, #32]
 8004898:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800489a:	69f9      	ldr	r1, [r7, #28]
 800489c:	6a3a      	ldr	r2, [r7, #32]
 800489e:	e841 2300 	strex	r3, r2, [r1]
 80048a2:	61bb      	str	r3, [r7, #24]
   return(result);
 80048a4:	69bb      	ldr	r3, [r7, #24]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d1e5      	bne.n	8004876 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f003 0310 	and.w	r3, r3, #16
 80048b4:	2b10      	cmp	r3, #16
 80048b6:	d10a      	bne.n	80048ce <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80048b8:	2300      	movs	r3, #0
 80048ba:	60fb      	str	r3, [r7, #12]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	60fb      	str	r3, [r7, #12]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	60fb      	str	r3, [r7, #12]
 80048cc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80048d2:	4619      	mov	r1, r3
 80048d4:	6878      	ldr	r0, [r7, #4]
 80048d6:	f7ff fdf9 	bl	80044cc <HAL_UARTEx_RxEventCallback>
 80048da:	e002      	b.n	80048e2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80048dc:	6878      	ldr	r0, [r7, #4]
 80048de:	f7ff fde1 	bl	80044a4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80048e2:	2300      	movs	r3, #0
 80048e4:	e002      	b.n	80048ec <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80048e6:	2300      	movs	r3, #0
 80048e8:	e000      	b.n	80048ec <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80048ea:	2302      	movs	r3, #2
  }
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	3730      	adds	r7, #48	; 0x30
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}

080048f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80048f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048f8:	b0c0      	sub	sp, #256	; 0x100
 80048fa:	af00      	add	r7, sp, #0
 80048fc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004900:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	691b      	ldr	r3, [r3, #16]
 8004908:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800490c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004910:	68d9      	ldr	r1, [r3, #12]
 8004912:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004916:	681a      	ldr	r2, [r3, #0]
 8004918:	ea40 0301 	orr.w	r3, r0, r1
 800491c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800491e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004922:	689a      	ldr	r2, [r3, #8]
 8004924:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004928:	691b      	ldr	r3, [r3, #16]
 800492a:	431a      	orrs	r2, r3
 800492c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004930:	695b      	ldr	r3, [r3, #20]
 8004932:	431a      	orrs	r2, r3
 8004934:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004938:	69db      	ldr	r3, [r3, #28]
 800493a:	4313      	orrs	r3, r2
 800493c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004940:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	68db      	ldr	r3, [r3, #12]
 8004948:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800494c:	f021 010c 	bic.w	r1, r1, #12
 8004950:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004954:	681a      	ldr	r2, [r3, #0]
 8004956:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800495a:	430b      	orrs	r3, r1
 800495c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800495e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	695b      	ldr	r3, [r3, #20]
 8004966:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800496a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800496e:	6999      	ldr	r1, [r3, #24]
 8004970:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004974:	681a      	ldr	r2, [r3, #0]
 8004976:	ea40 0301 	orr.w	r3, r0, r1
 800497a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800497c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004980:	681a      	ldr	r2, [r3, #0]
 8004982:	4b8f      	ldr	r3, [pc, #572]	; (8004bc0 <UART_SetConfig+0x2cc>)
 8004984:	429a      	cmp	r2, r3
 8004986:	d005      	beq.n	8004994 <UART_SetConfig+0xa0>
 8004988:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800498c:	681a      	ldr	r2, [r3, #0]
 800498e:	4b8d      	ldr	r3, [pc, #564]	; (8004bc4 <UART_SetConfig+0x2d0>)
 8004990:	429a      	cmp	r2, r3
 8004992:	d104      	bne.n	800499e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004994:	f7fe ff5c 	bl	8003850 <HAL_RCC_GetPCLK2Freq>
 8004998:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800499c:	e003      	b.n	80049a6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800499e:	f7fe ff43 	bl	8003828 <HAL_RCC_GetPCLK1Freq>
 80049a2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80049a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049aa:	69db      	ldr	r3, [r3, #28]
 80049ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049b0:	f040 810c 	bne.w	8004bcc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80049b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80049b8:	2200      	movs	r2, #0
 80049ba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80049be:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80049c2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80049c6:	4622      	mov	r2, r4
 80049c8:	462b      	mov	r3, r5
 80049ca:	1891      	adds	r1, r2, r2
 80049cc:	65b9      	str	r1, [r7, #88]	; 0x58
 80049ce:	415b      	adcs	r3, r3
 80049d0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80049d2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80049d6:	4621      	mov	r1, r4
 80049d8:	eb12 0801 	adds.w	r8, r2, r1
 80049dc:	4629      	mov	r1, r5
 80049de:	eb43 0901 	adc.w	r9, r3, r1
 80049e2:	f04f 0200 	mov.w	r2, #0
 80049e6:	f04f 0300 	mov.w	r3, #0
 80049ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80049ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80049f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80049f6:	4690      	mov	r8, r2
 80049f8:	4699      	mov	r9, r3
 80049fa:	4623      	mov	r3, r4
 80049fc:	eb18 0303 	adds.w	r3, r8, r3
 8004a00:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004a04:	462b      	mov	r3, r5
 8004a06:	eb49 0303 	adc.w	r3, r9, r3
 8004a0a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004a0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	2200      	movs	r2, #0
 8004a16:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004a1a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004a1e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004a22:	460b      	mov	r3, r1
 8004a24:	18db      	adds	r3, r3, r3
 8004a26:	653b      	str	r3, [r7, #80]	; 0x50
 8004a28:	4613      	mov	r3, r2
 8004a2a:	eb42 0303 	adc.w	r3, r2, r3
 8004a2e:	657b      	str	r3, [r7, #84]	; 0x54
 8004a30:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004a34:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004a38:	f7fc f90e 	bl	8000c58 <__aeabi_uldivmod>
 8004a3c:	4602      	mov	r2, r0
 8004a3e:	460b      	mov	r3, r1
 8004a40:	4b61      	ldr	r3, [pc, #388]	; (8004bc8 <UART_SetConfig+0x2d4>)
 8004a42:	fba3 2302 	umull	r2, r3, r3, r2
 8004a46:	095b      	lsrs	r3, r3, #5
 8004a48:	011c      	lsls	r4, r3, #4
 8004a4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a4e:	2200      	movs	r2, #0
 8004a50:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004a54:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004a58:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004a5c:	4642      	mov	r2, r8
 8004a5e:	464b      	mov	r3, r9
 8004a60:	1891      	adds	r1, r2, r2
 8004a62:	64b9      	str	r1, [r7, #72]	; 0x48
 8004a64:	415b      	adcs	r3, r3
 8004a66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a68:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004a6c:	4641      	mov	r1, r8
 8004a6e:	eb12 0a01 	adds.w	sl, r2, r1
 8004a72:	4649      	mov	r1, r9
 8004a74:	eb43 0b01 	adc.w	fp, r3, r1
 8004a78:	f04f 0200 	mov.w	r2, #0
 8004a7c:	f04f 0300 	mov.w	r3, #0
 8004a80:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004a84:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004a88:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004a8c:	4692      	mov	sl, r2
 8004a8e:	469b      	mov	fp, r3
 8004a90:	4643      	mov	r3, r8
 8004a92:	eb1a 0303 	adds.w	r3, sl, r3
 8004a96:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004a9a:	464b      	mov	r3, r9
 8004a9c:	eb4b 0303 	adc.w	r3, fp, r3
 8004aa0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004aa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004ab0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004ab4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004ab8:	460b      	mov	r3, r1
 8004aba:	18db      	adds	r3, r3, r3
 8004abc:	643b      	str	r3, [r7, #64]	; 0x40
 8004abe:	4613      	mov	r3, r2
 8004ac0:	eb42 0303 	adc.w	r3, r2, r3
 8004ac4:	647b      	str	r3, [r7, #68]	; 0x44
 8004ac6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004aca:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004ace:	f7fc f8c3 	bl	8000c58 <__aeabi_uldivmod>
 8004ad2:	4602      	mov	r2, r0
 8004ad4:	460b      	mov	r3, r1
 8004ad6:	4611      	mov	r1, r2
 8004ad8:	4b3b      	ldr	r3, [pc, #236]	; (8004bc8 <UART_SetConfig+0x2d4>)
 8004ada:	fba3 2301 	umull	r2, r3, r3, r1
 8004ade:	095b      	lsrs	r3, r3, #5
 8004ae0:	2264      	movs	r2, #100	; 0x64
 8004ae2:	fb02 f303 	mul.w	r3, r2, r3
 8004ae6:	1acb      	subs	r3, r1, r3
 8004ae8:	00db      	lsls	r3, r3, #3
 8004aea:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004aee:	4b36      	ldr	r3, [pc, #216]	; (8004bc8 <UART_SetConfig+0x2d4>)
 8004af0:	fba3 2302 	umull	r2, r3, r3, r2
 8004af4:	095b      	lsrs	r3, r3, #5
 8004af6:	005b      	lsls	r3, r3, #1
 8004af8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004afc:	441c      	add	r4, r3
 8004afe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b02:	2200      	movs	r2, #0
 8004b04:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004b08:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004b0c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004b10:	4642      	mov	r2, r8
 8004b12:	464b      	mov	r3, r9
 8004b14:	1891      	adds	r1, r2, r2
 8004b16:	63b9      	str	r1, [r7, #56]	; 0x38
 8004b18:	415b      	adcs	r3, r3
 8004b1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b1c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004b20:	4641      	mov	r1, r8
 8004b22:	1851      	adds	r1, r2, r1
 8004b24:	6339      	str	r1, [r7, #48]	; 0x30
 8004b26:	4649      	mov	r1, r9
 8004b28:	414b      	adcs	r3, r1
 8004b2a:	637b      	str	r3, [r7, #52]	; 0x34
 8004b2c:	f04f 0200 	mov.w	r2, #0
 8004b30:	f04f 0300 	mov.w	r3, #0
 8004b34:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004b38:	4659      	mov	r1, fp
 8004b3a:	00cb      	lsls	r3, r1, #3
 8004b3c:	4651      	mov	r1, sl
 8004b3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b42:	4651      	mov	r1, sl
 8004b44:	00ca      	lsls	r2, r1, #3
 8004b46:	4610      	mov	r0, r2
 8004b48:	4619      	mov	r1, r3
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	4642      	mov	r2, r8
 8004b4e:	189b      	adds	r3, r3, r2
 8004b50:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004b54:	464b      	mov	r3, r9
 8004b56:	460a      	mov	r2, r1
 8004b58:	eb42 0303 	adc.w	r3, r2, r3
 8004b5c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004b60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	2200      	movs	r2, #0
 8004b68:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004b6c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004b70:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004b74:	460b      	mov	r3, r1
 8004b76:	18db      	adds	r3, r3, r3
 8004b78:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b7a:	4613      	mov	r3, r2
 8004b7c:	eb42 0303 	adc.w	r3, r2, r3
 8004b80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b82:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004b86:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004b8a:	f7fc f865 	bl	8000c58 <__aeabi_uldivmod>
 8004b8e:	4602      	mov	r2, r0
 8004b90:	460b      	mov	r3, r1
 8004b92:	4b0d      	ldr	r3, [pc, #52]	; (8004bc8 <UART_SetConfig+0x2d4>)
 8004b94:	fba3 1302 	umull	r1, r3, r3, r2
 8004b98:	095b      	lsrs	r3, r3, #5
 8004b9a:	2164      	movs	r1, #100	; 0x64
 8004b9c:	fb01 f303 	mul.w	r3, r1, r3
 8004ba0:	1ad3      	subs	r3, r2, r3
 8004ba2:	00db      	lsls	r3, r3, #3
 8004ba4:	3332      	adds	r3, #50	; 0x32
 8004ba6:	4a08      	ldr	r2, [pc, #32]	; (8004bc8 <UART_SetConfig+0x2d4>)
 8004ba8:	fba2 2303 	umull	r2, r3, r2, r3
 8004bac:	095b      	lsrs	r3, r3, #5
 8004bae:	f003 0207 	and.w	r2, r3, #7
 8004bb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4422      	add	r2, r4
 8004bba:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004bbc:	e105      	b.n	8004dca <UART_SetConfig+0x4d6>
 8004bbe:	bf00      	nop
 8004bc0:	40011000 	.word	0x40011000
 8004bc4:	40011400 	.word	0x40011400
 8004bc8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004bcc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004bd6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004bda:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004bde:	4642      	mov	r2, r8
 8004be0:	464b      	mov	r3, r9
 8004be2:	1891      	adds	r1, r2, r2
 8004be4:	6239      	str	r1, [r7, #32]
 8004be6:	415b      	adcs	r3, r3
 8004be8:	627b      	str	r3, [r7, #36]	; 0x24
 8004bea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004bee:	4641      	mov	r1, r8
 8004bf0:	1854      	adds	r4, r2, r1
 8004bf2:	4649      	mov	r1, r9
 8004bf4:	eb43 0501 	adc.w	r5, r3, r1
 8004bf8:	f04f 0200 	mov.w	r2, #0
 8004bfc:	f04f 0300 	mov.w	r3, #0
 8004c00:	00eb      	lsls	r3, r5, #3
 8004c02:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004c06:	00e2      	lsls	r2, r4, #3
 8004c08:	4614      	mov	r4, r2
 8004c0a:	461d      	mov	r5, r3
 8004c0c:	4643      	mov	r3, r8
 8004c0e:	18e3      	adds	r3, r4, r3
 8004c10:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004c14:	464b      	mov	r3, r9
 8004c16:	eb45 0303 	adc.w	r3, r5, r3
 8004c1a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004c1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	2200      	movs	r2, #0
 8004c26:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004c2a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004c2e:	f04f 0200 	mov.w	r2, #0
 8004c32:	f04f 0300 	mov.w	r3, #0
 8004c36:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004c3a:	4629      	mov	r1, r5
 8004c3c:	008b      	lsls	r3, r1, #2
 8004c3e:	4621      	mov	r1, r4
 8004c40:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c44:	4621      	mov	r1, r4
 8004c46:	008a      	lsls	r2, r1, #2
 8004c48:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004c4c:	f7fc f804 	bl	8000c58 <__aeabi_uldivmod>
 8004c50:	4602      	mov	r2, r0
 8004c52:	460b      	mov	r3, r1
 8004c54:	4b60      	ldr	r3, [pc, #384]	; (8004dd8 <UART_SetConfig+0x4e4>)
 8004c56:	fba3 2302 	umull	r2, r3, r3, r2
 8004c5a:	095b      	lsrs	r3, r3, #5
 8004c5c:	011c      	lsls	r4, r3, #4
 8004c5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c62:	2200      	movs	r2, #0
 8004c64:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004c68:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004c6c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004c70:	4642      	mov	r2, r8
 8004c72:	464b      	mov	r3, r9
 8004c74:	1891      	adds	r1, r2, r2
 8004c76:	61b9      	str	r1, [r7, #24]
 8004c78:	415b      	adcs	r3, r3
 8004c7a:	61fb      	str	r3, [r7, #28]
 8004c7c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c80:	4641      	mov	r1, r8
 8004c82:	1851      	adds	r1, r2, r1
 8004c84:	6139      	str	r1, [r7, #16]
 8004c86:	4649      	mov	r1, r9
 8004c88:	414b      	adcs	r3, r1
 8004c8a:	617b      	str	r3, [r7, #20]
 8004c8c:	f04f 0200 	mov.w	r2, #0
 8004c90:	f04f 0300 	mov.w	r3, #0
 8004c94:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004c98:	4659      	mov	r1, fp
 8004c9a:	00cb      	lsls	r3, r1, #3
 8004c9c:	4651      	mov	r1, sl
 8004c9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ca2:	4651      	mov	r1, sl
 8004ca4:	00ca      	lsls	r2, r1, #3
 8004ca6:	4610      	mov	r0, r2
 8004ca8:	4619      	mov	r1, r3
 8004caa:	4603      	mov	r3, r0
 8004cac:	4642      	mov	r2, r8
 8004cae:	189b      	adds	r3, r3, r2
 8004cb0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004cb4:	464b      	mov	r3, r9
 8004cb6:	460a      	mov	r2, r1
 8004cb8:	eb42 0303 	adc.w	r3, r2, r3
 8004cbc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004cc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	67bb      	str	r3, [r7, #120]	; 0x78
 8004cca:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004ccc:	f04f 0200 	mov.w	r2, #0
 8004cd0:	f04f 0300 	mov.w	r3, #0
 8004cd4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004cd8:	4649      	mov	r1, r9
 8004cda:	008b      	lsls	r3, r1, #2
 8004cdc:	4641      	mov	r1, r8
 8004cde:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ce2:	4641      	mov	r1, r8
 8004ce4:	008a      	lsls	r2, r1, #2
 8004ce6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004cea:	f7fb ffb5 	bl	8000c58 <__aeabi_uldivmod>
 8004cee:	4602      	mov	r2, r0
 8004cf0:	460b      	mov	r3, r1
 8004cf2:	4b39      	ldr	r3, [pc, #228]	; (8004dd8 <UART_SetConfig+0x4e4>)
 8004cf4:	fba3 1302 	umull	r1, r3, r3, r2
 8004cf8:	095b      	lsrs	r3, r3, #5
 8004cfa:	2164      	movs	r1, #100	; 0x64
 8004cfc:	fb01 f303 	mul.w	r3, r1, r3
 8004d00:	1ad3      	subs	r3, r2, r3
 8004d02:	011b      	lsls	r3, r3, #4
 8004d04:	3332      	adds	r3, #50	; 0x32
 8004d06:	4a34      	ldr	r2, [pc, #208]	; (8004dd8 <UART_SetConfig+0x4e4>)
 8004d08:	fba2 2303 	umull	r2, r3, r2, r3
 8004d0c:	095b      	lsrs	r3, r3, #5
 8004d0e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d12:	441c      	add	r4, r3
 8004d14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d18:	2200      	movs	r2, #0
 8004d1a:	673b      	str	r3, [r7, #112]	; 0x70
 8004d1c:	677a      	str	r2, [r7, #116]	; 0x74
 8004d1e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004d22:	4642      	mov	r2, r8
 8004d24:	464b      	mov	r3, r9
 8004d26:	1891      	adds	r1, r2, r2
 8004d28:	60b9      	str	r1, [r7, #8]
 8004d2a:	415b      	adcs	r3, r3
 8004d2c:	60fb      	str	r3, [r7, #12]
 8004d2e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004d32:	4641      	mov	r1, r8
 8004d34:	1851      	adds	r1, r2, r1
 8004d36:	6039      	str	r1, [r7, #0]
 8004d38:	4649      	mov	r1, r9
 8004d3a:	414b      	adcs	r3, r1
 8004d3c:	607b      	str	r3, [r7, #4]
 8004d3e:	f04f 0200 	mov.w	r2, #0
 8004d42:	f04f 0300 	mov.w	r3, #0
 8004d46:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004d4a:	4659      	mov	r1, fp
 8004d4c:	00cb      	lsls	r3, r1, #3
 8004d4e:	4651      	mov	r1, sl
 8004d50:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d54:	4651      	mov	r1, sl
 8004d56:	00ca      	lsls	r2, r1, #3
 8004d58:	4610      	mov	r0, r2
 8004d5a:	4619      	mov	r1, r3
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	4642      	mov	r2, r8
 8004d60:	189b      	adds	r3, r3, r2
 8004d62:	66bb      	str	r3, [r7, #104]	; 0x68
 8004d64:	464b      	mov	r3, r9
 8004d66:	460a      	mov	r2, r1
 8004d68:	eb42 0303 	adc.w	r3, r2, r3
 8004d6c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004d6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	2200      	movs	r2, #0
 8004d76:	663b      	str	r3, [r7, #96]	; 0x60
 8004d78:	667a      	str	r2, [r7, #100]	; 0x64
 8004d7a:	f04f 0200 	mov.w	r2, #0
 8004d7e:	f04f 0300 	mov.w	r3, #0
 8004d82:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004d86:	4649      	mov	r1, r9
 8004d88:	008b      	lsls	r3, r1, #2
 8004d8a:	4641      	mov	r1, r8
 8004d8c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d90:	4641      	mov	r1, r8
 8004d92:	008a      	lsls	r2, r1, #2
 8004d94:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004d98:	f7fb ff5e 	bl	8000c58 <__aeabi_uldivmod>
 8004d9c:	4602      	mov	r2, r0
 8004d9e:	460b      	mov	r3, r1
 8004da0:	4b0d      	ldr	r3, [pc, #52]	; (8004dd8 <UART_SetConfig+0x4e4>)
 8004da2:	fba3 1302 	umull	r1, r3, r3, r2
 8004da6:	095b      	lsrs	r3, r3, #5
 8004da8:	2164      	movs	r1, #100	; 0x64
 8004daa:	fb01 f303 	mul.w	r3, r1, r3
 8004dae:	1ad3      	subs	r3, r2, r3
 8004db0:	011b      	lsls	r3, r3, #4
 8004db2:	3332      	adds	r3, #50	; 0x32
 8004db4:	4a08      	ldr	r2, [pc, #32]	; (8004dd8 <UART_SetConfig+0x4e4>)
 8004db6:	fba2 2303 	umull	r2, r3, r2, r3
 8004dba:	095b      	lsrs	r3, r3, #5
 8004dbc:	f003 020f 	and.w	r2, r3, #15
 8004dc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4422      	add	r2, r4
 8004dc8:	609a      	str	r2, [r3, #8]
}
 8004dca:	bf00      	nop
 8004dcc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004dd6:	bf00      	nop
 8004dd8:	51eb851f 	.word	0x51eb851f

08004ddc <__errno>:
 8004ddc:	4b01      	ldr	r3, [pc, #4]	; (8004de4 <__errno+0x8>)
 8004dde:	6818      	ldr	r0, [r3, #0]
 8004de0:	4770      	bx	lr
 8004de2:	bf00      	nop
 8004de4:	2000000c 	.word	0x2000000c

08004de8 <__libc_init_array>:
 8004de8:	b570      	push	{r4, r5, r6, lr}
 8004dea:	4d0d      	ldr	r5, [pc, #52]	; (8004e20 <__libc_init_array+0x38>)
 8004dec:	4c0d      	ldr	r4, [pc, #52]	; (8004e24 <__libc_init_array+0x3c>)
 8004dee:	1b64      	subs	r4, r4, r5
 8004df0:	10a4      	asrs	r4, r4, #2
 8004df2:	2600      	movs	r6, #0
 8004df4:	42a6      	cmp	r6, r4
 8004df6:	d109      	bne.n	8004e0c <__libc_init_array+0x24>
 8004df8:	4d0b      	ldr	r5, [pc, #44]	; (8004e28 <__libc_init_array+0x40>)
 8004dfa:	4c0c      	ldr	r4, [pc, #48]	; (8004e2c <__libc_init_array+0x44>)
 8004dfc:	f003 f994 	bl	8008128 <_init>
 8004e00:	1b64      	subs	r4, r4, r5
 8004e02:	10a4      	asrs	r4, r4, #2
 8004e04:	2600      	movs	r6, #0
 8004e06:	42a6      	cmp	r6, r4
 8004e08:	d105      	bne.n	8004e16 <__libc_init_array+0x2e>
 8004e0a:	bd70      	pop	{r4, r5, r6, pc}
 8004e0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e10:	4798      	blx	r3
 8004e12:	3601      	adds	r6, #1
 8004e14:	e7ee      	b.n	8004df4 <__libc_init_array+0xc>
 8004e16:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e1a:	4798      	blx	r3
 8004e1c:	3601      	adds	r6, #1
 8004e1e:	e7f2      	b.n	8004e06 <__libc_init_array+0x1e>
 8004e20:	080085a0 	.word	0x080085a0
 8004e24:	080085a0 	.word	0x080085a0
 8004e28:	080085a0 	.word	0x080085a0
 8004e2c:	080085a4 	.word	0x080085a4

08004e30 <malloc>:
 8004e30:	4b02      	ldr	r3, [pc, #8]	; (8004e3c <malloc+0xc>)
 8004e32:	4601      	mov	r1, r0
 8004e34:	6818      	ldr	r0, [r3, #0]
 8004e36:	f000 b87f 	b.w	8004f38 <_malloc_r>
 8004e3a:	bf00      	nop
 8004e3c:	2000000c 	.word	0x2000000c

08004e40 <free>:
 8004e40:	4b02      	ldr	r3, [pc, #8]	; (8004e4c <free+0xc>)
 8004e42:	4601      	mov	r1, r0
 8004e44:	6818      	ldr	r0, [r3, #0]
 8004e46:	f000 b80b 	b.w	8004e60 <_free_r>
 8004e4a:	bf00      	nop
 8004e4c:	2000000c 	.word	0x2000000c

08004e50 <memset>:
 8004e50:	4402      	add	r2, r0
 8004e52:	4603      	mov	r3, r0
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d100      	bne.n	8004e5a <memset+0xa>
 8004e58:	4770      	bx	lr
 8004e5a:	f803 1b01 	strb.w	r1, [r3], #1
 8004e5e:	e7f9      	b.n	8004e54 <memset+0x4>

08004e60 <_free_r>:
 8004e60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004e62:	2900      	cmp	r1, #0
 8004e64:	d044      	beq.n	8004ef0 <_free_r+0x90>
 8004e66:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e6a:	9001      	str	r0, [sp, #4]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	f1a1 0404 	sub.w	r4, r1, #4
 8004e72:	bfb8      	it	lt
 8004e74:	18e4      	addlt	r4, r4, r3
 8004e76:	f001 fbfb 	bl	8006670 <__malloc_lock>
 8004e7a:	4a1e      	ldr	r2, [pc, #120]	; (8004ef4 <_free_r+0x94>)
 8004e7c:	9801      	ldr	r0, [sp, #4]
 8004e7e:	6813      	ldr	r3, [r2, #0]
 8004e80:	b933      	cbnz	r3, 8004e90 <_free_r+0x30>
 8004e82:	6063      	str	r3, [r4, #4]
 8004e84:	6014      	str	r4, [r2, #0]
 8004e86:	b003      	add	sp, #12
 8004e88:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004e8c:	f001 bbf6 	b.w	800667c <__malloc_unlock>
 8004e90:	42a3      	cmp	r3, r4
 8004e92:	d908      	bls.n	8004ea6 <_free_r+0x46>
 8004e94:	6825      	ldr	r5, [r4, #0]
 8004e96:	1961      	adds	r1, r4, r5
 8004e98:	428b      	cmp	r3, r1
 8004e9a:	bf01      	itttt	eq
 8004e9c:	6819      	ldreq	r1, [r3, #0]
 8004e9e:	685b      	ldreq	r3, [r3, #4]
 8004ea0:	1949      	addeq	r1, r1, r5
 8004ea2:	6021      	streq	r1, [r4, #0]
 8004ea4:	e7ed      	b.n	8004e82 <_free_r+0x22>
 8004ea6:	461a      	mov	r2, r3
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	b10b      	cbz	r3, 8004eb0 <_free_r+0x50>
 8004eac:	42a3      	cmp	r3, r4
 8004eae:	d9fa      	bls.n	8004ea6 <_free_r+0x46>
 8004eb0:	6811      	ldr	r1, [r2, #0]
 8004eb2:	1855      	adds	r5, r2, r1
 8004eb4:	42a5      	cmp	r5, r4
 8004eb6:	d10b      	bne.n	8004ed0 <_free_r+0x70>
 8004eb8:	6824      	ldr	r4, [r4, #0]
 8004eba:	4421      	add	r1, r4
 8004ebc:	1854      	adds	r4, r2, r1
 8004ebe:	42a3      	cmp	r3, r4
 8004ec0:	6011      	str	r1, [r2, #0]
 8004ec2:	d1e0      	bne.n	8004e86 <_free_r+0x26>
 8004ec4:	681c      	ldr	r4, [r3, #0]
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	6053      	str	r3, [r2, #4]
 8004eca:	4421      	add	r1, r4
 8004ecc:	6011      	str	r1, [r2, #0]
 8004ece:	e7da      	b.n	8004e86 <_free_r+0x26>
 8004ed0:	d902      	bls.n	8004ed8 <_free_r+0x78>
 8004ed2:	230c      	movs	r3, #12
 8004ed4:	6003      	str	r3, [r0, #0]
 8004ed6:	e7d6      	b.n	8004e86 <_free_r+0x26>
 8004ed8:	6825      	ldr	r5, [r4, #0]
 8004eda:	1961      	adds	r1, r4, r5
 8004edc:	428b      	cmp	r3, r1
 8004ede:	bf04      	itt	eq
 8004ee0:	6819      	ldreq	r1, [r3, #0]
 8004ee2:	685b      	ldreq	r3, [r3, #4]
 8004ee4:	6063      	str	r3, [r4, #4]
 8004ee6:	bf04      	itt	eq
 8004ee8:	1949      	addeq	r1, r1, r5
 8004eea:	6021      	streq	r1, [r4, #0]
 8004eec:	6054      	str	r4, [r2, #4]
 8004eee:	e7ca      	b.n	8004e86 <_free_r+0x26>
 8004ef0:	b003      	add	sp, #12
 8004ef2:	bd30      	pop	{r4, r5, pc}
 8004ef4:	20000374 	.word	0x20000374

08004ef8 <sbrk_aligned>:
 8004ef8:	b570      	push	{r4, r5, r6, lr}
 8004efa:	4e0e      	ldr	r6, [pc, #56]	; (8004f34 <sbrk_aligned+0x3c>)
 8004efc:	460c      	mov	r4, r1
 8004efe:	6831      	ldr	r1, [r6, #0]
 8004f00:	4605      	mov	r5, r0
 8004f02:	b911      	cbnz	r1, 8004f0a <sbrk_aligned+0x12>
 8004f04:	f000 fcf6 	bl	80058f4 <_sbrk_r>
 8004f08:	6030      	str	r0, [r6, #0]
 8004f0a:	4621      	mov	r1, r4
 8004f0c:	4628      	mov	r0, r5
 8004f0e:	f000 fcf1 	bl	80058f4 <_sbrk_r>
 8004f12:	1c43      	adds	r3, r0, #1
 8004f14:	d00a      	beq.n	8004f2c <sbrk_aligned+0x34>
 8004f16:	1cc4      	adds	r4, r0, #3
 8004f18:	f024 0403 	bic.w	r4, r4, #3
 8004f1c:	42a0      	cmp	r0, r4
 8004f1e:	d007      	beq.n	8004f30 <sbrk_aligned+0x38>
 8004f20:	1a21      	subs	r1, r4, r0
 8004f22:	4628      	mov	r0, r5
 8004f24:	f000 fce6 	bl	80058f4 <_sbrk_r>
 8004f28:	3001      	adds	r0, #1
 8004f2a:	d101      	bne.n	8004f30 <sbrk_aligned+0x38>
 8004f2c:	f04f 34ff 	mov.w	r4, #4294967295
 8004f30:	4620      	mov	r0, r4
 8004f32:	bd70      	pop	{r4, r5, r6, pc}
 8004f34:	20000378 	.word	0x20000378

08004f38 <_malloc_r>:
 8004f38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f3c:	1ccd      	adds	r5, r1, #3
 8004f3e:	f025 0503 	bic.w	r5, r5, #3
 8004f42:	3508      	adds	r5, #8
 8004f44:	2d0c      	cmp	r5, #12
 8004f46:	bf38      	it	cc
 8004f48:	250c      	movcc	r5, #12
 8004f4a:	2d00      	cmp	r5, #0
 8004f4c:	4607      	mov	r7, r0
 8004f4e:	db01      	blt.n	8004f54 <_malloc_r+0x1c>
 8004f50:	42a9      	cmp	r1, r5
 8004f52:	d905      	bls.n	8004f60 <_malloc_r+0x28>
 8004f54:	230c      	movs	r3, #12
 8004f56:	603b      	str	r3, [r7, #0]
 8004f58:	2600      	movs	r6, #0
 8004f5a:	4630      	mov	r0, r6
 8004f5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f60:	4e2e      	ldr	r6, [pc, #184]	; (800501c <_malloc_r+0xe4>)
 8004f62:	f001 fb85 	bl	8006670 <__malloc_lock>
 8004f66:	6833      	ldr	r3, [r6, #0]
 8004f68:	461c      	mov	r4, r3
 8004f6a:	bb34      	cbnz	r4, 8004fba <_malloc_r+0x82>
 8004f6c:	4629      	mov	r1, r5
 8004f6e:	4638      	mov	r0, r7
 8004f70:	f7ff ffc2 	bl	8004ef8 <sbrk_aligned>
 8004f74:	1c43      	adds	r3, r0, #1
 8004f76:	4604      	mov	r4, r0
 8004f78:	d14d      	bne.n	8005016 <_malloc_r+0xde>
 8004f7a:	6834      	ldr	r4, [r6, #0]
 8004f7c:	4626      	mov	r6, r4
 8004f7e:	2e00      	cmp	r6, #0
 8004f80:	d140      	bne.n	8005004 <_malloc_r+0xcc>
 8004f82:	6823      	ldr	r3, [r4, #0]
 8004f84:	4631      	mov	r1, r6
 8004f86:	4638      	mov	r0, r7
 8004f88:	eb04 0803 	add.w	r8, r4, r3
 8004f8c:	f000 fcb2 	bl	80058f4 <_sbrk_r>
 8004f90:	4580      	cmp	r8, r0
 8004f92:	d13a      	bne.n	800500a <_malloc_r+0xd2>
 8004f94:	6821      	ldr	r1, [r4, #0]
 8004f96:	3503      	adds	r5, #3
 8004f98:	1a6d      	subs	r5, r5, r1
 8004f9a:	f025 0503 	bic.w	r5, r5, #3
 8004f9e:	3508      	adds	r5, #8
 8004fa0:	2d0c      	cmp	r5, #12
 8004fa2:	bf38      	it	cc
 8004fa4:	250c      	movcc	r5, #12
 8004fa6:	4629      	mov	r1, r5
 8004fa8:	4638      	mov	r0, r7
 8004faa:	f7ff ffa5 	bl	8004ef8 <sbrk_aligned>
 8004fae:	3001      	adds	r0, #1
 8004fb0:	d02b      	beq.n	800500a <_malloc_r+0xd2>
 8004fb2:	6823      	ldr	r3, [r4, #0]
 8004fb4:	442b      	add	r3, r5
 8004fb6:	6023      	str	r3, [r4, #0]
 8004fb8:	e00e      	b.n	8004fd8 <_malloc_r+0xa0>
 8004fba:	6822      	ldr	r2, [r4, #0]
 8004fbc:	1b52      	subs	r2, r2, r5
 8004fbe:	d41e      	bmi.n	8004ffe <_malloc_r+0xc6>
 8004fc0:	2a0b      	cmp	r2, #11
 8004fc2:	d916      	bls.n	8004ff2 <_malloc_r+0xba>
 8004fc4:	1961      	adds	r1, r4, r5
 8004fc6:	42a3      	cmp	r3, r4
 8004fc8:	6025      	str	r5, [r4, #0]
 8004fca:	bf18      	it	ne
 8004fcc:	6059      	strne	r1, [r3, #4]
 8004fce:	6863      	ldr	r3, [r4, #4]
 8004fd0:	bf08      	it	eq
 8004fd2:	6031      	streq	r1, [r6, #0]
 8004fd4:	5162      	str	r2, [r4, r5]
 8004fd6:	604b      	str	r3, [r1, #4]
 8004fd8:	4638      	mov	r0, r7
 8004fda:	f104 060b 	add.w	r6, r4, #11
 8004fde:	f001 fb4d 	bl	800667c <__malloc_unlock>
 8004fe2:	f026 0607 	bic.w	r6, r6, #7
 8004fe6:	1d23      	adds	r3, r4, #4
 8004fe8:	1af2      	subs	r2, r6, r3
 8004fea:	d0b6      	beq.n	8004f5a <_malloc_r+0x22>
 8004fec:	1b9b      	subs	r3, r3, r6
 8004fee:	50a3      	str	r3, [r4, r2]
 8004ff0:	e7b3      	b.n	8004f5a <_malloc_r+0x22>
 8004ff2:	6862      	ldr	r2, [r4, #4]
 8004ff4:	42a3      	cmp	r3, r4
 8004ff6:	bf0c      	ite	eq
 8004ff8:	6032      	streq	r2, [r6, #0]
 8004ffa:	605a      	strne	r2, [r3, #4]
 8004ffc:	e7ec      	b.n	8004fd8 <_malloc_r+0xa0>
 8004ffe:	4623      	mov	r3, r4
 8005000:	6864      	ldr	r4, [r4, #4]
 8005002:	e7b2      	b.n	8004f6a <_malloc_r+0x32>
 8005004:	4634      	mov	r4, r6
 8005006:	6876      	ldr	r6, [r6, #4]
 8005008:	e7b9      	b.n	8004f7e <_malloc_r+0x46>
 800500a:	230c      	movs	r3, #12
 800500c:	603b      	str	r3, [r7, #0]
 800500e:	4638      	mov	r0, r7
 8005010:	f001 fb34 	bl	800667c <__malloc_unlock>
 8005014:	e7a1      	b.n	8004f5a <_malloc_r+0x22>
 8005016:	6025      	str	r5, [r4, #0]
 8005018:	e7de      	b.n	8004fd8 <_malloc_r+0xa0>
 800501a:	bf00      	nop
 800501c:	20000374 	.word	0x20000374

08005020 <__cvt>:
 8005020:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005024:	ec55 4b10 	vmov	r4, r5, d0
 8005028:	2d00      	cmp	r5, #0
 800502a:	460e      	mov	r6, r1
 800502c:	4619      	mov	r1, r3
 800502e:	462b      	mov	r3, r5
 8005030:	bfbb      	ittet	lt
 8005032:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005036:	461d      	movlt	r5, r3
 8005038:	2300      	movge	r3, #0
 800503a:	232d      	movlt	r3, #45	; 0x2d
 800503c:	700b      	strb	r3, [r1, #0]
 800503e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005040:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005044:	4691      	mov	r9, r2
 8005046:	f023 0820 	bic.w	r8, r3, #32
 800504a:	bfbc      	itt	lt
 800504c:	4622      	movlt	r2, r4
 800504e:	4614      	movlt	r4, r2
 8005050:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005054:	d005      	beq.n	8005062 <__cvt+0x42>
 8005056:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800505a:	d100      	bne.n	800505e <__cvt+0x3e>
 800505c:	3601      	adds	r6, #1
 800505e:	2102      	movs	r1, #2
 8005060:	e000      	b.n	8005064 <__cvt+0x44>
 8005062:	2103      	movs	r1, #3
 8005064:	ab03      	add	r3, sp, #12
 8005066:	9301      	str	r3, [sp, #4]
 8005068:	ab02      	add	r3, sp, #8
 800506a:	9300      	str	r3, [sp, #0]
 800506c:	ec45 4b10 	vmov	d0, r4, r5
 8005070:	4653      	mov	r3, sl
 8005072:	4632      	mov	r2, r6
 8005074:	f000 fcfc 	bl	8005a70 <_dtoa_r>
 8005078:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800507c:	4607      	mov	r7, r0
 800507e:	d102      	bne.n	8005086 <__cvt+0x66>
 8005080:	f019 0f01 	tst.w	r9, #1
 8005084:	d022      	beq.n	80050cc <__cvt+0xac>
 8005086:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800508a:	eb07 0906 	add.w	r9, r7, r6
 800508e:	d110      	bne.n	80050b2 <__cvt+0x92>
 8005090:	783b      	ldrb	r3, [r7, #0]
 8005092:	2b30      	cmp	r3, #48	; 0x30
 8005094:	d10a      	bne.n	80050ac <__cvt+0x8c>
 8005096:	2200      	movs	r2, #0
 8005098:	2300      	movs	r3, #0
 800509a:	4620      	mov	r0, r4
 800509c:	4629      	mov	r1, r5
 800509e:	f7fb fd1b 	bl	8000ad8 <__aeabi_dcmpeq>
 80050a2:	b918      	cbnz	r0, 80050ac <__cvt+0x8c>
 80050a4:	f1c6 0601 	rsb	r6, r6, #1
 80050a8:	f8ca 6000 	str.w	r6, [sl]
 80050ac:	f8da 3000 	ldr.w	r3, [sl]
 80050b0:	4499      	add	r9, r3
 80050b2:	2200      	movs	r2, #0
 80050b4:	2300      	movs	r3, #0
 80050b6:	4620      	mov	r0, r4
 80050b8:	4629      	mov	r1, r5
 80050ba:	f7fb fd0d 	bl	8000ad8 <__aeabi_dcmpeq>
 80050be:	b108      	cbz	r0, 80050c4 <__cvt+0xa4>
 80050c0:	f8cd 900c 	str.w	r9, [sp, #12]
 80050c4:	2230      	movs	r2, #48	; 0x30
 80050c6:	9b03      	ldr	r3, [sp, #12]
 80050c8:	454b      	cmp	r3, r9
 80050ca:	d307      	bcc.n	80050dc <__cvt+0xbc>
 80050cc:	9b03      	ldr	r3, [sp, #12]
 80050ce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80050d0:	1bdb      	subs	r3, r3, r7
 80050d2:	4638      	mov	r0, r7
 80050d4:	6013      	str	r3, [r2, #0]
 80050d6:	b004      	add	sp, #16
 80050d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050dc:	1c59      	adds	r1, r3, #1
 80050de:	9103      	str	r1, [sp, #12]
 80050e0:	701a      	strb	r2, [r3, #0]
 80050e2:	e7f0      	b.n	80050c6 <__cvt+0xa6>

080050e4 <__exponent>:
 80050e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80050e6:	4603      	mov	r3, r0
 80050e8:	2900      	cmp	r1, #0
 80050ea:	bfb8      	it	lt
 80050ec:	4249      	neglt	r1, r1
 80050ee:	f803 2b02 	strb.w	r2, [r3], #2
 80050f2:	bfb4      	ite	lt
 80050f4:	222d      	movlt	r2, #45	; 0x2d
 80050f6:	222b      	movge	r2, #43	; 0x2b
 80050f8:	2909      	cmp	r1, #9
 80050fa:	7042      	strb	r2, [r0, #1]
 80050fc:	dd2a      	ble.n	8005154 <__exponent+0x70>
 80050fe:	f10d 0407 	add.w	r4, sp, #7
 8005102:	46a4      	mov	ip, r4
 8005104:	270a      	movs	r7, #10
 8005106:	46a6      	mov	lr, r4
 8005108:	460a      	mov	r2, r1
 800510a:	fb91 f6f7 	sdiv	r6, r1, r7
 800510e:	fb07 1516 	mls	r5, r7, r6, r1
 8005112:	3530      	adds	r5, #48	; 0x30
 8005114:	2a63      	cmp	r2, #99	; 0x63
 8005116:	f104 34ff 	add.w	r4, r4, #4294967295
 800511a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800511e:	4631      	mov	r1, r6
 8005120:	dcf1      	bgt.n	8005106 <__exponent+0x22>
 8005122:	3130      	adds	r1, #48	; 0x30
 8005124:	f1ae 0502 	sub.w	r5, lr, #2
 8005128:	f804 1c01 	strb.w	r1, [r4, #-1]
 800512c:	1c44      	adds	r4, r0, #1
 800512e:	4629      	mov	r1, r5
 8005130:	4561      	cmp	r1, ip
 8005132:	d30a      	bcc.n	800514a <__exponent+0x66>
 8005134:	f10d 0209 	add.w	r2, sp, #9
 8005138:	eba2 020e 	sub.w	r2, r2, lr
 800513c:	4565      	cmp	r5, ip
 800513e:	bf88      	it	hi
 8005140:	2200      	movhi	r2, #0
 8005142:	4413      	add	r3, r2
 8005144:	1a18      	subs	r0, r3, r0
 8005146:	b003      	add	sp, #12
 8005148:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800514a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800514e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005152:	e7ed      	b.n	8005130 <__exponent+0x4c>
 8005154:	2330      	movs	r3, #48	; 0x30
 8005156:	3130      	adds	r1, #48	; 0x30
 8005158:	7083      	strb	r3, [r0, #2]
 800515a:	70c1      	strb	r1, [r0, #3]
 800515c:	1d03      	adds	r3, r0, #4
 800515e:	e7f1      	b.n	8005144 <__exponent+0x60>

08005160 <_printf_float>:
 8005160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005164:	ed2d 8b02 	vpush	{d8}
 8005168:	b08d      	sub	sp, #52	; 0x34
 800516a:	460c      	mov	r4, r1
 800516c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005170:	4616      	mov	r6, r2
 8005172:	461f      	mov	r7, r3
 8005174:	4605      	mov	r5, r0
 8005176:	f001 fa69 	bl	800664c <_localeconv_r>
 800517a:	f8d0 a000 	ldr.w	sl, [r0]
 800517e:	4650      	mov	r0, sl
 8005180:	f7fb f82e 	bl	80001e0 <strlen>
 8005184:	2300      	movs	r3, #0
 8005186:	930a      	str	r3, [sp, #40]	; 0x28
 8005188:	6823      	ldr	r3, [r4, #0]
 800518a:	9305      	str	r3, [sp, #20]
 800518c:	f8d8 3000 	ldr.w	r3, [r8]
 8005190:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005194:	3307      	adds	r3, #7
 8005196:	f023 0307 	bic.w	r3, r3, #7
 800519a:	f103 0208 	add.w	r2, r3, #8
 800519e:	f8c8 2000 	str.w	r2, [r8]
 80051a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051a6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80051aa:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80051ae:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80051b2:	9307      	str	r3, [sp, #28]
 80051b4:	f8cd 8018 	str.w	r8, [sp, #24]
 80051b8:	ee08 0a10 	vmov	s16, r0
 80051bc:	4b9f      	ldr	r3, [pc, #636]	; (800543c <_printf_float+0x2dc>)
 80051be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80051c2:	f04f 32ff 	mov.w	r2, #4294967295
 80051c6:	f7fb fcb9 	bl	8000b3c <__aeabi_dcmpun>
 80051ca:	bb88      	cbnz	r0, 8005230 <_printf_float+0xd0>
 80051cc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80051d0:	4b9a      	ldr	r3, [pc, #616]	; (800543c <_printf_float+0x2dc>)
 80051d2:	f04f 32ff 	mov.w	r2, #4294967295
 80051d6:	f7fb fc93 	bl	8000b00 <__aeabi_dcmple>
 80051da:	bb48      	cbnz	r0, 8005230 <_printf_float+0xd0>
 80051dc:	2200      	movs	r2, #0
 80051de:	2300      	movs	r3, #0
 80051e0:	4640      	mov	r0, r8
 80051e2:	4649      	mov	r1, r9
 80051e4:	f7fb fc82 	bl	8000aec <__aeabi_dcmplt>
 80051e8:	b110      	cbz	r0, 80051f0 <_printf_float+0x90>
 80051ea:	232d      	movs	r3, #45	; 0x2d
 80051ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80051f0:	4b93      	ldr	r3, [pc, #588]	; (8005440 <_printf_float+0x2e0>)
 80051f2:	4894      	ldr	r0, [pc, #592]	; (8005444 <_printf_float+0x2e4>)
 80051f4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80051f8:	bf94      	ite	ls
 80051fa:	4698      	movls	r8, r3
 80051fc:	4680      	movhi	r8, r0
 80051fe:	2303      	movs	r3, #3
 8005200:	6123      	str	r3, [r4, #16]
 8005202:	9b05      	ldr	r3, [sp, #20]
 8005204:	f023 0204 	bic.w	r2, r3, #4
 8005208:	6022      	str	r2, [r4, #0]
 800520a:	f04f 0900 	mov.w	r9, #0
 800520e:	9700      	str	r7, [sp, #0]
 8005210:	4633      	mov	r3, r6
 8005212:	aa0b      	add	r2, sp, #44	; 0x2c
 8005214:	4621      	mov	r1, r4
 8005216:	4628      	mov	r0, r5
 8005218:	f000 f9d8 	bl	80055cc <_printf_common>
 800521c:	3001      	adds	r0, #1
 800521e:	f040 8090 	bne.w	8005342 <_printf_float+0x1e2>
 8005222:	f04f 30ff 	mov.w	r0, #4294967295
 8005226:	b00d      	add	sp, #52	; 0x34
 8005228:	ecbd 8b02 	vpop	{d8}
 800522c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005230:	4642      	mov	r2, r8
 8005232:	464b      	mov	r3, r9
 8005234:	4640      	mov	r0, r8
 8005236:	4649      	mov	r1, r9
 8005238:	f7fb fc80 	bl	8000b3c <__aeabi_dcmpun>
 800523c:	b140      	cbz	r0, 8005250 <_printf_float+0xf0>
 800523e:	464b      	mov	r3, r9
 8005240:	2b00      	cmp	r3, #0
 8005242:	bfbc      	itt	lt
 8005244:	232d      	movlt	r3, #45	; 0x2d
 8005246:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800524a:	487f      	ldr	r0, [pc, #508]	; (8005448 <_printf_float+0x2e8>)
 800524c:	4b7f      	ldr	r3, [pc, #508]	; (800544c <_printf_float+0x2ec>)
 800524e:	e7d1      	b.n	80051f4 <_printf_float+0x94>
 8005250:	6863      	ldr	r3, [r4, #4]
 8005252:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005256:	9206      	str	r2, [sp, #24]
 8005258:	1c5a      	adds	r2, r3, #1
 800525a:	d13f      	bne.n	80052dc <_printf_float+0x17c>
 800525c:	2306      	movs	r3, #6
 800525e:	6063      	str	r3, [r4, #4]
 8005260:	9b05      	ldr	r3, [sp, #20]
 8005262:	6861      	ldr	r1, [r4, #4]
 8005264:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005268:	2300      	movs	r3, #0
 800526a:	9303      	str	r3, [sp, #12]
 800526c:	ab0a      	add	r3, sp, #40	; 0x28
 800526e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005272:	ab09      	add	r3, sp, #36	; 0x24
 8005274:	ec49 8b10 	vmov	d0, r8, r9
 8005278:	9300      	str	r3, [sp, #0]
 800527a:	6022      	str	r2, [r4, #0]
 800527c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005280:	4628      	mov	r0, r5
 8005282:	f7ff fecd 	bl	8005020 <__cvt>
 8005286:	9b06      	ldr	r3, [sp, #24]
 8005288:	9909      	ldr	r1, [sp, #36]	; 0x24
 800528a:	2b47      	cmp	r3, #71	; 0x47
 800528c:	4680      	mov	r8, r0
 800528e:	d108      	bne.n	80052a2 <_printf_float+0x142>
 8005290:	1cc8      	adds	r0, r1, #3
 8005292:	db02      	blt.n	800529a <_printf_float+0x13a>
 8005294:	6863      	ldr	r3, [r4, #4]
 8005296:	4299      	cmp	r1, r3
 8005298:	dd41      	ble.n	800531e <_printf_float+0x1be>
 800529a:	f1ab 0b02 	sub.w	fp, fp, #2
 800529e:	fa5f fb8b 	uxtb.w	fp, fp
 80052a2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80052a6:	d820      	bhi.n	80052ea <_printf_float+0x18a>
 80052a8:	3901      	subs	r1, #1
 80052aa:	465a      	mov	r2, fp
 80052ac:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80052b0:	9109      	str	r1, [sp, #36]	; 0x24
 80052b2:	f7ff ff17 	bl	80050e4 <__exponent>
 80052b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80052b8:	1813      	adds	r3, r2, r0
 80052ba:	2a01      	cmp	r2, #1
 80052bc:	4681      	mov	r9, r0
 80052be:	6123      	str	r3, [r4, #16]
 80052c0:	dc02      	bgt.n	80052c8 <_printf_float+0x168>
 80052c2:	6822      	ldr	r2, [r4, #0]
 80052c4:	07d2      	lsls	r2, r2, #31
 80052c6:	d501      	bpl.n	80052cc <_printf_float+0x16c>
 80052c8:	3301      	adds	r3, #1
 80052ca:	6123      	str	r3, [r4, #16]
 80052cc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d09c      	beq.n	800520e <_printf_float+0xae>
 80052d4:	232d      	movs	r3, #45	; 0x2d
 80052d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80052da:	e798      	b.n	800520e <_printf_float+0xae>
 80052dc:	9a06      	ldr	r2, [sp, #24]
 80052de:	2a47      	cmp	r2, #71	; 0x47
 80052e0:	d1be      	bne.n	8005260 <_printf_float+0x100>
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d1bc      	bne.n	8005260 <_printf_float+0x100>
 80052e6:	2301      	movs	r3, #1
 80052e8:	e7b9      	b.n	800525e <_printf_float+0xfe>
 80052ea:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80052ee:	d118      	bne.n	8005322 <_printf_float+0x1c2>
 80052f0:	2900      	cmp	r1, #0
 80052f2:	6863      	ldr	r3, [r4, #4]
 80052f4:	dd0b      	ble.n	800530e <_printf_float+0x1ae>
 80052f6:	6121      	str	r1, [r4, #16]
 80052f8:	b913      	cbnz	r3, 8005300 <_printf_float+0x1a0>
 80052fa:	6822      	ldr	r2, [r4, #0]
 80052fc:	07d0      	lsls	r0, r2, #31
 80052fe:	d502      	bpl.n	8005306 <_printf_float+0x1a6>
 8005300:	3301      	adds	r3, #1
 8005302:	440b      	add	r3, r1
 8005304:	6123      	str	r3, [r4, #16]
 8005306:	65a1      	str	r1, [r4, #88]	; 0x58
 8005308:	f04f 0900 	mov.w	r9, #0
 800530c:	e7de      	b.n	80052cc <_printf_float+0x16c>
 800530e:	b913      	cbnz	r3, 8005316 <_printf_float+0x1b6>
 8005310:	6822      	ldr	r2, [r4, #0]
 8005312:	07d2      	lsls	r2, r2, #31
 8005314:	d501      	bpl.n	800531a <_printf_float+0x1ba>
 8005316:	3302      	adds	r3, #2
 8005318:	e7f4      	b.n	8005304 <_printf_float+0x1a4>
 800531a:	2301      	movs	r3, #1
 800531c:	e7f2      	b.n	8005304 <_printf_float+0x1a4>
 800531e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005322:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005324:	4299      	cmp	r1, r3
 8005326:	db05      	blt.n	8005334 <_printf_float+0x1d4>
 8005328:	6823      	ldr	r3, [r4, #0]
 800532a:	6121      	str	r1, [r4, #16]
 800532c:	07d8      	lsls	r0, r3, #31
 800532e:	d5ea      	bpl.n	8005306 <_printf_float+0x1a6>
 8005330:	1c4b      	adds	r3, r1, #1
 8005332:	e7e7      	b.n	8005304 <_printf_float+0x1a4>
 8005334:	2900      	cmp	r1, #0
 8005336:	bfd4      	ite	le
 8005338:	f1c1 0202 	rsble	r2, r1, #2
 800533c:	2201      	movgt	r2, #1
 800533e:	4413      	add	r3, r2
 8005340:	e7e0      	b.n	8005304 <_printf_float+0x1a4>
 8005342:	6823      	ldr	r3, [r4, #0]
 8005344:	055a      	lsls	r2, r3, #21
 8005346:	d407      	bmi.n	8005358 <_printf_float+0x1f8>
 8005348:	6923      	ldr	r3, [r4, #16]
 800534a:	4642      	mov	r2, r8
 800534c:	4631      	mov	r1, r6
 800534e:	4628      	mov	r0, r5
 8005350:	47b8      	blx	r7
 8005352:	3001      	adds	r0, #1
 8005354:	d12c      	bne.n	80053b0 <_printf_float+0x250>
 8005356:	e764      	b.n	8005222 <_printf_float+0xc2>
 8005358:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800535c:	f240 80e0 	bls.w	8005520 <_printf_float+0x3c0>
 8005360:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005364:	2200      	movs	r2, #0
 8005366:	2300      	movs	r3, #0
 8005368:	f7fb fbb6 	bl	8000ad8 <__aeabi_dcmpeq>
 800536c:	2800      	cmp	r0, #0
 800536e:	d034      	beq.n	80053da <_printf_float+0x27a>
 8005370:	4a37      	ldr	r2, [pc, #220]	; (8005450 <_printf_float+0x2f0>)
 8005372:	2301      	movs	r3, #1
 8005374:	4631      	mov	r1, r6
 8005376:	4628      	mov	r0, r5
 8005378:	47b8      	blx	r7
 800537a:	3001      	adds	r0, #1
 800537c:	f43f af51 	beq.w	8005222 <_printf_float+0xc2>
 8005380:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005384:	429a      	cmp	r2, r3
 8005386:	db02      	blt.n	800538e <_printf_float+0x22e>
 8005388:	6823      	ldr	r3, [r4, #0]
 800538a:	07d8      	lsls	r0, r3, #31
 800538c:	d510      	bpl.n	80053b0 <_printf_float+0x250>
 800538e:	ee18 3a10 	vmov	r3, s16
 8005392:	4652      	mov	r2, sl
 8005394:	4631      	mov	r1, r6
 8005396:	4628      	mov	r0, r5
 8005398:	47b8      	blx	r7
 800539a:	3001      	adds	r0, #1
 800539c:	f43f af41 	beq.w	8005222 <_printf_float+0xc2>
 80053a0:	f04f 0800 	mov.w	r8, #0
 80053a4:	f104 091a 	add.w	r9, r4, #26
 80053a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80053aa:	3b01      	subs	r3, #1
 80053ac:	4543      	cmp	r3, r8
 80053ae:	dc09      	bgt.n	80053c4 <_printf_float+0x264>
 80053b0:	6823      	ldr	r3, [r4, #0]
 80053b2:	079b      	lsls	r3, r3, #30
 80053b4:	f100 8105 	bmi.w	80055c2 <_printf_float+0x462>
 80053b8:	68e0      	ldr	r0, [r4, #12]
 80053ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80053bc:	4298      	cmp	r0, r3
 80053be:	bfb8      	it	lt
 80053c0:	4618      	movlt	r0, r3
 80053c2:	e730      	b.n	8005226 <_printf_float+0xc6>
 80053c4:	2301      	movs	r3, #1
 80053c6:	464a      	mov	r2, r9
 80053c8:	4631      	mov	r1, r6
 80053ca:	4628      	mov	r0, r5
 80053cc:	47b8      	blx	r7
 80053ce:	3001      	adds	r0, #1
 80053d0:	f43f af27 	beq.w	8005222 <_printf_float+0xc2>
 80053d4:	f108 0801 	add.w	r8, r8, #1
 80053d8:	e7e6      	b.n	80053a8 <_printf_float+0x248>
 80053da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053dc:	2b00      	cmp	r3, #0
 80053de:	dc39      	bgt.n	8005454 <_printf_float+0x2f4>
 80053e0:	4a1b      	ldr	r2, [pc, #108]	; (8005450 <_printf_float+0x2f0>)
 80053e2:	2301      	movs	r3, #1
 80053e4:	4631      	mov	r1, r6
 80053e6:	4628      	mov	r0, r5
 80053e8:	47b8      	blx	r7
 80053ea:	3001      	adds	r0, #1
 80053ec:	f43f af19 	beq.w	8005222 <_printf_float+0xc2>
 80053f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80053f4:	4313      	orrs	r3, r2
 80053f6:	d102      	bne.n	80053fe <_printf_float+0x29e>
 80053f8:	6823      	ldr	r3, [r4, #0]
 80053fa:	07d9      	lsls	r1, r3, #31
 80053fc:	d5d8      	bpl.n	80053b0 <_printf_float+0x250>
 80053fe:	ee18 3a10 	vmov	r3, s16
 8005402:	4652      	mov	r2, sl
 8005404:	4631      	mov	r1, r6
 8005406:	4628      	mov	r0, r5
 8005408:	47b8      	blx	r7
 800540a:	3001      	adds	r0, #1
 800540c:	f43f af09 	beq.w	8005222 <_printf_float+0xc2>
 8005410:	f04f 0900 	mov.w	r9, #0
 8005414:	f104 0a1a 	add.w	sl, r4, #26
 8005418:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800541a:	425b      	negs	r3, r3
 800541c:	454b      	cmp	r3, r9
 800541e:	dc01      	bgt.n	8005424 <_printf_float+0x2c4>
 8005420:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005422:	e792      	b.n	800534a <_printf_float+0x1ea>
 8005424:	2301      	movs	r3, #1
 8005426:	4652      	mov	r2, sl
 8005428:	4631      	mov	r1, r6
 800542a:	4628      	mov	r0, r5
 800542c:	47b8      	blx	r7
 800542e:	3001      	adds	r0, #1
 8005430:	f43f aef7 	beq.w	8005222 <_printf_float+0xc2>
 8005434:	f109 0901 	add.w	r9, r9, #1
 8005438:	e7ee      	b.n	8005418 <_printf_float+0x2b8>
 800543a:	bf00      	nop
 800543c:	7fefffff 	.word	0x7fefffff
 8005440:	0800817c 	.word	0x0800817c
 8005444:	08008180 	.word	0x08008180
 8005448:	08008188 	.word	0x08008188
 800544c:	08008184 	.word	0x08008184
 8005450:	0800818c 	.word	0x0800818c
 8005454:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005456:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005458:	429a      	cmp	r2, r3
 800545a:	bfa8      	it	ge
 800545c:	461a      	movge	r2, r3
 800545e:	2a00      	cmp	r2, #0
 8005460:	4691      	mov	r9, r2
 8005462:	dc37      	bgt.n	80054d4 <_printf_float+0x374>
 8005464:	f04f 0b00 	mov.w	fp, #0
 8005468:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800546c:	f104 021a 	add.w	r2, r4, #26
 8005470:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005472:	9305      	str	r3, [sp, #20]
 8005474:	eba3 0309 	sub.w	r3, r3, r9
 8005478:	455b      	cmp	r3, fp
 800547a:	dc33      	bgt.n	80054e4 <_printf_float+0x384>
 800547c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005480:	429a      	cmp	r2, r3
 8005482:	db3b      	blt.n	80054fc <_printf_float+0x39c>
 8005484:	6823      	ldr	r3, [r4, #0]
 8005486:	07da      	lsls	r2, r3, #31
 8005488:	d438      	bmi.n	80054fc <_printf_float+0x39c>
 800548a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800548c:	9a05      	ldr	r2, [sp, #20]
 800548e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005490:	1a9a      	subs	r2, r3, r2
 8005492:	eba3 0901 	sub.w	r9, r3, r1
 8005496:	4591      	cmp	r9, r2
 8005498:	bfa8      	it	ge
 800549a:	4691      	movge	r9, r2
 800549c:	f1b9 0f00 	cmp.w	r9, #0
 80054a0:	dc35      	bgt.n	800550e <_printf_float+0x3ae>
 80054a2:	f04f 0800 	mov.w	r8, #0
 80054a6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80054aa:	f104 0a1a 	add.w	sl, r4, #26
 80054ae:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80054b2:	1a9b      	subs	r3, r3, r2
 80054b4:	eba3 0309 	sub.w	r3, r3, r9
 80054b8:	4543      	cmp	r3, r8
 80054ba:	f77f af79 	ble.w	80053b0 <_printf_float+0x250>
 80054be:	2301      	movs	r3, #1
 80054c0:	4652      	mov	r2, sl
 80054c2:	4631      	mov	r1, r6
 80054c4:	4628      	mov	r0, r5
 80054c6:	47b8      	blx	r7
 80054c8:	3001      	adds	r0, #1
 80054ca:	f43f aeaa 	beq.w	8005222 <_printf_float+0xc2>
 80054ce:	f108 0801 	add.w	r8, r8, #1
 80054d2:	e7ec      	b.n	80054ae <_printf_float+0x34e>
 80054d4:	4613      	mov	r3, r2
 80054d6:	4631      	mov	r1, r6
 80054d8:	4642      	mov	r2, r8
 80054da:	4628      	mov	r0, r5
 80054dc:	47b8      	blx	r7
 80054de:	3001      	adds	r0, #1
 80054e0:	d1c0      	bne.n	8005464 <_printf_float+0x304>
 80054e2:	e69e      	b.n	8005222 <_printf_float+0xc2>
 80054e4:	2301      	movs	r3, #1
 80054e6:	4631      	mov	r1, r6
 80054e8:	4628      	mov	r0, r5
 80054ea:	9205      	str	r2, [sp, #20]
 80054ec:	47b8      	blx	r7
 80054ee:	3001      	adds	r0, #1
 80054f0:	f43f ae97 	beq.w	8005222 <_printf_float+0xc2>
 80054f4:	9a05      	ldr	r2, [sp, #20]
 80054f6:	f10b 0b01 	add.w	fp, fp, #1
 80054fa:	e7b9      	b.n	8005470 <_printf_float+0x310>
 80054fc:	ee18 3a10 	vmov	r3, s16
 8005500:	4652      	mov	r2, sl
 8005502:	4631      	mov	r1, r6
 8005504:	4628      	mov	r0, r5
 8005506:	47b8      	blx	r7
 8005508:	3001      	adds	r0, #1
 800550a:	d1be      	bne.n	800548a <_printf_float+0x32a>
 800550c:	e689      	b.n	8005222 <_printf_float+0xc2>
 800550e:	9a05      	ldr	r2, [sp, #20]
 8005510:	464b      	mov	r3, r9
 8005512:	4442      	add	r2, r8
 8005514:	4631      	mov	r1, r6
 8005516:	4628      	mov	r0, r5
 8005518:	47b8      	blx	r7
 800551a:	3001      	adds	r0, #1
 800551c:	d1c1      	bne.n	80054a2 <_printf_float+0x342>
 800551e:	e680      	b.n	8005222 <_printf_float+0xc2>
 8005520:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005522:	2a01      	cmp	r2, #1
 8005524:	dc01      	bgt.n	800552a <_printf_float+0x3ca>
 8005526:	07db      	lsls	r3, r3, #31
 8005528:	d538      	bpl.n	800559c <_printf_float+0x43c>
 800552a:	2301      	movs	r3, #1
 800552c:	4642      	mov	r2, r8
 800552e:	4631      	mov	r1, r6
 8005530:	4628      	mov	r0, r5
 8005532:	47b8      	blx	r7
 8005534:	3001      	adds	r0, #1
 8005536:	f43f ae74 	beq.w	8005222 <_printf_float+0xc2>
 800553a:	ee18 3a10 	vmov	r3, s16
 800553e:	4652      	mov	r2, sl
 8005540:	4631      	mov	r1, r6
 8005542:	4628      	mov	r0, r5
 8005544:	47b8      	blx	r7
 8005546:	3001      	adds	r0, #1
 8005548:	f43f ae6b 	beq.w	8005222 <_printf_float+0xc2>
 800554c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005550:	2200      	movs	r2, #0
 8005552:	2300      	movs	r3, #0
 8005554:	f7fb fac0 	bl	8000ad8 <__aeabi_dcmpeq>
 8005558:	b9d8      	cbnz	r0, 8005592 <_printf_float+0x432>
 800555a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800555c:	f108 0201 	add.w	r2, r8, #1
 8005560:	3b01      	subs	r3, #1
 8005562:	4631      	mov	r1, r6
 8005564:	4628      	mov	r0, r5
 8005566:	47b8      	blx	r7
 8005568:	3001      	adds	r0, #1
 800556a:	d10e      	bne.n	800558a <_printf_float+0x42a>
 800556c:	e659      	b.n	8005222 <_printf_float+0xc2>
 800556e:	2301      	movs	r3, #1
 8005570:	4652      	mov	r2, sl
 8005572:	4631      	mov	r1, r6
 8005574:	4628      	mov	r0, r5
 8005576:	47b8      	blx	r7
 8005578:	3001      	adds	r0, #1
 800557a:	f43f ae52 	beq.w	8005222 <_printf_float+0xc2>
 800557e:	f108 0801 	add.w	r8, r8, #1
 8005582:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005584:	3b01      	subs	r3, #1
 8005586:	4543      	cmp	r3, r8
 8005588:	dcf1      	bgt.n	800556e <_printf_float+0x40e>
 800558a:	464b      	mov	r3, r9
 800558c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005590:	e6dc      	b.n	800534c <_printf_float+0x1ec>
 8005592:	f04f 0800 	mov.w	r8, #0
 8005596:	f104 0a1a 	add.w	sl, r4, #26
 800559a:	e7f2      	b.n	8005582 <_printf_float+0x422>
 800559c:	2301      	movs	r3, #1
 800559e:	4642      	mov	r2, r8
 80055a0:	e7df      	b.n	8005562 <_printf_float+0x402>
 80055a2:	2301      	movs	r3, #1
 80055a4:	464a      	mov	r2, r9
 80055a6:	4631      	mov	r1, r6
 80055a8:	4628      	mov	r0, r5
 80055aa:	47b8      	blx	r7
 80055ac:	3001      	adds	r0, #1
 80055ae:	f43f ae38 	beq.w	8005222 <_printf_float+0xc2>
 80055b2:	f108 0801 	add.w	r8, r8, #1
 80055b6:	68e3      	ldr	r3, [r4, #12]
 80055b8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80055ba:	1a5b      	subs	r3, r3, r1
 80055bc:	4543      	cmp	r3, r8
 80055be:	dcf0      	bgt.n	80055a2 <_printf_float+0x442>
 80055c0:	e6fa      	b.n	80053b8 <_printf_float+0x258>
 80055c2:	f04f 0800 	mov.w	r8, #0
 80055c6:	f104 0919 	add.w	r9, r4, #25
 80055ca:	e7f4      	b.n	80055b6 <_printf_float+0x456>

080055cc <_printf_common>:
 80055cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055d0:	4616      	mov	r6, r2
 80055d2:	4699      	mov	r9, r3
 80055d4:	688a      	ldr	r2, [r1, #8]
 80055d6:	690b      	ldr	r3, [r1, #16]
 80055d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80055dc:	4293      	cmp	r3, r2
 80055de:	bfb8      	it	lt
 80055e0:	4613      	movlt	r3, r2
 80055e2:	6033      	str	r3, [r6, #0]
 80055e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80055e8:	4607      	mov	r7, r0
 80055ea:	460c      	mov	r4, r1
 80055ec:	b10a      	cbz	r2, 80055f2 <_printf_common+0x26>
 80055ee:	3301      	adds	r3, #1
 80055f0:	6033      	str	r3, [r6, #0]
 80055f2:	6823      	ldr	r3, [r4, #0]
 80055f4:	0699      	lsls	r1, r3, #26
 80055f6:	bf42      	ittt	mi
 80055f8:	6833      	ldrmi	r3, [r6, #0]
 80055fa:	3302      	addmi	r3, #2
 80055fc:	6033      	strmi	r3, [r6, #0]
 80055fe:	6825      	ldr	r5, [r4, #0]
 8005600:	f015 0506 	ands.w	r5, r5, #6
 8005604:	d106      	bne.n	8005614 <_printf_common+0x48>
 8005606:	f104 0a19 	add.w	sl, r4, #25
 800560a:	68e3      	ldr	r3, [r4, #12]
 800560c:	6832      	ldr	r2, [r6, #0]
 800560e:	1a9b      	subs	r3, r3, r2
 8005610:	42ab      	cmp	r3, r5
 8005612:	dc26      	bgt.n	8005662 <_printf_common+0x96>
 8005614:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005618:	1e13      	subs	r3, r2, #0
 800561a:	6822      	ldr	r2, [r4, #0]
 800561c:	bf18      	it	ne
 800561e:	2301      	movne	r3, #1
 8005620:	0692      	lsls	r2, r2, #26
 8005622:	d42b      	bmi.n	800567c <_printf_common+0xb0>
 8005624:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005628:	4649      	mov	r1, r9
 800562a:	4638      	mov	r0, r7
 800562c:	47c0      	blx	r8
 800562e:	3001      	adds	r0, #1
 8005630:	d01e      	beq.n	8005670 <_printf_common+0xa4>
 8005632:	6823      	ldr	r3, [r4, #0]
 8005634:	68e5      	ldr	r5, [r4, #12]
 8005636:	6832      	ldr	r2, [r6, #0]
 8005638:	f003 0306 	and.w	r3, r3, #6
 800563c:	2b04      	cmp	r3, #4
 800563e:	bf08      	it	eq
 8005640:	1aad      	subeq	r5, r5, r2
 8005642:	68a3      	ldr	r3, [r4, #8]
 8005644:	6922      	ldr	r2, [r4, #16]
 8005646:	bf0c      	ite	eq
 8005648:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800564c:	2500      	movne	r5, #0
 800564e:	4293      	cmp	r3, r2
 8005650:	bfc4      	itt	gt
 8005652:	1a9b      	subgt	r3, r3, r2
 8005654:	18ed      	addgt	r5, r5, r3
 8005656:	2600      	movs	r6, #0
 8005658:	341a      	adds	r4, #26
 800565a:	42b5      	cmp	r5, r6
 800565c:	d11a      	bne.n	8005694 <_printf_common+0xc8>
 800565e:	2000      	movs	r0, #0
 8005660:	e008      	b.n	8005674 <_printf_common+0xa8>
 8005662:	2301      	movs	r3, #1
 8005664:	4652      	mov	r2, sl
 8005666:	4649      	mov	r1, r9
 8005668:	4638      	mov	r0, r7
 800566a:	47c0      	blx	r8
 800566c:	3001      	adds	r0, #1
 800566e:	d103      	bne.n	8005678 <_printf_common+0xac>
 8005670:	f04f 30ff 	mov.w	r0, #4294967295
 8005674:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005678:	3501      	adds	r5, #1
 800567a:	e7c6      	b.n	800560a <_printf_common+0x3e>
 800567c:	18e1      	adds	r1, r4, r3
 800567e:	1c5a      	adds	r2, r3, #1
 8005680:	2030      	movs	r0, #48	; 0x30
 8005682:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005686:	4422      	add	r2, r4
 8005688:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800568c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005690:	3302      	adds	r3, #2
 8005692:	e7c7      	b.n	8005624 <_printf_common+0x58>
 8005694:	2301      	movs	r3, #1
 8005696:	4622      	mov	r2, r4
 8005698:	4649      	mov	r1, r9
 800569a:	4638      	mov	r0, r7
 800569c:	47c0      	blx	r8
 800569e:	3001      	adds	r0, #1
 80056a0:	d0e6      	beq.n	8005670 <_printf_common+0xa4>
 80056a2:	3601      	adds	r6, #1
 80056a4:	e7d9      	b.n	800565a <_printf_common+0x8e>
	...

080056a8 <_printf_i>:
 80056a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80056ac:	7e0f      	ldrb	r7, [r1, #24]
 80056ae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80056b0:	2f78      	cmp	r7, #120	; 0x78
 80056b2:	4691      	mov	r9, r2
 80056b4:	4680      	mov	r8, r0
 80056b6:	460c      	mov	r4, r1
 80056b8:	469a      	mov	sl, r3
 80056ba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80056be:	d807      	bhi.n	80056d0 <_printf_i+0x28>
 80056c0:	2f62      	cmp	r7, #98	; 0x62
 80056c2:	d80a      	bhi.n	80056da <_printf_i+0x32>
 80056c4:	2f00      	cmp	r7, #0
 80056c6:	f000 80d8 	beq.w	800587a <_printf_i+0x1d2>
 80056ca:	2f58      	cmp	r7, #88	; 0x58
 80056cc:	f000 80a3 	beq.w	8005816 <_printf_i+0x16e>
 80056d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80056d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80056d8:	e03a      	b.n	8005750 <_printf_i+0xa8>
 80056da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80056de:	2b15      	cmp	r3, #21
 80056e0:	d8f6      	bhi.n	80056d0 <_printf_i+0x28>
 80056e2:	a101      	add	r1, pc, #4	; (adr r1, 80056e8 <_printf_i+0x40>)
 80056e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80056e8:	08005741 	.word	0x08005741
 80056ec:	08005755 	.word	0x08005755
 80056f0:	080056d1 	.word	0x080056d1
 80056f4:	080056d1 	.word	0x080056d1
 80056f8:	080056d1 	.word	0x080056d1
 80056fc:	080056d1 	.word	0x080056d1
 8005700:	08005755 	.word	0x08005755
 8005704:	080056d1 	.word	0x080056d1
 8005708:	080056d1 	.word	0x080056d1
 800570c:	080056d1 	.word	0x080056d1
 8005710:	080056d1 	.word	0x080056d1
 8005714:	08005861 	.word	0x08005861
 8005718:	08005785 	.word	0x08005785
 800571c:	08005843 	.word	0x08005843
 8005720:	080056d1 	.word	0x080056d1
 8005724:	080056d1 	.word	0x080056d1
 8005728:	08005883 	.word	0x08005883
 800572c:	080056d1 	.word	0x080056d1
 8005730:	08005785 	.word	0x08005785
 8005734:	080056d1 	.word	0x080056d1
 8005738:	080056d1 	.word	0x080056d1
 800573c:	0800584b 	.word	0x0800584b
 8005740:	682b      	ldr	r3, [r5, #0]
 8005742:	1d1a      	adds	r2, r3, #4
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	602a      	str	r2, [r5, #0]
 8005748:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800574c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005750:	2301      	movs	r3, #1
 8005752:	e0a3      	b.n	800589c <_printf_i+0x1f4>
 8005754:	6820      	ldr	r0, [r4, #0]
 8005756:	6829      	ldr	r1, [r5, #0]
 8005758:	0606      	lsls	r6, r0, #24
 800575a:	f101 0304 	add.w	r3, r1, #4
 800575e:	d50a      	bpl.n	8005776 <_printf_i+0xce>
 8005760:	680e      	ldr	r6, [r1, #0]
 8005762:	602b      	str	r3, [r5, #0]
 8005764:	2e00      	cmp	r6, #0
 8005766:	da03      	bge.n	8005770 <_printf_i+0xc8>
 8005768:	232d      	movs	r3, #45	; 0x2d
 800576a:	4276      	negs	r6, r6
 800576c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005770:	485e      	ldr	r0, [pc, #376]	; (80058ec <_printf_i+0x244>)
 8005772:	230a      	movs	r3, #10
 8005774:	e019      	b.n	80057aa <_printf_i+0x102>
 8005776:	680e      	ldr	r6, [r1, #0]
 8005778:	602b      	str	r3, [r5, #0]
 800577a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800577e:	bf18      	it	ne
 8005780:	b236      	sxthne	r6, r6
 8005782:	e7ef      	b.n	8005764 <_printf_i+0xbc>
 8005784:	682b      	ldr	r3, [r5, #0]
 8005786:	6820      	ldr	r0, [r4, #0]
 8005788:	1d19      	adds	r1, r3, #4
 800578a:	6029      	str	r1, [r5, #0]
 800578c:	0601      	lsls	r1, r0, #24
 800578e:	d501      	bpl.n	8005794 <_printf_i+0xec>
 8005790:	681e      	ldr	r6, [r3, #0]
 8005792:	e002      	b.n	800579a <_printf_i+0xf2>
 8005794:	0646      	lsls	r6, r0, #25
 8005796:	d5fb      	bpl.n	8005790 <_printf_i+0xe8>
 8005798:	881e      	ldrh	r6, [r3, #0]
 800579a:	4854      	ldr	r0, [pc, #336]	; (80058ec <_printf_i+0x244>)
 800579c:	2f6f      	cmp	r7, #111	; 0x6f
 800579e:	bf0c      	ite	eq
 80057a0:	2308      	moveq	r3, #8
 80057a2:	230a      	movne	r3, #10
 80057a4:	2100      	movs	r1, #0
 80057a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80057aa:	6865      	ldr	r5, [r4, #4]
 80057ac:	60a5      	str	r5, [r4, #8]
 80057ae:	2d00      	cmp	r5, #0
 80057b0:	bfa2      	ittt	ge
 80057b2:	6821      	ldrge	r1, [r4, #0]
 80057b4:	f021 0104 	bicge.w	r1, r1, #4
 80057b8:	6021      	strge	r1, [r4, #0]
 80057ba:	b90e      	cbnz	r6, 80057c0 <_printf_i+0x118>
 80057bc:	2d00      	cmp	r5, #0
 80057be:	d04d      	beq.n	800585c <_printf_i+0x1b4>
 80057c0:	4615      	mov	r5, r2
 80057c2:	fbb6 f1f3 	udiv	r1, r6, r3
 80057c6:	fb03 6711 	mls	r7, r3, r1, r6
 80057ca:	5dc7      	ldrb	r7, [r0, r7]
 80057cc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80057d0:	4637      	mov	r7, r6
 80057d2:	42bb      	cmp	r3, r7
 80057d4:	460e      	mov	r6, r1
 80057d6:	d9f4      	bls.n	80057c2 <_printf_i+0x11a>
 80057d8:	2b08      	cmp	r3, #8
 80057da:	d10b      	bne.n	80057f4 <_printf_i+0x14c>
 80057dc:	6823      	ldr	r3, [r4, #0]
 80057de:	07de      	lsls	r6, r3, #31
 80057e0:	d508      	bpl.n	80057f4 <_printf_i+0x14c>
 80057e2:	6923      	ldr	r3, [r4, #16]
 80057e4:	6861      	ldr	r1, [r4, #4]
 80057e6:	4299      	cmp	r1, r3
 80057e8:	bfde      	ittt	le
 80057ea:	2330      	movle	r3, #48	; 0x30
 80057ec:	f805 3c01 	strble.w	r3, [r5, #-1]
 80057f0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80057f4:	1b52      	subs	r2, r2, r5
 80057f6:	6122      	str	r2, [r4, #16]
 80057f8:	f8cd a000 	str.w	sl, [sp]
 80057fc:	464b      	mov	r3, r9
 80057fe:	aa03      	add	r2, sp, #12
 8005800:	4621      	mov	r1, r4
 8005802:	4640      	mov	r0, r8
 8005804:	f7ff fee2 	bl	80055cc <_printf_common>
 8005808:	3001      	adds	r0, #1
 800580a:	d14c      	bne.n	80058a6 <_printf_i+0x1fe>
 800580c:	f04f 30ff 	mov.w	r0, #4294967295
 8005810:	b004      	add	sp, #16
 8005812:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005816:	4835      	ldr	r0, [pc, #212]	; (80058ec <_printf_i+0x244>)
 8005818:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800581c:	6829      	ldr	r1, [r5, #0]
 800581e:	6823      	ldr	r3, [r4, #0]
 8005820:	f851 6b04 	ldr.w	r6, [r1], #4
 8005824:	6029      	str	r1, [r5, #0]
 8005826:	061d      	lsls	r5, r3, #24
 8005828:	d514      	bpl.n	8005854 <_printf_i+0x1ac>
 800582a:	07df      	lsls	r7, r3, #31
 800582c:	bf44      	itt	mi
 800582e:	f043 0320 	orrmi.w	r3, r3, #32
 8005832:	6023      	strmi	r3, [r4, #0]
 8005834:	b91e      	cbnz	r6, 800583e <_printf_i+0x196>
 8005836:	6823      	ldr	r3, [r4, #0]
 8005838:	f023 0320 	bic.w	r3, r3, #32
 800583c:	6023      	str	r3, [r4, #0]
 800583e:	2310      	movs	r3, #16
 8005840:	e7b0      	b.n	80057a4 <_printf_i+0xfc>
 8005842:	6823      	ldr	r3, [r4, #0]
 8005844:	f043 0320 	orr.w	r3, r3, #32
 8005848:	6023      	str	r3, [r4, #0]
 800584a:	2378      	movs	r3, #120	; 0x78
 800584c:	4828      	ldr	r0, [pc, #160]	; (80058f0 <_printf_i+0x248>)
 800584e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005852:	e7e3      	b.n	800581c <_printf_i+0x174>
 8005854:	0659      	lsls	r1, r3, #25
 8005856:	bf48      	it	mi
 8005858:	b2b6      	uxthmi	r6, r6
 800585a:	e7e6      	b.n	800582a <_printf_i+0x182>
 800585c:	4615      	mov	r5, r2
 800585e:	e7bb      	b.n	80057d8 <_printf_i+0x130>
 8005860:	682b      	ldr	r3, [r5, #0]
 8005862:	6826      	ldr	r6, [r4, #0]
 8005864:	6961      	ldr	r1, [r4, #20]
 8005866:	1d18      	adds	r0, r3, #4
 8005868:	6028      	str	r0, [r5, #0]
 800586a:	0635      	lsls	r5, r6, #24
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	d501      	bpl.n	8005874 <_printf_i+0x1cc>
 8005870:	6019      	str	r1, [r3, #0]
 8005872:	e002      	b.n	800587a <_printf_i+0x1d2>
 8005874:	0670      	lsls	r0, r6, #25
 8005876:	d5fb      	bpl.n	8005870 <_printf_i+0x1c8>
 8005878:	8019      	strh	r1, [r3, #0]
 800587a:	2300      	movs	r3, #0
 800587c:	6123      	str	r3, [r4, #16]
 800587e:	4615      	mov	r5, r2
 8005880:	e7ba      	b.n	80057f8 <_printf_i+0x150>
 8005882:	682b      	ldr	r3, [r5, #0]
 8005884:	1d1a      	adds	r2, r3, #4
 8005886:	602a      	str	r2, [r5, #0]
 8005888:	681d      	ldr	r5, [r3, #0]
 800588a:	6862      	ldr	r2, [r4, #4]
 800588c:	2100      	movs	r1, #0
 800588e:	4628      	mov	r0, r5
 8005890:	f7fa fcae 	bl	80001f0 <memchr>
 8005894:	b108      	cbz	r0, 800589a <_printf_i+0x1f2>
 8005896:	1b40      	subs	r0, r0, r5
 8005898:	6060      	str	r0, [r4, #4]
 800589a:	6863      	ldr	r3, [r4, #4]
 800589c:	6123      	str	r3, [r4, #16]
 800589e:	2300      	movs	r3, #0
 80058a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80058a4:	e7a8      	b.n	80057f8 <_printf_i+0x150>
 80058a6:	6923      	ldr	r3, [r4, #16]
 80058a8:	462a      	mov	r2, r5
 80058aa:	4649      	mov	r1, r9
 80058ac:	4640      	mov	r0, r8
 80058ae:	47d0      	blx	sl
 80058b0:	3001      	adds	r0, #1
 80058b2:	d0ab      	beq.n	800580c <_printf_i+0x164>
 80058b4:	6823      	ldr	r3, [r4, #0]
 80058b6:	079b      	lsls	r3, r3, #30
 80058b8:	d413      	bmi.n	80058e2 <_printf_i+0x23a>
 80058ba:	68e0      	ldr	r0, [r4, #12]
 80058bc:	9b03      	ldr	r3, [sp, #12]
 80058be:	4298      	cmp	r0, r3
 80058c0:	bfb8      	it	lt
 80058c2:	4618      	movlt	r0, r3
 80058c4:	e7a4      	b.n	8005810 <_printf_i+0x168>
 80058c6:	2301      	movs	r3, #1
 80058c8:	4632      	mov	r2, r6
 80058ca:	4649      	mov	r1, r9
 80058cc:	4640      	mov	r0, r8
 80058ce:	47d0      	blx	sl
 80058d0:	3001      	adds	r0, #1
 80058d2:	d09b      	beq.n	800580c <_printf_i+0x164>
 80058d4:	3501      	adds	r5, #1
 80058d6:	68e3      	ldr	r3, [r4, #12]
 80058d8:	9903      	ldr	r1, [sp, #12]
 80058da:	1a5b      	subs	r3, r3, r1
 80058dc:	42ab      	cmp	r3, r5
 80058de:	dcf2      	bgt.n	80058c6 <_printf_i+0x21e>
 80058e0:	e7eb      	b.n	80058ba <_printf_i+0x212>
 80058e2:	2500      	movs	r5, #0
 80058e4:	f104 0619 	add.w	r6, r4, #25
 80058e8:	e7f5      	b.n	80058d6 <_printf_i+0x22e>
 80058ea:	bf00      	nop
 80058ec:	0800818e 	.word	0x0800818e
 80058f0:	0800819f 	.word	0x0800819f

080058f4 <_sbrk_r>:
 80058f4:	b538      	push	{r3, r4, r5, lr}
 80058f6:	4d06      	ldr	r5, [pc, #24]	; (8005910 <_sbrk_r+0x1c>)
 80058f8:	2300      	movs	r3, #0
 80058fa:	4604      	mov	r4, r0
 80058fc:	4608      	mov	r0, r1
 80058fe:	602b      	str	r3, [r5, #0]
 8005900:	f7fc faaa 	bl	8001e58 <_sbrk>
 8005904:	1c43      	adds	r3, r0, #1
 8005906:	d102      	bne.n	800590e <_sbrk_r+0x1a>
 8005908:	682b      	ldr	r3, [r5, #0]
 800590a:	b103      	cbz	r3, 800590e <_sbrk_r+0x1a>
 800590c:	6023      	str	r3, [r4, #0]
 800590e:	bd38      	pop	{r3, r4, r5, pc}
 8005910:	2000037c 	.word	0x2000037c

08005914 <siprintf>:
 8005914:	b40e      	push	{r1, r2, r3}
 8005916:	b500      	push	{lr}
 8005918:	b09c      	sub	sp, #112	; 0x70
 800591a:	ab1d      	add	r3, sp, #116	; 0x74
 800591c:	9002      	str	r0, [sp, #8]
 800591e:	9006      	str	r0, [sp, #24]
 8005920:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005924:	4809      	ldr	r0, [pc, #36]	; (800594c <siprintf+0x38>)
 8005926:	9107      	str	r1, [sp, #28]
 8005928:	9104      	str	r1, [sp, #16]
 800592a:	4909      	ldr	r1, [pc, #36]	; (8005950 <siprintf+0x3c>)
 800592c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005930:	9105      	str	r1, [sp, #20]
 8005932:	6800      	ldr	r0, [r0, #0]
 8005934:	9301      	str	r3, [sp, #4]
 8005936:	a902      	add	r1, sp, #8
 8005938:	f001 fa9c 	bl	8006e74 <_svfiprintf_r>
 800593c:	9b02      	ldr	r3, [sp, #8]
 800593e:	2200      	movs	r2, #0
 8005940:	701a      	strb	r2, [r3, #0]
 8005942:	b01c      	add	sp, #112	; 0x70
 8005944:	f85d eb04 	ldr.w	lr, [sp], #4
 8005948:	b003      	add	sp, #12
 800594a:	4770      	bx	lr
 800594c:	2000000c 	.word	0x2000000c
 8005950:	ffff0208 	.word	0xffff0208

08005954 <quorem>:
 8005954:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005958:	6903      	ldr	r3, [r0, #16]
 800595a:	690c      	ldr	r4, [r1, #16]
 800595c:	42a3      	cmp	r3, r4
 800595e:	4607      	mov	r7, r0
 8005960:	f2c0 8081 	blt.w	8005a66 <quorem+0x112>
 8005964:	3c01      	subs	r4, #1
 8005966:	f101 0814 	add.w	r8, r1, #20
 800596a:	f100 0514 	add.w	r5, r0, #20
 800596e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005972:	9301      	str	r3, [sp, #4]
 8005974:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005978:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800597c:	3301      	adds	r3, #1
 800597e:	429a      	cmp	r2, r3
 8005980:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005984:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005988:	fbb2 f6f3 	udiv	r6, r2, r3
 800598c:	d331      	bcc.n	80059f2 <quorem+0x9e>
 800598e:	f04f 0e00 	mov.w	lr, #0
 8005992:	4640      	mov	r0, r8
 8005994:	46ac      	mov	ip, r5
 8005996:	46f2      	mov	sl, lr
 8005998:	f850 2b04 	ldr.w	r2, [r0], #4
 800599c:	b293      	uxth	r3, r2
 800599e:	fb06 e303 	mla	r3, r6, r3, lr
 80059a2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80059a6:	b29b      	uxth	r3, r3
 80059a8:	ebaa 0303 	sub.w	r3, sl, r3
 80059ac:	f8dc a000 	ldr.w	sl, [ip]
 80059b0:	0c12      	lsrs	r2, r2, #16
 80059b2:	fa13 f38a 	uxtah	r3, r3, sl
 80059b6:	fb06 e202 	mla	r2, r6, r2, lr
 80059ba:	9300      	str	r3, [sp, #0]
 80059bc:	9b00      	ldr	r3, [sp, #0]
 80059be:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80059c2:	b292      	uxth	r2, r2
 80059c4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80059c8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80059cc:	f8bd 3000 	ldrh.w	r3, [sp]
 80059d0:	4581      	cmp	r9, r0
 80059d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80059d6:	f84c 3b04 	str.w	r3, [ip], #4
 80059da:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80059de:	d2db      	bcs.n	8005998 <quorem+0x44>
 80059e0:	f855 300b 	ldr.w	r3, [r5, fp]
 80059e4:	b92b      	cbnz	r3, 80059f2 <quorem+0x9e>
 80059e6:	9b01      	ldr	r3, [sp, #4]
 80059e8:	3b04      	subs	r3, #4
 80059ea:	429d      	cmp	r5, r3
 80059ec:	461a      	mov	r2, r3
 80059ee:	d32e      	bcc.n	8005a4e <quorem+0xfa>
 80059f0:	613c      	str	r4, [r7, #16]
 80059f2:	4638      	mov	r0, r7
 80059f4:	f001 f8ca 	bl	8006b8c <__mcmp>
 80059f8:	2800      	cmp	r0, #0
 80059fa:	db24      	blt.n	8005a46 <quorem+0xf2>
 80059fc:	3601      	adds	r6, #1
 80059fe:	4628      	mov	r0, r5
 8005a00:	f04f 0c00 	mov.w	ip, #0
 8005a04:	f858 2b04 	ldr.w	r2, [r8], #4
 8005a08:	f8d0 e000 	ldr.w	lr, [r0]
 8005a0c:	b293      	uxth	r3, r2
 8005a0e:	ebac 0303 	sub.w	r3, ip, r3
 8005a12:	0c12      	lsrs	r2, r2, #16
 8005a14:	fa13 f38e 	uxtah	r3, r3, lr
 8005a18:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005a1c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005a20:	b29b      	uxth	r3, r3
 8005a22:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005a26:	45c1      	cmp	r9, r8
 8005a28:	f840 3b04 	str.w	r3, [r0], #4
 8005a2c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005a30:	d2e8      	bcs.n	8005a04 <quorem+0xb0>
 8005a32:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005a36:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005a3a:	b922      	cbnz	r2, 8005a46 <quorem+0xf2>
 8005a3c:	3b04      	subs	r3, #4
 8005a3e:	429d      	cmp	r5, r3
 8005a40:	461a      	mov	r2, r3
 8005a42:	d30a      	bcc.n	8005a5a <quorem+0x106>
 8005a44:	613c      	str	r4, [r7, #16]
 8005a46:	4630      	mov	r0, r6
 8005a48:	b003      	add	sp, #12
 8005a4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a4e:	6812      	ldr	r2, [r2, #0]
 8005a50:	3b04      	subs	r3, #4
 8005a52:	2a00      	cmp	r2, #0
 8005a54:	d1cc      	bne.n	80059f0 <quorem+0x9c>
 8005a56:	3c01      	subs	r4, #1
 8005a58:	e7c7      	b.n	80059ea <quorem+0x96>
 8005a5a:	6812      	ldr	r2, [r2, #0]
 8005a5c:	3b04      	subs	r3, #4
 8005a5e:	2a00      	cmp	r2, #0
 8005a60:	d1f0      	bne.n	8005a44 <quorem+0xf0>
 8005a62:	3c01      	subs	r4, #1
 8005a64:	e7eb      	b.n	8005a3e <quorem+0xea>
 8005a66:	2000      	movs	r0, #0
 8005a68:	e7ee      	b.n	8005a48 <quorem+0xf4>
 8005a6a:	0000      	movs	r0, r0
 8005a6c:	0000      	movs	r0, r0
	...

08005a70 <_dtoa_r>:
 8005a70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a74:	ed2d 8b04 	vpush	{d8-d9}
 8005a78:	ec57 6b10 	vmov	r6, r7, d0
 8005a7c:	b093      	sub	sp, #76	; 0x4c
 8005a7e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005a80:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005a84:	9106      	str	r1, [sp, #24]
 8005a86:	ee10 aa10 	vmov	sl, s0
 8005a8a:	4604      	mov	r4, r0
 8005a8c:	9209      	str	r2, [sp, #36]	; 0x24
 8005a8e:	930c      	str	r3, [sp, #48]	; 0x30
 8005a90:	46bb      	mov	fp, r7
 8005a92:	b975      	cbnz	r5, 8005ab2 <_dtoa_r+0x42>
 8005a94:	2010      	movs	r0, #16
 8005a96:	f7ff f9cb 	bl	8004e30 <malloc>
 8005a9a:	4602      	mov	r2, r0
 8005a9c:	6260      	str	r0, [r4, #36]	; 0x24
 8005a9e:	b920      	cbnz	r0, 8005aaa <_dtoa_r+0x3a>
 8005aa0:	4ba7      	ldr	r3, [pc, #668]	; (8005d40 <_dtoa_r+0x2d0>)
 8005aa2:	21ea      	movs	r1, #234	; 0xea
 8005aa4:	48a7      	ldr	r0, [pc, #668]	; (8005d44 <_dtoa_r+0x2d4>)
 8005aa6:	f001 fae5 	bl	8007074 <__assert_func>
 8005aaa:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005aae:	6005      	str	r5, [r0, #0]
 8005ab0:	60c5      	str	r5, [r0, #12]
 8005ab2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005ab4:	6819      	ldr	r1, [r3, #0]
 8005ab6:	b151      	cbz	r1, 8005ace <_dtoa_r+0x5e>
 8005ab8:	685a      	ldr	r2, [r3, #4]
 8005aba:	604a      	str	r2, [r1, #4]
 8005abc:	2301      	movs	r3, #1
 8005abe:	4093      	lsls	r3, r2
 8005ac0:	608b      	str	r3, [r1, #8]
 8005ac2:	4620      	mov	r0, r4
 8005ac4:	f000 fe20 	bl	8006708 <_Bfree>
 8005ac8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005aca:	2200      	movs	r2, #0
 8005acc:	601a      	str	r2, [r3, #0]
 8005ace:	1e3b      	subs	r3, r7, #0
 8005ad0:	bfaa      	itet	ge
 8005ad2:	2300      	movge	r3, #0
 8005ad4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8005ad8:	f8c8 3000 	strge.w	r3, [r8]
 8005adc:	4b9a      	ldr	r3, [pc, #616]	; (8005d48 <_dtoa_r+0x2d8>)
 8005ade:	bfbc      	itt	lt
 8005ae0:	2201      	movlt	r2, #1
 8005ae2:	f8c8 2000 	strlt.w	r2, [r8]
 8005ae6:	ea33 030b 	bics.w	r3, r3, fp
 8005aea:	d11b      	bne.n	8005b24 <_dtoa_r+0xb4>
 8005aec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005aee:	f242 730f 	movw	r3, #9999	; 0x270f
 8005af2:	6013      	str	r3, [r2, #0]
 8005af4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005af8:	4333      	orrs	r3, r6
 8005afa:	f000 8592 	beq.w	8006622 <_dtoa_r+0xbb2>
 8005afe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005b00:	b963      	cbnz	r3, 8005b1c <_dtoa_r+0xac>
 8005b02:	4b92      	ldr	r3, [pc, #584]	; (8005d4c <_dtoa_r+0x2dc>)
 8005b04:	e022      	b.n	8005b4c <_dtoa_r+0xdc>
 8005b06:	4b92      	ldr	r3, [pc, #584]	; (8005d50 <_dtoa_r+0x2e0>)
 8005b08:	9301      	str	r3, [sp, #4]
 8005b0a:	3308      	adds	r3, #8
 8005b0c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005b0e:	6013      	str	r3, [r2, #0]
 8005b10:	9801      	ldr	r0, [sp, #4]
 8005b12:	b013      	add	sp, #76	; 0x4c
 8005b14:	ecbd 8b04 	vpop	{d8-d9}
 8005b18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b1c:	4b8b      	ldr	r3, [pc, #556]	; (8005d4c <_dtoa_r+0x2dc>)
 8005b1e:	9301      	str	r3, [sp, #4]
 8005b20:	3303      	adds	r3, #3
 8005b22:	e7f3      	b.n	8005b0c <_dtoa_r+0x9c>
 8005b24:	2200      	movs	r2, #0
 8005b26:	2300      	movs	r3, #0
 8005b28:	4650      	mov	r0, sl
 8005b2a:	4659      	mov	r1, fp
 8005b2c:	f7fa ffd4 	bl	8000ad8 <__aeabi_dcmpeq>
 8005b30:	ec4b ab19 	vmov	d9, sl, fp
 8005b34:	4680      	mov	r8, r0
 8005b36:	b158      	cbz	r0, 8005b50 <_dtoa_r+0xe0>
 8005b38:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	6013      	str	r3, [r2, #0]
 8005b3e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	f000 856b 	beq.w	800661c <_dtoa_r+0xbac>
 8005b46:	4883      	ldr	r0, [pc, #524]	; (8005d54 <_dtoa_r+0x2e4>)
 8005b48:	6018      	str	r0, [r3, #0]
 8005b4a:	1e43      	subs	r3, r0, #1
 8005b4c:	9301      	str	r3, [sp, #4]
 8005b4e:	e7df      	b.n	8005b10 <_dtoa_r+0xa0>
 8005b50:	ec4b ab10 	vmov	d0, sl, fp
 8005b54:	aa10      	add	r2, sp, #64	; 0x40
 8005b56:	a911      	add	r1, sp, #68	; 0x44
 8005b58:	4620      	mov	r0, r4
 8005b5a:	f001 f8bd 	bl	8006cd8 <__d2b>
 8005b5e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8005b62:	ee08 0a10 	vmov	s16, r0
 8005b66:	2d00      	cmp	r5, #0
 8005b68:	f000 8084 	beq.w	8005c74 <_dtoa_r+0x204>
 8005b6c:	ee19 3a90 	vmov	r3, s19
 8005b70:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005b74:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005b78:	4656      	mov	r6, sl
 8005b7a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8005b7e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005b82:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8005b86:	4b74      	ldr	r3, [pc, #464]	; (8005d58 <_dtoa_r+0x2e8>)
 8005b88:	2200      	movs	r2, #0
 8005b8a:	4630      	mov	r0, r6
 8005b8c:	4639      	mov	r1, r7
 8005b8e:	f7fa fb83 	bl	8000298 <__aeabi_dsub>
 8005b92:	a365      	add	r3, pc, #404	; (adr r3, 8005d28 <_dtoa_r+0x2b8>)
 8005b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b98:	f7fa fd36 	bl	8000608 <__aeabi_dmul>
 8005b9c:	a364      	add	r3, pc, #400	; (adr r3, 8005d30 <_dtoa_r+0x2c0>)
 8005b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ba2:	f7fa fb7b 	bl	800029c <__adddf3>
 8005ba6:	4606      	mov	r6, r0
 8005ba8:	4628      	mov	r0, r5
 8005baa:	460f      	mov	r7, r1
 8005bac:	f7fa fcc2 	bl	8000534 <__aeabi_i2d>
 8005bb0:	a361      	add	r3, pc, #388	; (adr r3, 8005d38 <_dtoa_r+0x2c8>)
 8005bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bb6:	f7fa fd27 	bl	8000608 <__aeabi_dmul>
 8005bba:	4602      	mov	r2, r0
 8005bbc:	460b      	mov	r3, r1
 8005bbe:	4630      	mov	r0, r6
 8005bc0:	4639      	mov	r1, r7
 8005bc2:	f7fa fb6b 	bl	800029c <__adddf3>
 8005bc6:	4606      	mov	r6, r0
 8005bc8:	460f      	mov	r7, r1
 8005bca:	f7fa ffcd 	bl	8000b68 <__aeabi_d2iz>
 8005bce:	2200      	movs	r2, #0
 8005bd0:	9000      	str	r0, [sp, #0]
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	4630      	mov	r0, r6
 8005bd6:	4639      	mov	r1, r7
 8005bd8:	f7fa ff88 	bl	8000aec <__aeabi_dcmplt>
 8005bdc:	b150      	cbz	r0, 8005bf4 <_dtoa_r+0x184>
 8005bde:	9800      	ldr	r0, [sp, #0]
 8005be0:	f7fa fca8 	bl	8000534 <__aeabi_i2d>
 8005be4:	4632      	mov	r2, r6
 8005be6:	463b      	mov	r3, r7
 8005be8:	f7fa ff76 	bl	8000ad8 <__aeabi_dcmpeq>
 8005bec:	b910      	cbnz	r0, 8005bf4 <_dtoa_r+0x184>
 8005bee:	9b00      	ldr	r3, [sp, #0]
 8005bf0:	3b01      	subs	r3, #1
 8005bf2:	9300      	str	r3, [sp, #0]
 8005bf4:	9b00      	ldr	r3, [sp, #0]
 8005bf6:	2b16      	cmp	r3, #22
 8005bf8:	d85a      	bhi.n	8005cb0 <_dtoa_r+0x240>
 8005bfa:	9a00      	ldr	r2, [sp, #0]
 8005bfc:	4b57      	ldr	r3, [pc, #348]	; (8005d5c <_dtoa_r+0x2ec>)
 8005bfe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c06:	ec51 0b19 	vmov	r0, r1, d9
 8005c0a:	f7fa ff6f 	bl	8000aec <__aeabi_dcmplt>
 8005c0e:	2800      	cmp	r0, #0
 8005c10:	d050      	beq.n	8005cb4 <_dtoa_r+0x244>
 8005c12:	9b00      	ldr	r3, [sp, #0]
 8005c14:	3b01      	subs	r3, #1
 8005c16:	9300      	str	r3, [sp, #0]
 8005c18:	2300      	movs	r3, #0
 8005c1a:	930b      	str	r3, [sp, #44]	; 0x2c
 8005c1c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005c1e:	1b5d      	subs	r5, r3, r5
 8005c20:	1e6b      	subs	r3, r5, #1
 8005c22:	9305      	str	r3, [sp, #20]
 8005c24:	bf45      	ittet	mi
 8005c26:	f1c5 0301 	rsbmi	r3, r5, #1
 8005c2a:	9304      	strmi	r3, [sp, #16]
 8005c2c:	2300      	movpl	r3, #0
 8005c2e:	2300      	movmi	r3, #0
 8005c30:	bf4c      	ite	mi
 8005c32:	9305      	strmi	r3, [sp, #20]
 8005c34:	9304      	strpl	r3, [sp, #16]
 8005c36:	9b00      	ldr	r3, [sp, #0]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	db3d      	blt.n	8005cb8 <_dtoa_r+0x248>
 8005c3c:	9b05      	ldr	r3, [sp, #20]
 8005c3e:	9a00      	ldr	r2, [sp, #0]
 8005c40:	920a      	str	r2, [sp, #40]	; 0x28
 8005c42:	4413      	add	r3, r2
 8005c44:	9305      	str	r3, [sp, #20]
 8005c46:	2300      	movs	r3, #0
 8005c48:	9307      	str	r3, [sp, #28]
 8005c4a:	9b06      	ldr	r3, [sp, #24]
 8005c4c:	2b09      	cmp	r3, #9
 8005c4e:	f200 8089 	bhi.w	8005d64 <_dtoa_r+0x2f4>
 8005c52:	2b05      	cmp	r3, #5
 8005c54:	bfc4      	itt	gt
 8005c56:	3b04      	subgt	r3, #4
 8005c58:	9306      	strgt	r3, [sp, #24]
 8005c5a:	9b06      	ldr	r3, [sp, #24]
 8005c5c:	f1a3 0302 	sub.w	r3, r3, #2
 8005c60:	bfcc      	ite	gt
 8005c62:	2500      	movgt	r5, #0
 8005c64:	2501      	movle	r5, #1
 8005c66:	2b03      	cmp	r3, #3
 8005c68:	f200 8087 	bhi.w	8005d7a <_dtoa_r+0x30a>
 8005c6c:	e8df f003 	tbb	[pc, r3]
 8005c70:	59383a2d 	.word	0x59383a2d
 8005c74:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005c78:	441d      	add	r5, r3
 8005c7a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005c7e:	2b20      	cmp	r3, #32
 8005c80:	bfc1      	itttt	gt
 8005c82:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005c86:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8005c8a:	fa0b f303 	lslgt.w	r3, fp, r3
 8005c8e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005c92:	bfda      	itte	le
 8005c94:	f1c3 0320 	rsble	r3, r3, #32
 8005c98:	fa06 f003 	lslle.w	r0, r6, r3
 8005c9c:	4318      	orrgt	r0, r3
 8005c9e:	f7fa fc39 	bl	8000514 <__aeabi_ui2d>
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	4606      	mov	r6, r0
 8005ca6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8005caa:	3d01      	subs	r5, #1
 8005cac:	930e      	str	r3, [sp, #56]	; 0x38
 8005cae:	e76a      	b.n	8005b86 <_dtoa_r+0x116>
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	e7b2      	b.n	8005c1a <_dtoa_r+0x1aa>
 8005cb4:	900b      	str	r0, [sp, #44]	; 0x2c
 8005cb6:	e7b1      	b.n	8005c1c <_dtoa_r+0x1ac>
 8005cb8:	9b04      	ldr	r3, [sp, #16]
 8005cba:	9a00      	ldr	r2, [sp, #0]
 8005cbc:	1a9b      	subs	r3, r3, r2
 8005cbe:	9304      	str	r3, [sp, #16]
 8005cc0:	4253      	negs	r3, r2
 8005cc2:	9307      	str	r3, [sp, #28]
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	930a      	str	r3, [sp, #40]	; 0x28
 8005cc8:	e7bf      	b.n	8005c4a <_dtoa_r+0x1da>
 8005cca:	2300      	movs	r3, #0
 8005ccc:	9308      	str	r3, [sp, #32]
 8005cce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	dc55      	bgt.n	8005d80 <_dtoa_r+0x310>
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005cda:	461a      	mov	r2, r3
 8005cdc:	9209      	str	r2, [sp, #36]	; 0x24
 8005cde:	e00c      	b.n	8005cfa <_dtoa_r+0x28a>
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	e7f3      	b.n	8005ccc <_dtoa_r+0x25c>
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005ce8:	9308      	str	r3, [sp, #32]
 8005cea:	9b00      	ldr	r3, [sp, #0]
 8005cec:	4413      	add	r3, r2
 8005cee:	9302      	str	r3, [sp, #8]
 8005cf0:	3301      	adds	r3, #1
 8005cf2:	2b01      	cmp	r3, #1
 8005cf4:	9303      	str	r3, [sp, #12]
 8005cf6:	bfb8      	it	lt
 8005cf8:	2301      	movlt	r3, #1
 8005cfa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	6042      	str	r2, [r0, #4]
 8005d00:	2204      	movs	r2, #4
 8005d02:	f102 0614 	add.w	r6, r2, #20
 8005d06:	429e      	cmp	r6, r3
 8005d08:	6841      	ldr	r1, [r0, #4]
 8005d0a:	d93d      	bls.n	8005d88 <_dtoa_r+0x318>
 8005d0c:	4620      	mov	r0, r4
 8005d0e:	f000 fcbb 	bl	8006688 <_Balloc>
 8005d12:	9001      	str	r0, [sp, #4]
 8005d14:	2800      	cmp	r0, #0
 8005d16:	d13b      	bne.n	8005d90 <_dtoa_r+0x320>
 8005d18:	4b11      	ldr	r3, [pc, #68]	; (8005d60 <_dtoa_r+0x2f0>)
 8005d1a:	4602      	mov	r2, r0
 8005d1c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005d20:	e6c0      	b.n	8005aa4 <_dtoa_r+0x34>
 8005d22:	2301      	movs	r3, #1
 8005d24:	e7df      	b.n	8005ce6 <_dtoa_r+0x276>
 8005d26:	bf00      	nop
 8005d28:	636f4361 	.word	0x636f4361
 8005d2c:	3fd287a7 	.word	0x3fd287a7
 8005d30:	8b60c8b3 	.word	0x8b60c8b3
 8005d34:	3fc68a28 	.word	0x3fc68a28
 8005d38:	509f79fb 	.word	0x509f79fb
 8005d3c:	3fd34413 	.word	0x3fd34413
 8005d40:	080081bd 	.word	0x080081bd
 8005d44:	080081d4 	.word	0x080081d4
 8005d48:	7ff00000 	.word	0x7ff00000
 8005d4c:	080081b9 	.word	0x080081b9
 8005d50:	080081b0 	.word	0x080081b0
 8005d54:	0800818d 	.word	0x0800818d
 8005d58:	3ff80000 	.word	0x3ff80000
 8005d5c:	080082c8 	.word	0x080082c8
 8005d60:	0800822f 	.word	0x0800822f
 8005d64:	2501      	movs	r5, #1
 8005d66:	2300      	movs	r3, #0
 8005d68:	9306      	str	r3, [sp, #24]
 8005d6a:	9508      	str	r5, [sp, #32]
 8005d6c:	f04f 33ff 	mov.w	r3, #4294967295
 8005d70:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005d74:	2200      	movs	r2, #0
 8005d76:	2312      	movs	r3, #18
 8005d78:	e7b0      	b.n	8005cdc <_dtoa_r+0x26c>
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	9308      	str	r3, [sp, #32]
 8005d7e:	e7f5      	b.n	8005d6c <_dtoa_r+0x2fc>
 8005d80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d82:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005d86:	e7b8      	b.n	8005cfa <_dtoa_r+0x28a>
 8005d88:	3101      	adds	r1, #1
 8005d8a:	6041      	str	r1, [r0, #4]
 8005d8c:	0052      	lsls	r2, r2, #1
 8005d8e:	e7b8      	b.n	8005d02 <_dtoa_r+0x292>
 8005d90:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005d92:	9a01      	ldr	r2, [sp, #4]
 8005d94:	601a      	str	r2, [r3, #0]
 8005d96:	9b03      	ldr	r3, [sp, #12]
 8005d98:	2b0e      	cmp	r3, #14
 8005d9a:	f200 809d 	bhi.w	8005ed8 <_dtoa_r+0x468>
 8005d9e:	2d00      	cmp	r5, #0
 8005da0:	f000 809a 	beq.w	8005ed8 <_dtoa_r+0x468>
 8005da4:	9b00      	ldr	r3, [sp, #0]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	dd32      	ble.n	8005e10 <_dtoa_r+0x3a0>
 8005daa:	4ab7      	ldr	r2, [pc, #732]	; (8006088 <_dtoa_r+0x618>)
 8005dac:	f003 030f 	and.w	r3, r3, #15
 8005db0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005db4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005db8:	9b00      	ldr	r3, [sp, #0]
 8005dba:	05d8      	lsls	r0, r3, #23
 8005dbc:	ea4f 1723 	mov.w	r7, r3, asr #4
 8005dc0:	d516      	bpl.n	8005df0 <_dtoa_r+0x380>
 8005dc2:	4bb2      	ldr	r3, [pc, #712]	; (800608c <_dtoa_r+0x61c>)
 8005dc4:	ec51 0b19 	vmov	r0, r1, d9
 8005dc8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005dcc:	f7fa fd46 	bl	800085c <__aeabi_ddiv>
 8005dd0:	f007 070f 	and.w	r7, r7, #15
 8005dd4:	4682      	mov	sl, r0
 8005dd6:	468b      	mov	fp, r1
 8005dd8:	2503      	movs	r5, #3
 8005dda:	4eac      	ldr	r6, [pc, #688]	; (800608c <_dtoa_r+0x61c>)
 8005ddc:	b957      	cbnz	r7, 8005df4 <_dtoa_r+0x384>
 8005dde:	4642      	mov	r2, r8
 8005de0:	464b      	mov	r3, r9
 8005de2:	4650      	mov	r0, sl
 8005de4:	4659      	mov	r1, fp
 8005de6:	f7fa fd39 	bl	800085c <__aeabi_ddiv>
 8005dea:	4682      	mov	sl, r0
 8005dec:	468b      	mov	fp, r1
 8005dee:	e028      	b.n	8005e42 <_dtoa_r+0x3d2>
 8005df0:	2502      	movs	r5, #2
 8005df2:	e7f2      	b.n	8005dda <_dtoa_r+0x36a>
 8005df4:	07f9      	lsls	r1, r7, #31
 8005df6:	d508      	bpl.n	8005e0a <_dtoa_r+0x39a>
 8005df8:	4640      	mov	r0, r8
 8005dfa:	4649      	mov	r1, r9
 8005dfc:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005e00:	f7fa fc02 	bl	8000608 <__aeabi_dmul>
 8005e04:	3501      	adds	r5, #1
 8005e06:	4680      	mov	r8, r0
 8005e08:	4689      	mov	r9, r1
 8005e0a:	107f      	asrs	r7, r7, #1
 8005e0c:	3608      	adds	r6, #8
 8005e0e:	e7e5      	b.n	8005ddc <_dtoa_r+0x36c>
 8005e10:	f000 809b 	beq.w	8005f4a <_dtoa_r+0x4da>
 8005e14:	9b00      	ldr	r3, [sp, #0]
 8005e16:	4f9d      	ldr	r7, [pc, #628]	; (800608c <_dtoa_r+0x61c>)
 8005e18:	425e      	negs	r6, r3
 8005e1a:	4b9b      	ldr	r3, [pc, #620]	; (8006088 <_dtoa_r+0x618>)
 8005e1c:	f006 020f 	and.w	r2, r6, #15
 8005e20:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e28:	ec51 0b19 	vmov	r0, r1, d9
 8005e2c:	f7fa fbec 	bl	8000608 <__aeabi_dmul>
 8005e30:	1136      	asrs	r6, r6, #4
 8005e32:	4682      	mov	sl, r0
 8005e34:	468b      	mov	fp, r1
 8005e36:	2300      	movs	r3, #0
 8005e38:	2502      	movs	r5, #2
 8005e3a:	2e00      	cmp	r6, #0
 8005e3c:	d17a      	bne.n	8005f34 <_dtoa_r+0x4c4>
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d1d3      	bne.n	8005dea <_dtoa_r+0x37a>
 8005e42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	f000 8082 	beq.w	8005f4e <_dtoa_r+0x4de>
 8005e4a:	4b91      	ldr	r3, [pc, #580]	; (8006090 <_dtoa_r+0x620>)
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	4650      	mov	r0, sl
 8005e50:	4659      	mov	r1, fp
 8005e52:	f7fa fe4b 	bl	8000aec <__aeabi_dcmplt>
 8005e56:	2800      	cmp	r0, #0
 8005e58:	d079      	beq.n	8005f4e <_dtoa_r+0x4de>
 8005e5a:	9b03      	ldr	r3, [sp, #12]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d076      	beq.n	8005f4e <_dtoa_r+0x4de>
 8005e60:	9b02      	ldr	r3, [sp, #8]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	dd36      	ble.n	8005ed4 <_dtoa_r+0x464>
 8005e66:	9b00      	ldr	r3, [sp, #0]
 8005e68:	4650      	mov	r0, sl
 8005e6a:	4659      	mov	r1, fp
 8005e6c:	1e5f      	subs	r7, r3, #1
 8005e6e:	2200      	movs	r2, #0
 8005e70:	4b88      	ldr	r3, [pc, #544]	; (8006094 <_dtoa_r+0x624>)
 8005e72:	f7fa fbc9 	bl	8000608 <__aeabi_dmul>
 8005e76:	9e02      	ldr	r6, [sp, #8]
 8005e78:	4682      	mov	sl, r0
 8005e7a:	468b      	mov	fp, r1
 8005e7c:	3501      	adds	r5, #1
 8005e7e:	4628      	mov	r0, r5
 8005e80:	f7fa fb58 	bl	8000534 <__aeabi_i2d>
 8005e84:	4652      	mov	r2, sl
 8005e86:	465b      	mov	r3, fp
 8005e88:	f7fa fbbe 	bl	8000608 <__aeabi_dmul>
 8005e8c:	4b82      	ldr	r3, [pc, #520]	; (8006098 <_dtoa_r+0x628>)
 8005e8e:	2200      	movs	r2, #0
 8005e90:	f7fa fa04 	bl	800029c <__adddf3>
 8005e94:	46d0      	mov	r8, sl
 8005e96:	46d9      	mov	r9, fp
 8005e98:	4682      	mov	sl, r0
 8005e9a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8005e9e:	2e00      	cmp	r6, #0
 8005ea0:	d158      	bne.n	8005f54 <_dtoa_r+0x4e4>
 8005ea2:	4b7e      	ldr	r3, [pc, #504]	; (800609c <_dtoa_r+0x62c>)
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	4640      	mov	r0, r8
 8005ea8:	4649      	mov	r1, r9
 8005eaa:	f7fa f9f5 	bl	8000298 <__aeabi_dsub>
 8005eae:	4652      	mov	r2, sl
 8005eb0:	465b      	mov	r3, fp
 8005eb2:	4680      	mov	r8, r0
 8005eb4:	4689      	mov	r9, r1
 8005eb6:	f7fa fe37 	bl	8000b28 <__aeabi_dcmpgt>
 8005eba:	2800      	cmp	r0, #0
 8005ebc:	f040 8295 	bne.w	80063ea <_dtoa_r+0x97a>
 8005ec0:	4652      	mov	r2, sl
 8005ec2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8005ec6:	4640      	mov	r0, r8
 8005ec8:	4649      	mov	r1, r9
 8005eca:	f7fa fe0f 	bl	8000aec <__aeabi_dcmplt>
 8005ece:	2800      	cmp	r0, #0
 8005ed0:	f040 8289 	bne.w	80063e6 <_dtoa_r+0x976>
 8005ed4:	ec5b ab19 	vmov	sl, fp, d9
 8005ed8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	f2c0 8148 	blt.w	8006170 <_dtoa_r+0x700>
 8005ee0:	9a00      	ldr	r2, [sp, #0]
 8005ee2:	2a0e      	cmp	r2, #14
 8005ee4:	f300 8144 	bgt.w	8006170 <_dtoa_r+0x700>
 8005ee8:	4b67      	ldr	r3, [pc, #412]	; (8006088 <_dtoa_r+0x618>)
 8005eea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005eee:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005ef2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	f280 80d5 	bge.w	80060a4 <_dtoa_r+0x634>
 8005efa:	9b03      	ldr	r3, [sp, #12]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	f300 80d1 	bgt.w	80060a4 <_dtoa_r+0x634>
 8005f02:	f040 826f 	bne.w	80063e4 <_dtoa_r+0x974>
 8005f06:	4b65      	ldr	r3, [pc, #404]	; (800609c <_dtoa_r+0x62c>)
 8005f08:	2200      	movs	r2, #0
 8005f0a:	4640      	mov	r0, r8
 8005f0c:	4649      	mov	r1, r9
 8005f0e:	f7fa fb7b 	bl	8000608 <__aeabi_dmul>
 8005f12:	4652      	mov	r2, sl
 8005f14:	465b      	mov	r3, fp
 8005f16:	f7fa fdfd 	bl	8000b14 <__aeabi_dcmpge>
 8005f1a:	9e03      	ldr	r6, [sp, #12]
 8005f1c:	4637      	mov	r7, r6
 8005f1e:	2800      	cmp	r0, #0
 8005f20:	f040 8245 	bne.w	80063ae <_dtoa_r+0x93e>
 8005f24:	9d01      	ldr	r5, [sp, #4]
 8005f26:	2331      	movs	r3, #49	; 0x31
 8005f28:	f805 3b01 	strb.w	r3, [r5], #1
 8005f2c:	9b00      	ldr	r3, [sp, #0]
 8005f2e:	3301      	adds	r3, #1
 8005f30:	9300      	str	r3, [sp, #0]
 8005f32:	e240      	b.n	80063b6 <_dtoa_r+0x946>
 8005f34:	07f2      	lsls	r2, r6, #31
 8005f36:	d505      	bpl.n	8005f44 <_dtoa_r+0x4d4>
 8005f38:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f3c:	f7fa fb64 	bl	8000608 <__aeabi_dmul>
 8005f40:	3501      	adds	r5, #1
 8005f42:	2301      	movs	r3, #1
 8005f44:	1076      	asrs	r6, r6, #1
 8005f46:	3708      	adds	r7, #8
 8005f48:	e777      	b.n	8005e3a <_dtoa_r+0x3ca>
 8005f4a:	2502      	movs	r5, #2
 8005f4c:	e779      	b.n	8005e42 <_dtoa_r+0x3d2>
 8005f4e:	9f00      	ldr	r7, [sp, #0]
 8005f50:	9e03      	ldr	r6, [sp, #12]
 8005f52:	e794      	b.n	8005e7e <_dtoa_r+0x40e>
 8005f54:	9901      	ldr	r1, [sp, #4]
 8005f56:	4b4c      	ldr	r3, [pc, #304]	; (8006088 <_dtoa_r+0x618>)
 8005f58:	4431      	add	r1, r6
 8005f5a:	910d      	str	r1, [sp, #52]	; 0x34
 8005f5c:	9908      	ldr	r1, [sp, #32]
 8005f5e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005f62:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005f66:	2900      	cmp	r1, #0
 8005f68:	d043      	beq.n	8005ff2 <_dtoa_r+0x582>
 8005f6a:	494d      	ldr	r1, [pc, #308]	; (80060a0 <_dtoa_r+0x630>)
 8005f6c:	2000      	movs	r0, #0
 8005f6e:	f7fa fc75 	bl	800085c <__aeabi_ddiv>
 8005f72:	4652      	mov	r2, sl
 8005f74:	465b      	mov	r3, fp
 8005f76:	f7fa f98f 	bl	8000298 <__aeabi_dsub>
 8005f7a:	9d01      	ldr	r5, [sp, #4]
 8005f7c:	4682      	mov	sl, r0
 8005f7e:	468b      	mov	fp, r1
 8005f80:	4649      	mov	r1, r9
 8005f82:	4640      	mov	r0, r8
 8005f84:	f7fa fdf0 	bl	8000b68 <__aeabi_d2iz>
 8005f88:	4606      	mov	r6, r0
 8005f8a:	f7fa fad3 	bl	8000534 <__aeabi_i2d>
 8005f8e:	4602      	mov	r2, r0
 8005f90:	460b      	mov	r3, r1
 8005f92:	4640      	mov	r0, r8
 8005f94:	4649      	mov	r1, r9
 8005f96:	f7fa f97f 	bl	8000298 <__aeabi_dsub>
 8005f9a:	3630      	adds	r6, #48	; 0x30
 8005f9c:	f805 6b01 	strb.w	r6, [r5], #1
 8005fa0:	4652      	mov	r2, sl
 8005fa2:	465b      	mov	r3, fp
 8005fa4:	4680      	mov	r8, r0
 8005fa6:	4689      	mov	r9, r1
 8005fa8:	f7fa fda0 	bl	8000aec <__aeabi_dcmplt>
 8005fac:	2800      	cmp	r0, #0
 8005fae:	d163      	bne.n	8006078 <_dtoa_r+0x608>
 8005fb0:	4642      	mov	r2, r8
 8005fb2:	464b      	mov	r3, r9
 8005fb4:	4936      	ldr	r1, [pc, #216]	; (8006090 <_dtoa_r+0x620>)
 8005fb6:	2000      	movs	r0, #0
 8005fb8:	f7fa f96e 	bl	8000298 <__aeabi_dsub>
 8005fbc:	4652      	mov	r2, sl
 8005fbe:	465b      	mov	r3, fp
 8005fc0:	f7fa fd94 	bl	8000aec <__aeabi_dcmplt>
 8005fc4:	2800      	cmp	r0, #0
 8005fc6:	f040 80b5 	bne.w	8006134 <_dtoa_r+0x6c4>
 8005fca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005fcc:	429d      	cmp	r5, r3
 8005fce:	d081      	beq.n	8005ed4 <_dtoa_r+0x464>
 8005fd0:	4b30      	ldr	r3, [pc, #192]	; (8006094 <_dtoa_r+0x624>)
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	4650      	mov	r0, sl
 8005fd6:	4659      	mov	r1, fp
 8005fd8:	f7fa fb16 	bl	8000608 <__aeabi_dmul>
 8005fdc:	4b2d      	ldr	r3, [pc, #180]	; (8006094 <_dtoa_r+0x624>)
 8005fde:	4682      	mov	sl, r0
 8005fe0:	468b      	mov	fp, r1
 8005fe2:	4640      	mov	r0, r8
 8005fe4:	4649      	mov	r1, r9
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	f7fa fb0e 	bl	8000608 <__aeabi_dmul>
 8005fec:	4680      	mov	r8, r0
 8005fee:	4689      	mov	r9, r1
 8005ff0:	e7c6      	b.n	8005f80 <_dtoa_r+0x510>
 8005ff2:	4650      	mov	r0, sl
 8005ff4:	4659      	mov	r1, fp
 8005ff6:	f7fa fb07 	bl	8000608 <__aeabi_dmul>
 8005ffa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005ffc:	9d01      	ldr	r5, [sp, #4]
 8005ffe:	930f      	str	r3, [sp, #60]	; 0x3c
 8006000:	4682      	mov	sl, r0
 8006002:	468b      	mov	fp, r1
 8006004:	4649      	mov	r1, r9
 8006006:	4640      	mov	r0, r8
 8006008:	f7fa fdae 	bl	8000b68 <__aeabi_d2iz>
 800600c:	4606      	mov	r6, r0
 800600e:	f7fa fa91 	bl	8000534 <__aeabi_i2d>
 8006012:	3630      	adds	r6, #48	; 0x30
 8006014:	4602      	mov	r2, r0
 8006016:	460b      	mov	r3, r1
 8006018:	4640      	mov	r0, r8
 800601a:	4649      	mov	r1, r9
 800601c:	f7fa f93c 	bl	8000298 <__aeabi_dsub>
 8006020:	f805 6b01 	strb.w	r6, [r5], #1
 8006024:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006026:	429d      	cmp	r5, r3
 8006028:	4680      	mov	r8, r0
 800602a:	4689      	mov	r9, r1
 800602c:	f04f 0200 	mov.w	r2, #0
 8006030:	d124      	bne.n	800607c <_dtoa_r+0x60c>
 8006032:	4b1b      	ldr	r3, [pc, #108]	; (80060a0 <_dtoa_r+0x630>)
 8006034:	4650      	mov	r0, sl
 8006036:	4659      	mov	r1, fp
 8006038:	f7fa f930 	bl	800029c <__adddf3>
 800603c:	4602      	mov	r2, r0
 800603e:	460b      	mov	r3, r1
 8006040:	4640      	mov	r0, r8
 8006042:	4649      	mov	r1, r9
 8006044:	f7fa fd70 	bl	8000b28 <__aeabi_dcmpgt>
 8006048:	2800      	cmp	r0, #0
 800604a:	d173      	bne.n	8006134 <_dtoa_r+0x6c4>
 800604c:	4652      	mov	r2, sl
 800604e:	465b      	mov	r3, fp
 8006050:	4913      	ldr	r1, [pc, #76]	; (80060a0 <_dtoa_r+0x630>)
 8006052:	2000      	movs	r0, #0
 8006054:	f7fa f920 	bl	8000298 <__aeabi_dsub>
 8006058:	4602      	mov	r2, r0
 800605a:	460b      	mov	r3, r1
 800605c:	4640      	mov	r0, r8
 800605e:	4649      	mov	r1, r9
 8006060:	f7fa fd44 	bl	8000aec <__aeabi_dcmplt>
 8006064:	2800      	cmp	r0, #0
 8006066:	f43f af35 	beq.w	8005ed4 <_dtoa_r+0x464>
 800606a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800606c:	1e6b      	subs	r3, r5, #1
 800606e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006070:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006074:	2b30      	cmp	r3, #48	; 0x30
 8006076:	d0f8      	beq.n	800606a <_dtoa_r+0x5fa>
 8006078:	9700      	str	r7, [sp, #0]
 800607a:	e049      	b.n	8006110 <_dtoa_r+0x6a0>
 800607c:	4b05      	ldr	r3, [pc, #20]	; (8006094 <_dtoa_r+0x624>)
 800607e:	f7fa fac3 	bl	8000608 <__aeabi_dmul>
 8006082:	4680      	mov	r8, r0
 8006084:	4689      	mov	r9, r1
 8006086:	e7bd      	b.n	8006004 <_dtoa_r+0x594>
 8006088:	080082c8 	.word	0x080082c8
 800608c:	080082a0 	.word	0x080082a0
 8006090:	3ff00000 	.word	0x3ff00000
 8006094:	40240000 	.word	0x40240000
 8006098:	401c0000 	.word	0x401c0000
 800609c:	40140000 	.word	0x40140000
 80060a0:	3fe00000 	.word	0x3fe00000
 80060a4:	9d01      	ldr	r5, [sp, #4]
 80060a6:	4656      	mov	r6, sl
 80060a8:	465f      	mov	r7, fp
 80060aa:	4642      	mov	r2, r8
 80060ac:	464b      	mov	r3, r9
 80060ae:	4630      	mov	r0, r6
 80060b0:	4639      	mov	r1, r7
 80060b2:	f7fa fbd3 	bl	800085c <__aeabi_ddiv>
 80060b6:	f7fa fd57 	bl	8000b68 <__aeabi_d2iz>
 80060ba:	4682      	mov	sl, r0
 80060bc:	f7fa fa3a 	bl	8000534 <__aeabi_i2d>
 80060c0:	4642      	mov	r2, r8
 80060c2:	464b      	mov	r3, r9
 80060c4:	f7fa faa0 	bl	8000608 <__aeabi_dmul>
 80060c8:	4602      	mov	r2, r0
 80060ca:	460b      	mov	r3, r1
 80060cc:	4630      	mov	r0, r6
 80060ce:	4639      	mov	r1, r7
 80060d0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80060d4:	f7fa f8e0 	bl	8000298 <__aeabi_dsub>
 80060d8:	f805 6b01 	strb.w	r6, [r5], #1
 80060dc:	9e01      	ldr	r6, [sp, #4]
 80060de:	9f03      	ldr	r7, [sp, #12]
 80060e0:	1bae      	subs	r6, r5, r6
 80060e2:	42b7      	cmp	r7, r6
 80060e4:	4602      	mov	r2, r0
 80060e6:	460b      	mov	r3, r1
 80060e8:	d135      	bne.n	8006156 <_dtoa_r+0x6e6>
 80060ea:	f7fa f8d7 	bl	800029c <__adddf3>
 80060ee:	4642      	mov	r2, r8
 80060f0:	464b      	mov	r3, r9
 80060f2:	4606      	mov	r6, r0
 80060f4:	460f      	mov	r7, r1
 80060f6:	f7fa fd17 	bl	8000b28 <__aeabi_dcmpgt>
 80060fa:	b9d0      	cbnz	r0, 8006132 <_dtoa_r+0x6c2>
 80060fc:	4642      	mov	r2, r8
 80060fe:	464b      	mov	r3, r9
 8006100:	4630      	mov	r0, r6
 8006102:	4639      	mov	r1, r7
 8006104:	f7fa fce8 	bl	8000ad8 <__aeabi_dcmpeq>
 8006108:	b110      	cbz	r0, 8006110 <_dtoa_r+0x6a0>
 800610a:	f01a 0f01 	tst.w	sl, #1
 800610e:	d110      	bne.n	8006132 <_dtoa_r+0x6c2>
 8006110:	4620      	mov	r0, r4
 8006112:	ee18 1a10 	vmov	r1, s16
 8006116:	f000 faf7 	bl	8006708 <_Bfree>
 800611a:	2300      	movs	r3, #0
 800611c:	9800      	ldr	r0, [sp, #0]
 800611e:	702b      	strb	r3, [r5, #0]
 8006120:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006122:	3001      	adds	r0, #1
 8006124:	6018      	str	r0, [r3, #0]
 8006126:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006128:	2b00      	cmp	r3, #0
 800612a:	f43f acf1 	beq.w	8005b10 <_dtoa_r+0xa0>
 800612e:	601d      	str	r5, [r3, #0]
 8006130:	e4ee      	b.n	8005b10 <_dtoa_r+0xa0>
 8006132:	9f00      	ldr	r7, [sp, #0]
 8006134:	462b      	mov	r3, r5
 8006136:	461d      	mov	r5, r3
 8006138:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800613c:	2a39      	cmp	r2, #57	; 0x39
 800613e:	d106      	bne.n	800614e <_dtoa_r+0x6de>
 8006140:	9a01      	ldr	r2, [sp, #4]
 8006142:	429a      	cmp	r2, r3
 8006144:	d1f7      	bne.n	8006136 <_dtoa_r+0x6c6>
 8006146:	9901      	ldr	r1, [sp, #4]
 8006148:	2230      	movs	r2, #48	; 0x30
 800614a:	3701      	adds	r7, #1
 800614c:	700a      	strb	r2, [r1, #0]
 800614e:	781a      	ldrb	r2, [r3, #0]
 8006150:	3201      	adds	r2, #1
 8006152:	701a      	strb	r2, [r3, #0]
 8006154:	e790      	b.n	8006078 <_dtoa_r+0x608>
 8006156:	4ba6      	ldr	r3, [pc, #664]	; (80063f0 <_dtoa_r+0x980>)
 8006158:	2200      	movs	r2, #0
 800615a:	f7fa fa55 	bl	8000608 <__aeabi_dmul>
 800615e:	2200      	movs	r2, #0
 8006160:	2300      	movs	r3, #0
 8006162:	4606      	mov	r6, r0
 8006164:	460f      	mov	r7, r1
 8006166:	f7fa fcb7 	bl	8000ad8 <__aeabi_dcmpeq>
 800616a:	2800      	cmp	r0, #0
 800616c:	d09d      	beq.n	80060aa <_dtoa_r+0x63a>
 800616e:	e7cf      	b.n	8006110 <_dtoa_r+0x6a0>
 8006170:	9a08      	ldr	r2, [sp, #32]
 8006172:	2a00      	cmp	r2, #0
 8006174:	f000 80d7 	beq.w	8006326 <_dtoa_r+0x8b6>
 8006178:	9a06      	ldr	r2, [sp, #24]
 800617a:	2a01      	cmp	r2, #1
 800617c:	f300 80ba 	bgt.w	80062f4 <_dtoa_r+0x884>
 8006180:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006182:	2a00      	cmp	r2, #0
 8006184:	f000 80b2 	beq.w	80062ec <_dtoa_r+0x87c>
 8006188:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800618c:	9e07      	ldr	r6, [sp, #28]
 800618e:	9d04      	ldr	r5, [sp, #16]
 8006190:	9a04      	ldr	r2, [sp, #16]
 8006192:	441a      	add	r2, r3
 8006194:	9204      	str	r2, [sp, #16]
 8006196:	9a05      	ldr	r2, [sp, #20]
 8006198:	2101      	movs	r1, #1
 800619a:	441a      	add	r2, r3
 800619c:	4620      	mov	r0, r4
 800619e:	9205      	str	r2, [sp, #20]
 80061a0:	f000 fb6a 	bl	8006878 <__i2b>
 80061a4:	4607      	mov	r7, r0
 80061a6:	2d00      	cmp	r5, #0
 80061a8:	dd0c      	ble.n	80061c4 <_dtoa_r+0x754>
 80061aa:	9b05      	ldr	r3, [sp, #20]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	dd09      	ble.n	80061c4 <_dtoa_r+0x754>
 80061b0:	42ab      	cmp	r3, r5
 80061b2:	9a04      	ldr	r2, [sp, #16]
 80061b4:	bfa8      	it	ge
 80061b6:	462b      	movge	r3, r5
 80061b8:	1ad2      	subs	r2, r2, r3
 80061ba:	9204      	str	r2, [sp, #16]
 80061bc:	9a05      	ldr	r2, [sp, #20]
 80061be:	1aed      	subs	r5, r5, r3
 80061c0:	1ad3      	subs	r3, r2, r3
 80061c2:	9305      	str	r3, [sp, #20]
 80061c4:	9b07      	ldr	r3, [sp, #28]
 80061c6:	b31b      	cbz	r3, 8006210 <_dtoa_r+0x7a0>
 80061c8:	9b08      	ldr	r3, [sp, #32]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	f000 80af 	beq.w	800632e <_dtoa_r+0x8be>
 80061d0:	2e00      	cmp	r6, #0
 80061d2:	dd13      	ble.n	80061fc <_dtoa_r+0x78c>
 80061d4:	4639      	mov	r1, r7
 80061d6:	4632      	mov	r2, r6
 80061d8:	4620      	mov	r0, r4
 80061da:	f000 fc0d 	bl	80069f8 <__pow5mult>
 80061de:	ee18 2a10 	vmov	r2, s16
 80061e2:	4601      	mov	r1, r0
 80061e4:	4607      	mov	r7, r0
 80061e6:	4620      	mov	r0, r4
 80061e8:	f000 fb5c 	bl	80068a4 <__multiply>
 80061ec:	ee18 1a10 	vmov	r1, s16
 80061f0:	4680      	mov	r8, r0
 80061f2:	4620      	mov	r0, r4
 80061f4:	f000 fa88 	bl	8006708 <_Bfree>
 80061f8:	ee08 8a10 	vmov	s16, r8
 80061fc:	9b07      	ldr	r3, [sp, #28]
 80061fe:	1b9a      	subs	r2, r3, r6
 8006200:	d006      	beq.n	8006210 <_dtoa_r+0x7a0>
 8006202:	ee18 1a10 	vmov	r1, s16
 8006206:	4620      	mov	r0, r4
 8006208:	f000 fbf6 	bl	80069f8 <__pow5mult>
 800620c:	ee08 0a10 	vmov	s16, r0
 8006210:	2101      	movs	r1, #1
 8006212:	4620      	mov	r0, r4
 8006214:	f000 fb30 	bl	8006878 <__i2b>
 8006218:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800621a:	2b00      	cmp	r3, #0
 800621c:	4606      	mov	r6, r0
 800621e:	f340 8088 	ble.w	8006332 <_dtoa_r+0x8c2>
 8006222:	461a      	mov	r2, r3
 8006224:	4601      	mov	r1, r0
 8006226:	4620      	mov	r0, r4
 8006228:	f000 fbe6 	bl	80069f8 <__pow5mult>
 800622c:	9b06      	ldr	r3, [sp, #24]
 800622e:	2b01      	cmp	r3, #1
 8006230:	4606      	mov	r6, r0
 8006232:	f340 8081 	ble.w	8006338 <_dtoa_r+0x8c8>
 8006236:	f04f 0800 	mov.w	r8, #0
 800623a:	6933      	ldr	r3, [r6, #16]
 800623c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006240:	6918      	ldr	r0, [r3, #16]
 8006242:	f000 fac9 	bl	80067d8 <__hi0bits>
 8006246:	f1c0 0020 	rsb	r0, r0, #32
 800624a:	9b05      	ldr	r3, [sp, #20]
 800624c:	4418      	add	r0, r3
 800624e:	f010 001f 	ands.w	r0, r0, #31
 8006252:	f000 8092 	beq.w	800637a <_dtoa_r+0x90a>
 8006256:	f1c0 0320 	rsb	r3, r0, #32
 800625a:	2b04      	cmp	r3, #4
 800625c:	f340 808a 	ble.w	8006374 <_dtoa_r+0x904>
 8006260:	f1c0 001c 	rsb	r0, r0, #28
 8006264:	9b04      	ldr	r3, [sp, #16]
 8006266:	4403      	add	r3, r0
 8006268:	9304      	str	r3, [sp, #16]
 800626a:	9b05      	ldr	r3, [sp, #20]
 800626c:	4403      	add	r3, r0
 800626e:	4405      	add	r5, r0
 8006270:	9305      	str	r3, [sp, #20]
 8006272:	9b04      	ldr	r3, [sp, #16]
 8006274:	2b00      	cmp	r3, #0
 8006276:	dd07      	ble.n	8006288 <_dtoa_r+0x818>
 8006278:	ee18 1a10 	vmov	r1, s16
 800627c:	461a      	mov	r2, r3
 800627e:	4620      	mov	r0, r4
 8006280:	f000 fc14 	bl	8006aac <__lshift>
 8006284:	ee08 0a10 	vmov	s16, r0
 8006288:	9b05      	ldr	r3, [sp, #20]
 800628a:	2b00      	cmp	r3, #0
 800628c:	dd05      	ble.n	800629a <_dtoa_r+0x82a>
 800628e:	4631      	mov	r1, r6
 8006290:	461a      	mov	r2, r3
 8006292:	4620      	mov	r0, r4
 8006294:	f000 fc0a 	bl	8006aac <__lshift>
 8006298:	4606      	mov	r6, r0
 800629a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800629c:	2b00      	cmp	r3, #0
 800629e:	d06e      	beq.n	800637e <_dtoa_r+0x90e>
 80062a0:	ee18 0a10 	vmov	r0, s16
 80062a4:	4631      	mov	r1, r6
 80062a6:	f000 fc71 	bl	8006b8c <__mcmp>
 80062aa:	2800      	cmp	r0, #0
 80062ac:	da67      	bge.n	800637e <_dtoa_r+0x90e>
 80062ae:	9b00      	ldr	r3, [sp, #0]
 80062b0:	3b01      	subs	r3, #1
 80062b2:	ee18 1a10 	vmov	r1, s16
 80062b6:	9300      	str	r3, [sp, #0]
 80062b8:	220a      	movs	r2, #10
 80062ba:	2300      	movs	r3, #0
 80062bc:	4620      	mov	r0, r4
 80062be:	f000 fa45 	bl	800674c <__multadd>
 80062c2:	9b08      	ldr	r3, [sp, #32]
 80062c4:	ee08 0a10 	vmov	s16, r0
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	f000 81b1 	beq.w	8006630 <_dtoa_r+0xbc0>
 80062ce:	2300      	movs	r3, #0
 80062d0:	4639      	mov	r1, r7
 80062d2:	220a      	movs	r2, #10
 80062d4:	4620      	mov	r0, r4
 80062d6:	f000 fa39 	bl	800674c <__multadd>
 80062da:	9b02      	ldr	r3, [sp, #8]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	4607      	mov	r7, r0
 80062e0:	f300 808e 	bgt.w	8006400 <_dtoa_r+0x990>
 80062e4:	9b06      	ldr	r3, [sp, #24]
 80062e6:	2b02      	cmp	r3, #2
 80062e8:	dc51      	bgt.n	800638e <_dtoa_r+0x91e>
 80062ea:	e089      	b.n	8006400 <_dtoa_r+0x990>
 80062ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80062ee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80062f2:	e74b      	b.n	800618c <_dtoa_r+0x71c>
 80062f4:	9b03      	ldr	r3, [sp, #12]
 80062f6:	1e5e      	subs	r6, r3, #1
 80062f8:	9b07      	ldr	r3, [sp, #28]
 80062fa:	42b3      	cmp	r3, r6
 80062fc:	bfbf      	itttt	lt
 80062fe:	9b07      	ldrlt	r3, [sp, #28]
 8006300:	9607      	strlt	r6, [sp, #28]
 8006302:	1af2      	sublt	r2, r6, r3
 8006304:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006306:	bfb6      	itet	lt
 8006308:	189b      	addlt	r3, r3, r2
 800630a:	1b9e      	subge	r6, r3, r6
 800630c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800630e:	9b03      	ldr	r3, [sp, #12]
 8006310:	bfb8      	it	lt
 8006312:	2600      	movlt	r6, #0
 8006314:	2b00      	cmp	r3, #0
 8006316:	bfb7      	itett	lt
 8006318:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800631c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8006320:	1a9d      	sublt	r5, r3, r2
 8006322:	2300      	movlt	r3, #0
 8006324:	e734      	b.n	8006190 <_dtoa_r+0x720>
 8006326:	9e07      	ldr	r6, [sp, #28]
 8006328:	9d04      	ldr	r5, [sp, #16]
 800632a:	9f08      	ldr	r7, [sp, #32]
 800632c:	e73b      	b.n	80061a6 <_dtoa_r+0x736>
 800632e:	9a07      	ldr	r2, [sp, #28]
 8006330:	e767      	b.n	8006202 <_dtoa_r+0x792>
 8006332:	9b06      	ldr	r3, [sp, #24]
 8006334:	2b01      	cmp	r3, #1
 8006336:	dc18      	bgt.n	800636a <_dtoa_r+0x8fa>
 8006338:	f1ba 0f00 	cmp.w	sl, #0
 800633c:	d115      	bne.n	800636a <_dtoa_r+0x8fa>
 800633e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006342:	b993      	cbnz	r3, 800636a <_dtoa_r+0x8fa>
 8006344:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006348:	0d1b      	lsrs	r3, r3, #20
 800634a:	051b      	lsls	r3, r3, #20
 800634c:	b183      	cbz	r3, 8006370 <_dtoa_r+0x900>
 800634e:	9b04      	ldr	r3, [sp, #16]
 8006350:	3301      	adds	r3, #1
 8006352:	9304      	str	r3, [sp, #16]
 8006354:	9b05      	ldr	r3, [sp, #20]
 8006356:	3301      	adds	r3, #1
 8006358:	9305      	str	r3, [sp, #20]
 800635a:	f04f 0801 	mov.w	r8, #1
 800635e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006360:	2b00      	cmp	r3, #0
 8006362:	f47f af6a 	bne.w	800623a <_dtoa_r+0x7ca>
 8006366:	2001      	movs	r0, #1
 8006368:	e76f      	b.n	800624a <_dtoa_r+0x7da>
 800636a:	f04f 0800 	mov.w	r8, #0
 800636e:	e7f6      	b.n	800635e <_dtoa_r+0x8ee>
 8006370:	4698      	mov	r8, r3
 8006372:	e7f4      	b.n	800635e <_dtoa_r+0x8ee>
 8006374:	f43f af7d 	beq.w	8006272 <_dtoa_r+0x802>
 8006378:	4618      	mov	r0, r3
 800637a:	301c      	adds	r0, #28
 800637c:	e772      	b.n	8006264 <_dtoa_r+0x7f4>
 800637e:	9b03      	ldr	r3, [sp, #12]
 8006380:	2b00      	cmp	r3, #0
 8006382:	dc37      	bgt.n	80063f4 <_dtoa_r+0x984>
 8006384:	9b06      	ldr	r3, [sp, #24]
 8006386:	2b02      	cmp	r3, #2
 8006388:	dd34      	ble.n	80063f4 <_dtoa_r+0x984>
 800638a:	9b03      	ldr	r3, [sp, #12]
 800638c:	9302      	str	r3, [sp, #8]
 800638e:	9b02      	ldr	r3, [sp, #8]
 8006390:	b96b      	cbnz	r3, 80063ae <_dtoa_r+0x93e>
 8006392:	4631      	mov	r1, r6
 8006394:	2205      	movs	r2, #5
 8006396:	4620      	mov	r0, r4
 8006398:	f000 f9d8 	bl	800674c <__multadd>
 800639c:	4601      	mov	r1, r0
 800639e:	4606      	mov	r6, r0
 80063a0:	ee18 0a10 	vmov	r0, s16
 80063a4:	f000 fbf2 	bl	8006b8c <__mcmp>
 80063a8:	2800      	cmp	r0, #0
 80063aa:	f73f adbb 	bgt.w	8005f24 <_dtoa_r+0x4b4>
 80063ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063b0:	9d01      	ldr	r5, [sp, #4]
 80063b2:	43db      	mvns	r3, r3
 80063b4:	9300      	str	r3, [sp, #0]
 80063b6:	f04f 0800 	mov.w	r8, #0
 80063ba:	4631      	mov	r1, r6
 80063bc:	4620      	mov	r0, r4
 80063be:	f000 f9a3 	bl	8006708 <_Bfree>
 80063c2:	2f00      	cmp	r7, #0
 80063c4:	f43f aea4 	beq.w	8006110 <_dtoa_r+0x6a0>
 80063c8:	f1b8 0f00 	cmp.w	r8, #0
 80063cc:	d005      	beq.n	80063da <_dtoa_r+0x96a>
 80063ce:	45b8      	cmp	r8, r7
 80063d0:	d003      	beq.n	80063da <_dtoa_r+0x96a>
 80063d2:	4641      	mov	r1, r8
 80063d4:	4620      	mov	r0, r4
 80063d6:	f000 f997 	bl	8006708 <_Bfree>
 80063da:	4639      	mov	r1, r7
 80063dc:	4620      	mov	r0, r4
 80063de:	f000 f993 	bl	8006708 <_Bfree>
 80063e2:	e695      	b.n	8006110 <_dtoa_r+0x6a0>
 80063e4:	2600      	movs	r6, #0
 80063e6:	4637      	mov	r7, r6
 80063e8:	e7e1      	b.n	80063ae <_dtoa_r+0x93e>
 80063ea:	9700      	str	r7, [sp, #0]
 80063ec:	4637      	mov	r7, r6
 80063ee:	e599      	b.n	8005f24 <_dtoa_r+0x4b4>
 80063f0:	40240000 	.word	0x40240000
 80063f4:	9b08      	ldr	r3, [sp, #32]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	f000 80ca 	beq.w	8006590 <_dtoa_r+0xb20>
 80063fc:	9b03      	ldr	r3, [sp, #12]
 80063fe:	9302      	str	r3, [sp, #8]
 8006400:	2d00      	cmp	r5, #0
 8006402:	dd05      	ble.n	8006410 <_dtoa_r+0x9a0>
 8006404:	4639      	mov	r1, r7
 8006406:	462a      	mov	r2, r5
 8006408:	4620      	mov	r0, r4
 800640a:	f000 fb4f 	bl	8006aac <__lshift>
 800640e:	4607      	mov	r7, r0
 8006410:	f1b8 0f00 	cmp.w	r8, #0
 8006414:	d05b      	beq.n	80064ce <_dtoa_r+0xa5e>
 8006416:	6879      	ldr	r1, [r7, #4]
 8006418:	4620      	mov	r0, r4
 800641a:	f000 f935 	bl	8006688 <_Balloc>
 800641e:	4605      	mov	r5, r0
 8006420:	b928      	cbnz	r0, 800642e <_dtoa_r+0x9be>
 8006422:	4b87      	ldr	r3, [pc, #540]	; (8006640 <_dtoa_r+0xbd0>)
 8006424:	4602      	mov	r2, r0
 8006426:	f240 21ea 	movw	r1, #746	; 0x2ea
 800642a:	f7ff bb3b 	b.w	8005aa4 <_dtoa_r+0x34>
 800642e:	693a      	ldr	r2, [r7, #16]
 8006430:	3202      	adds	r2, #2
 8006432:	0092      	lsls	r2, r2, #2
 8006434:	f107 010c 	add.w	r1, r7, #12
 8006438:	300c      	adds	r0, #12
 800643a:	f000 f90b 	bl	8006654 <memcpy>
 800643e:	2201      	movs	r2, #1
 8006440:	4629      	mov	r1, r5
 8006442:	4620      	mov	r0, r4
 8006444:	f000 fb32 	bl	8006aac <__lshift>
 8006448:	9b01      	ldr	r3, [sp, #4]
 800644a:	f103 0901 	add.w	r9, r3, #1
 800644e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8006452:	4413      	add	r3, r2
 8006454:	9305      	str	r3, [sp, #20]
 8006456:	f00a 0301 	and.w	r3, sl, #1
 800645a:	46b8      	mov	r8, r7
 800645c:	9304      	str	r3, [sp, #16]
 800645e:	4607      	mov	r7, r0
 8006460:	4631      	mov	r1, r6
 8006462:	ee18 0a10 	vmov	r0, s16
 8006466:	f7ff fa75 	bl	8005954 <quorem>
 800646a:	4641      	mov	r1, r8
 800646c:	9002      	str	r0, [sp, #8]
 800646e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006472:	ee18 0a10 	vmov	r0, s16
 8006476:	f000 fb89 	bl	8006b8c <__mcmp>
 800647a:	463a      	mov	r2, r7
 800647c:	9003      	str	r0, [sp, #12]
 800647e:	4631      	mov	r1, r6
 8006480:	4620      	mov	r0, r4
 8006482:	f000 fb9f 	bl	8006bc4 <__mdiff>
 8006486:	68c2      	ldr	r2, [r0, #12]
 8006488:	f109 3bff 	add.w	fp, r9, #4294967295
 800648c:	4605      	mov	r5, r0
 800648e:	bb02      	cbnz	r2, 80064d2 <_dtoa_r+0xa62>
 8006490:	4601      	mov	r1, r0
 8006492:	ee18 0a10 	vmov	r0, s16
 8006496:	f000 fb79 	bl	8006b8c <__mcmp>
 800649a:	4602      	mov	r2, r0
 800649c:	4629      	mov	r1, r5
 800649e:	4620      	mov	r0, r4
 80064a0:	9207      	str	r2, [sp, #28]
 80064a2:	f000 f931 	bl	8006708 <_Bfree>
 80064a6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80064aa:	ea43 0102 	orr.w	r1, r3, r2
 80064ae:	9b04      	ldr	r3, [sp, #16]
 80064b0:	430b      	orrs	r3, r1
 80064b2:	464d      	mov	r5, r9
 80064b4:	d10f      	bne.n	80064d6 <_dtoa_r+0xa66>
 80064b6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80064ba:	d02a      	beq.n	8006512 <_dtoa_r+0xaa2>
 80064bc:	9b03      	ldr	r3, [sp, #12]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	dd02      	ble.n	80064c8 <_dtoa_r+0xa58>
 80064c2:	9b02      	ldr	r3, [sp, #8]
 80064c4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80064c8:	f88b a000 	strb.w	sl, [fp]
 80064cc:	e775      	b.n	80063ba <_dtoa_r+0x94a>
 80064ce:	4638      	mov	r0, r7
 80064d0:	e7ba      	b.n	8006448 <_dtoa_r+0x9d8>
 80064d2:	2201      	movs	r2, #1
 80064d4:	e7e2      	b.n	800649c <_dtoa_r+0xa2c>
 80064d6:	9b03      	ldr	r3, [sp, #12]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	db04      	blt.n	80064e6 <_dtoa_r+0xa76>
 80064dc:	9906      	ldr	r1, [sp, #24]
 80064de:	430b      	orrs	r3, r1
 80064e0:	9904      	ldr	r1, [sp, #16]
 80064e2:	430b      	orrs	r3, r1
 80064e4:	d122      	bne.n	800652c <_dtoa_r+0xabc>
 80064e6:	2a00      	cmp	r2, #0
 80064e8:	ddee      	ble.n	80064c8 <_dtoa_r+0xa58>
 80064ea:	ee18 1a10 	vmov	r1, s16
 80064ee:	2201      	movs	r2, #1
 80064f0:	4620      	mov	r0, r4
 80064f2:	f000 fadb 	bl	8006aac <__lshift>
 80064f6:	4631      	mov	r1, r6
 80064f8:	ee08 0a10 	vmov	s16, r0
 80064fc:	f000 fb46 	bl	8006b8c <__mcmp>
 8006500:	2800      	cmp	r0, #0
 8006502:	dc03      	bgt.n	800650c <_dtoa_r+0xa9c>
 8006504:	d1e0      	bne.n	80064c8 <_dtoa_r+0xa58>
 8006506:	f01a 0f01 	tst.w	sl, #1
 800650a:	d0dd      	beq.n	80064c8 <_dtoa_r+0xa58>
 800650c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006510:	d1d7      	bne.n	80064c2 <_dtoa_r+0xa52>
 8006512:	2339      	movs	r3, #57	; 0x39
 8006514:	f88b 3000 	strb.w	r3, [fp]
 8006518:	462b      	mov	r3, r5
 800651a:	461d      	mov	r5, r3
 800651c:	3b01      	subs	r3, #1
 800651e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006522:	2a39      	cmp	r2, #57	; 0x39
 8006524:	d071      	beq.n	800660a <_dtoa_r+0xb9a>
 8006526:	3201      	adds	r2, #1
 8006528:	701a      	strb	r2, [r3, #0]
 800652a:	e746      	b.n	80063ba <_dtoa_r+0x94a>
 800652c:	2a00      	cmp	r2, #0
 800652e:	dd07      	ble.n	8006540 <_dtoa_r+0xad0>
 8006530:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006534:	d0ed      	beq.n	8006512 <_dtoa_r+0xaa2>
 8006536:	f10a 0301 	add.w	r3, sl, #1
 800653a:	f88b 3000 	strb.w	r3, [fp]
 800653e:	e73c      	b.n	80063ba <_dtoa_r+0x94a>
 8006540:	9b05      	ldr	r3, [sp, #20]
 8006542:	f809 ac01 	strb.w	sl, [r9, #-1]
 8006546:	4599      	cmp	r9, r3
 8006548:	d047      	beq.n	80065da <_dtoa_r+0xb6a>
 800654a:	ee18 1a10 	vmov	r1, s16
 800654e:	2300      	movs	r3, #0
 8006550:	220a      	movs	r2, #10
 8006552:	4620      	mov	r0, r4
 8006554:	f000 f8fa 	bl	800674c <__multadd>
 8006558:	45b8      	cmp	r8, r7
 800655a:	ee08 0a10 	vmov	s16, r0
 800655e:	f04f 0300 	mov.w	r3, #0
 8006562:	f04f 020a 	mov.w	r2, #10
 8006566:	4641      	mov	r1, r8
 8006568:	4620      	mov	r0, r4
 800656a:	d106      	bne.n	800657a <_dtoa_r+0xb0a>
 800656c:	f000 f8ee 	bl	800674c <__multadd>
 8006570:	4680      	mov	r8, r0
 8006572:	4607      	mov	r7, r0
 8006574:	f109 0901 	add.w	r9, r9, #1
 8006578:	e772      	b.n	8006460 <_dtoa_r+0x9f0>
 800657a:	f000 f8e7 	bl	800674c <__multadd>
 800657e:	4639      	mov	r1, r7
 8006580:	4680      	mov	r8, r0
 8006582:	2300      	movs	r3, #0
 8006584:	220a      	movs	r2, #10
 8006586:	4620      	mov	r0, r4
 8006588:	f000 f8e0 	bl	800674c <__multadd>
 800658c:	4607      	mov	r7, r0
 800658e:	e7f1      	b.n	8006574 <_dtoa_r+0xb04>
 8006590:	9b03      	ldr	r3, [sp, #12]
 8006592:	9302      	str	r3, [sp, #8]
 8006594:	9d01      	ldr	r5, [sp, #4]
 8006596:	ee18 0a10 	vmov	r0, s16
 800659a:	4631      	mov	r1, r6
 800659c:	f7ff f9da 	bl	8005954 <quorem>
 80065a0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80065a4:	9b01      	ldr	r3, [sp, #4]
 80065a6:	f805 ab01 	strb.w	sl, [r5], #1
 80065aa:	1aea      	subs	r2, r5, r3
 80065ac:	9b02      	ldr	r3, [sp, #8]
 80065ae:	4293      	cmp	r3, r2
 80065b0:	dd09      	ble.n	80065c6 <_dtoa_r+0xb56>
 80065b2:	ee18 1a10 	vmov	r1, s16
 80065b6:	2300      	movs	r3, #0
 80065b8:	220a      	movs	r2, #10
 80065ba:	4620      	mov	r0, r4
 80065bc:	f000 f8c6 	bl	800674c <__multadd>
 80065c0:	ee08 0a10 	vmov	s16, r0
 80065c4:	e7e7      	b.n	8006596 <_dtoa_r+0xb26>
 80065c6:	9b02      	ldr	r3, [sp, #8]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	bfc8      	it	gt
 80065cc:	461d      	movgt	r5, r3
 80065ce:	9b01      	ldr	r3, [sp, #4]
 80065d0:	bfd8      	it	le
 80065d2:	2501      	movle	r5, #1
 80065d4:	441d      	add	r5, r3
 80065d6:	f04f 0800 	mov.w	r8, #0
 80065da:	ee18 1a10 	vmov	r1, s16
 80065de:	2201      	movs	r2, #1
 80065e0:	4620      	mov	r0, r4
 80065e2:	f000 fa63 	bl	8006aac <__lshift>
 80065e6:	4631      	mov	r1, r6
 80065e8:	ee08 0a10 	vmov	s16, r0
 80065ec:	f000 face 	bl	8006b8c <__mcmp>
 80065f0:	2800      	cmp	r0, #0
 80065f2:	dc91      	bgt.n	8006518 <_dtoa_r+0xaa8>
 80065f4:	d102      	bne.n	80065fc <_dtoa_r+0xb8c>
 80065f6:	f01a 0f01 	tst.w	sl, #1
 80065fa:	d18d      	bne.n	8006518 <_dtoa_r+0xaa8>
 80065fc:	462b      	mov	r3, r5
 80065fe:	461d      	mov	r5, r3
 8006600:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006604:	2a30      	cmp	r2, #48	; 0x30
 8006606:	d0fa      	beq.n	80065fe <_dtoa_r+0xb8e>
 8006608:	e6d7      	b.n	80063ba <_dtoa_r+0x94a>
 800660a:	9a01      	ldr	r2, [sp, #4]
 800660c:	429a      	cmp	r2, r3
 800660e:	d184      	bne.n	800651a <_dtoa_r+0xaaa>
 8006610:	9b00      	ldr	r3, [sp, #0]
 8006612:	3301      	adds	r3, #1
 8006614:	9300      	str	r3, [sp, #0]
 8006616:	2331      	movs	r3, #49	; 0x31
 8006618:	7013      	strb	r3, [r2, #0]
 800661a:	e6ce      	b.n	80063ba <_dtoa_r+0x94a>
 800661c:	4b09      	ldr	r3, [pc, #36]	; (8006644 <_dtoa_r+0xbd4>)
 800661e:	f7ff ba95 	b.w	8005b4c <_dtoa_r+0xdc>
 8006622:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006624:	2b00      	cmp	r3, #0
 8006626:	f47f aa6e 	bne.w	8005b06 <_dtoa_r+0x96>
 800662a:	4b07      	ldr	r3, [pc, #28]	; (8006648 <_dtoa_r+0xbd8>)
 800662c:	f7ff ba8e 	b.w	8005b4c <_dtoa_r+0xdc>
 8006630:	9b02      	ldr	r3, [sp, #8]
 8006632:	2b00      	cmp	r3, #0
 8006634:	dcae      	bgt.n	8006594 <_dtoa_r+0xb24>
 8006636:	9b06      	ldr	r3, [sp, #24]
 8006638:	2b02      	cmp	r3, #2
 800663a:	f73f aea8 	bgt.w	800638e <_dtoa_r+0x91e>
 800663e:	e7a9      	b.n	8006594 <_dtoa_r+0xb24>
 8006640:	0800822f 	.word	0x0800822f
 8006644:	0800818c 	.word	0x0800818c
 8006648:	080081b0 	.word	0x080081b0

0800664c <_localeconv_r>:
 800664c:	4800      	ldr	r0, [pc, #0]	; (8006650 <_localeconv_r+0x4>)
 800664e:	4770      	bx	lr
 8006650:	20000160 	.word	0x20000160

08006654 <memcpy>:
 8006654:	440a      	add	r2, r1
 8006656:	4291      	cmp	r1, r2
 8006658:	f100 33ff 	add.w	r3, r0, #4294967295
 800665c:	d100      	bne.n	8006660 <memcpy+0xc>
 800665e:	4770      	bx	lr
 8006660:	b510      	push	{r4, lr}
 8006662:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006666:	f803 4f01 	strb.w	r4, [r3, #1]!
 800666a:	4291      	cmp	r1, r2
 800666c:	d1f9      	bne.n	8006662 <memcpy+0xe>
 800666e:	bd10      	pop	{r4, pc}

08006670 <__malloc_lock>:
 8006670:	4801      	ldr	r0, [pc, #4]	; (8006678 <__malloc_lock+0x8>)
 8006672:	f000 bd30 	b.w	80070d6 <__retarget_lock_acquire_recursive>
 8006676:	bf00      	nop
 8006678:	20000380 	.word	0x20000380

0800667c <__malloc_unlock>:
 800667c:	4801      	ldr	r0, [pc, #4]	; (8006684 <__malloc_unlock+0x8>)
 800667e:	f000 bd2b 	b.w	80070d8 <__retarget_lock_release_recursive>
 8006682:	bf00      	nop
 8006684:	20000380 	.word	0x20000380

08006688 <_Balloc>:
 8006688:	b570      	push	{r4, r5, r6, lr}
 800668a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800668c:	4604      	mov	r4, r0
 800668e:	460d      	mov	r5, r1
 8006690:	b976      	cbnz	r6, 80066b0 <_Balloc+0x28>
 8006692:	2010      	movs	r0, #16
 8006694:	f7fe fbcc 	bl	8004e30 <malloc>
 8006698:	4602      	mov	r2, r0
 800669a:	6260      	str	r0, [r4, #36]	; 0x24
 800669c:	b920      	cbnz	r0, 80066a8 <_Balloc+0x20>
 800669e:	4b18      	ldr	r3, [pc, #96]	; (8006700 <_Balloc+0x78>)
 80066a0:	4818      	ldr	r0, [pc, #96]	; (8006704 <_Balloc+0x7c>)
 80066a2:	2166      	movs	r1, #102	; 0x66
 80066a4:	f000 fce6 	bl	8007074 <__assert_func>
 80066a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80066ac:	6006      	str	r6, [r0, #0]
 80066ae:	60c6      	str	r6, [r0, #12]
 80066b0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80066b2:	68f3      	ldr	r3, [r6, #12]
 80066b4:	b183      	cbz	r3, 80066d8 <_Balloc+0x50>
 80066b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80066b8:	68db      	ldr	r3, [r3, #12]
 80066ba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80066be:	b9b8      	cbnz	r0, 80066f0 <_Balloc+0x68>
 80066c0:	2101      	movs	r1, #1
 80066c2:	fa01 f605 	lsl.w	r6, r1, r5
 80066c6:	1d72      	adds	r2, r6, #5
 80066c8:	0092      	lsls	r2, r2, #2
 80066ca:	4620      	mov	r0, r4
 80066cc:	f000 fb60 	bl	8006d90 <_calloc_r>
 80066d0:	b160      	cbz	r0, 80066ec <_Balloc+0x64>
 80066d2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80066d6:	e00e      	b.n	80066f6 <_Balloc+0x6e>
 80066d8:	2221      	movs	r2, #33	; 0x21
 80066da:	2104      	movs	r1, #4
 80066dc:	4620      	mov	r0, r4
 80066de:	f000 fb57 	bl	8006d90 <_calloc_r>
 80066e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80066e4:	60f0      	str	r0, [r6, #12]
 80066e6:	68db      	ldr	r3, [r3, #12]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d1e4      	bne.n	80066b6 <_Balloc+0x2e>
 80066ec:	2000      	movs	r0, #0
 80066ee:	bd70      	pop	{r4, r5, r6, pc}
 80066f0:	6802      	ldr	r2, [r0, #0]
 80066f2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80066f6:	2300      	movs	r3, #0
 80066f8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80066fc:	e7f7      	b.n	80066ee <_Balloc+0x66>
 80066fe:	bf00      	nop
 8006700:	080081bd 	.word	0x080081bd
 8006704:	08008240 	.word	0x08008240

08006708 <_Bfree>:
 8006708:	b570      	push	{r4, r5, r6, lr}
 800670a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800670c:	4605      	mov	r5, r0
 800670e:	460c      	mov	r4, r1
 8006710:	b976      	cbnz	r6, 8006730 <_Bfree+0x28>
 8006712:	2010      	movs	r0, #16
 8006714:	f7fe fb8c 	bl	8004e30 <malloc>
 8006718:	4602      	mov	r2, r0
 800671a:	6268      	str	r0, [r5, #36]	; 0x24
 800671c:	b920      	cbnz	r0, 8006728 <_Bfree+0x20>
 800671e:	4b09      	ldr	r3, [pc, #36]	; (8006744 <_Bfree+0x3c>)
 8006720:	4809      	ldr	r0, [pc, #36]	; (8006748 <_Bfree+0x40>)
 8006722:	218a      	movs	r1, #138	; 0x8a
 8006724:	f000 fca6 	bl	8007074 <__assert_func>
 8006728:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800672c:	6006      	str	r6, [r0, #0]
 800672e:	60c6      	str	r6, [r0, #12]
 8006730:	b13c      	cbz	r4, 8006742 <_Bfree+0x3a>
 8006732:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006734:	6862      	ldr	r2, [r4, #4]
 8006736:	68db      	ldr	r3, [r3, #12]
 8006738:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800673c:	6021      	str	r1, [r4, #0]
 800673e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006742:	bd70      	pop	{r4, r5, r6, pc}
 8006744:	080081bd 	.word	0x080081bd
 8006748:	08008240 	.word	0x08008240

0800674c <__multadd>:
 800674c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006750:	690d      	ldr	r5, [r1, #16]
 8006752:	4607      	mov	r7, r0
 8006754:	460c      	mov	r4, r1
 8006756:	461e      	mov	r6, r3
 8006758:	f101 0c14 	add.w	ip, r1, #20
 800675c:	2000      	movs	r0, #0
 800675e:	f8dc 3000 	ldr.w	r3, [ip]
 8006762:	b299      	uxth	r1, r3
 8006764:	fb02 6101 	mla	r1, r2, r1, r6
 8006768:	0c1e      	lsrs	r6, r3, #16
 800676a:	0c0b      	lsrs	r3, r1, #16
 800676c:	fb02 3306 	mla	r3, r2, r6, r3
 8006770:	b289      	uxth	r1, r1
 8006772:	3001      	adds	r0, #1
 8006774:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006778:	4285      	cmp	r5, r0
 800677a:	f84c 1b04 	str.w	r1, [ip], #4
 800677e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006782:	dcec      	bgt.n	800675e <__multadd+0x12>
 8006784:	b30e      	cbz	r6, 80067ca <__multadd+0x7e>
 8006786:	68a3      	ldr	r3, [r4, #8]
 8006788:	42ab      	cmp	r3, r5
 800678a:	dc19      	bgt.n	80067c0 <__multadd+0x74>
 800678c:	6861      	ldr	r1, [r4, #4]
 800678e:	4638      	mov	r0, r7
 8006790:	3101      	adds	r1, #1
 8006792:	f7ff ff79 	bl	8006688 <_Balloc>
 8006796:	4680      	mov	r8, r0
 8006798:	b928      	cbnz	r0, 80067a6 <__multadd+0x5a>
 800679a:	4602      	mov	r2, r0
 800679c:	4b0c      	ldr	r3, [pc, #48]	; (80067d0 <__multadd+0x84>)
 800679e:	480d      	ldr	r0, [pc, #52]	; (80067d4 <__multadd+0x88>)
 80067a0:	21b5      	movs	r1, #181	; 0xb5
 80067a2:	f000 fc67 	bl	8007074 <__assert_func>
 80067a6:	6922      	ldr	r2, [r4, #16]
 80067a8:	3202      	adds	r2, #2
 80067aa:	f104 010c 	add.w	r1, r4, #12
 80067ae:	0092      	lsls	r2, r2, #2
 80067b0:	300c      	adds	r0, #12
 80067b2:	f7ff ff4f 	bl	8006654 <memcpy>
 80067b6:	4621      	mov	r1, r4
 80067b8:	4638      	mov	r0, r7
 80067ba:	f7ff ffa5 	bl	8006708 <_Bfree>
 80067be:	4644      	mov	r4, r8
 80067c0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80067c4:	3501      	adds	r5, #1
 80067c6:	615e      	str	r6, [r3, #20]
 80067c8:	6125      	str	r5, [r4, #16]
 80067ca:	4620      	mov	r0, r4
 80067cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80067d0:	0800822f 	.word	0x0800822f
 80067d4:	08008240 	.word	0x08008240

080067d8 <__hi0bits>:
 80067d8:	0c03      	lsrs	r3, r0, #16
 80067da:	041b      	lsls	r3, r3, #16
 80067dc:	b9d3      	cbnz	r3, 8006814 <__hi0bits+0x3c>
 80067de:	0400      	lsls	r0, r0, #16
 80067e0:	2310      	movs	r3, #16
 80067e2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80067e6:	bf04      	itt	eq
 80067e8:	0200      	lsleq	r0, r0, #8
 80067ea:	3308      	addeq	r3, #8
 80067ec:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80067f0:	bf04      	itt	eq
 80067f2:	0100      	lsleq	r0, r0, #4
 80067f4:	3304      	addeq	r3, #4
 80067f6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80067fa:	bf04      	itt	eq
 80067fc:	0080      	lsleq	r0, r0, #2
 80067fe:	3302      	addeq	r3, #2
 8006800:	2800      	cmp	r0, #0
 8006802:	db05      	blt.n	8006810 <__hi0bits+0x38>
 8006804:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006808:	f103 0301 	add.w	r3, r3, #1
 800680c:	bf08      	it	eq
 800680e:	2320      	moveq	r3, #32
 8006810:	4618      	mov	r0, r3
 8006812:	4770      	bx	lr
 8006814:	2300      	movs	r3, #0
 8006816:	e7e4      	b.n	80067e2 <__hi0bits+0xa>

08006818 <__lo0bits>:
 8006818:	6803      	ldr	r3, [r0, #0]
 800681a:	f013 0207 	ands.w	r2, r3, #7
 800681e:	4601      	mov	r1, r0
 8006820:	d00b      	beq.n	800683a <__lo0bits+0x22>
 8006822:	07da      	lsls	r2, r3, #31
 8006824:	d423      	bmi.n	800686e <__lo0bits+0x56>
 8006826:	0798      	lsls	r0, r3, #30
 8006828:	bf49      	itett	mi
 800682a:	085b      	lsrmi	r3, r3, #1
 800682c:	089b      	lsrpl	r3, r3, #2
 800682e:	2001      	movmi	r0, #1
 8006830:	600b      	strmi	r3, [r1, #0]
 8006832:	bf5c      	itt	pl
 8006834:	600b      	strpl	r3, [r1, #0]
 8006836:	2002      	movpl	r0, #2
 8006838:	4770      	bx	lr
 800683a:	b298      	uxth	r0, r3
 800683c:	b9a8      	cbnz	r0, 800686a <__lo0bits+0x52>
 800683e:	0c1b      	lsrs	r3, r3, #16
 8006840:	2010      	movs	r0, #16
 8006842:	b2da      	uxtb	r2, r3
 8006844:	b90a      	cbnz	r2, 800684a <__lo0bits+0x32>
 8006846:	3008      	adds	r0, #8
 8006848:	0a1b      	lsrs	r3, r3, #8
 800684a:	071a      	lsls	r2, r3, #28
 800684c:	bf04      	itt	eq
 800684e:	091b      	lsreq	r3, r3, #4
 8006850:	3004      	addeq	r0, #4
 8006852:	079a      	lsls	r2, r3, #30
 8006854:	bf04      	itt	eq
 8006856:	089b      	lsreq	r3, r3, #2
 8006858:	3002      	addeq	r0, #2
 800685a:	07da      	lsls	r2, r3, #31
 800685c:	d403      	bmi.n	8006866 <__lo0bits+0x4e>
 800685e:	085b      	lsrs	r3, r3, #1
 8006860:	f100 0001 	add.w	r0, r0, #1
 8006864:	d005      	beq.n	8006872 <__lo0bits+0x5a>
 8006866:	600b      	str	r3, [r1, #0]
 8006868:	4770      	bx	lr
 800686a:	4610      	mov	r0, r2
 800686c:	e7e9      	b.n	8006842 <__lo0bits+0x2a>
 800686e:	2000      	movs	r0, #0
 8006870:	4770      	bx	lr
 8006872:	2020      	movs	r0, #32
 8006874:	4770      	bx	lr
	...

08006878 <__i2b>:
 8006878:	b510      	push	{r4, lr}
 800687a:	460c      	mov	r4, r1
 800687c:	2101      	movs	r1, #1
 800687e:	f7ff ff03 	bl	8006688 <_Balloc>
 8006882:	4602      	mov	r2, r0
 8006884:	b928      	cbnz	r0, 8006892 <__i2b+0x1a>
 8006886:	4b05      	ldr	r3, [pc, #20]	; (800689c <__i2b+0x24>)
 8006888:	4805      	ldr	r0, [pc, #20]	; (80068a0 <__i2b+0x28>)
 800688a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800688e:	f000 fbf1 	bl	8007074 <__assert_func>
 8006892:	2301      	movs	r3, #1
 8006894:	6144      	str	r4, [r0, #20]
 8006896:	6103      	str	r3, [r0, #16]
 8006898:	bd10      	pop	{r4, pc}
 800689a:	bf00      	nop
 800689c:	0800822f 	.word	0x0800822f
 80068a0:	08008240 	.word	0x08008240

080068a4 <__multiply>:
 80068a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068a8:	4691      	mov	r9, r2
 80068aa:	690a      	ldr	r2, [r1, #16]
 80068ac:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80068b0:	429a      	cmp	r2, r3
 80068b2:	bfb8      	it	lt
 80068b4:	460b      	movlt	r3, r1
 80068b6:	460c      	mov	r4, r1
 80068b8:	bfbc      	itt	lt
 80068ba:	464c      	movlt	r4, r9
 80068bc:	4699      	movlt	r9, r3
 80068be:	6927      	ldr	r7, [r4, #16]
 80068c0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80068c4:	68a3      	ldr	r3, [r4, #8]
 80068c6:	6861      	ldr	r1, [r4, #4]
 80068c8:	eb07 060a 	add.w	r6, r7, sl
 80068cc:	42b3      	cmp	r3, r6
 80068ce:	b085      	sub	sp, #20
 80068d0:	bfb8      	it	lt
 80068d2:	3101      	addlt	r1, #1
 80068d4:	f7ff fed8 	bl	8006688 <_Balloc>
 80068d8:	b930      	cbnz	r0, 80068e8 <__multiply+0x44>
 80068da:	4602      	mov	r2, r0
 80068dc:	4b44      	ldr	r3, [pc, #272]	; (80069f0 <__multiply+0x14c>)
 80068de:	4845      	ldr	r0, [pc, #276]	; (80069f4 <__multiply+0x150>)
 80068e0:	f240 115d 	movw	r1, #349	; 0x15d
 80068e4:	f000 fbc6 	bl	8007074 <__assert_func>
 80068e8:	f100 0514 	add.w	r5, r0, #20
 80068ec:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80068f0:	462b      	mov	r3, r5
 80068f2:	2200      	movs	r2, #0
 80068f4:	4543      	cmp	r3, r8
 80068f6:	d321      	bcc.n	800693c <__multiply+0x98>
 80068f8:	f104 0314 	add.w	r3, r4, #20
 80068fc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006900:	f109 0314 	add.w	r3, r9, #20
 8006904:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006908:	9202      	str	r2, [sp, #8]
 800690a:	1b3a      	subs	r2, r7, r4
 800690c:	3a15      	subs	r2, #21
 800690e:	f022 0203 	bic.w	r2, r2, #3
 8006912:	3204      	adds	r2, #4
 8006914:	f104 0115 	add.w	r1, r4, #21
 8006918:	428f      	cmp	r7, r1
 800691a:	bf38      	it	cc
 800691c:	2204      	movcc	r2, #4
 800691e:	9201      	str	r2, [sp, #4]
 8006920:	9a02      	ldr	r2, [sp, #8]
 8006922:	9303      	str	r3, [sp, #12]
 8006924:	429a      	cmp	r2, r3
 8006926:	d80c      	bhi.n	8006942 <__multiply+0x9e>
 8006928:	2e00      	cmp	r6, #0
 800692a:	dd03      	ble.n	8006934 <__multiply+0x90>
 800692c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006930:	2b00      	cmp	r3, #0
 8006932:	d05a      	beq.n	80069ea <__multiply+0x146>
 8006934:	6106      	str	r6, [r0, #16]
 8006936:	b005      	add	sp, #20
 8006938:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800693c:	f843 2b04 	str.w	r2, [r3], #4
 8006940:	e7d8      	b.n	80068f4 <__multiply+0x50>
 8006942:	f8b3 a000 	ldrh.w	sl, [r3]
 8006946:	f1ba 0f00 	cmp.w	sl, #0
 800694a:	d024      	beq.n	8006996 <__multiply+0xf2>
 800694c:	f104 0e14 	add.w	lr, r4, #20
 8006950:	46a9      	mov	r9, r5
 8006952:	f04f 0c00 	mov.w	ip, #0
 8006956:	f85e 2b04 	ldr.w	r2, [lr], #4
 800695a:	f8d9 1000 	ldr.w	r1, [r9]
 800695e:	fa1f fb82 	uxth.w	fp, r2
 8006962:	b289      	uxth	r1, r1
 8006964:	fb0a 110b 	mla	r1, sl, fp, r1
 8006968:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800696c:	f8d9 2000 	ldr.w	r2, [r9]
 8006970:	4461      	add	r1, ip
 8006972:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006976:	fb0a c20b 	mla	r2, sl, fp, ip
 800697a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800697e:	b289      	uxth	r1, r1
 8006980:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006984:	4577      	cmp	r7, lr
 8006986:	f849 1b04 	str.w	r1, [r9], #4
 800698a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800698e:	d8e2      	bhi.n	8006956 <__multiply+0xb2>
 8006990:	9a01      	ldr	r2, [sp, #4]
 8006992:	f845 c002 	str.w	ip, [r5, r2]
 8006996:	9a03      	ldr	r2, [sp, #12]
 8006998:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800699c:	3304      	adds	r3, #4
 800699e:	f1b9 0f00 	cmp.w	r9, #0
 80069a2:	d020      	beq.n	80069e6 <__multiply+0x142>
 80069a4:	6829      	ldr	r1, [r5, #0]
 80069a6:	f104 0c14 	add.w	ip, r4, #20
 80069aa:	46ae      	mov	lr, r5
 80069ac:	f04f 0a00 	mov.w	sl, #0
 80069b0:	f8bc b000 	ldrh.w	fp, [ip]
 80069b4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80069b8:	fb09 220b 	mla	r2, r9, fp, r2
 80069bc:	4492      	add	sl, r2
 80069be:	b289      	uxth	r1, r1
 80069c0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80069c4:	f84e 1b04 	str.w	r1, [lr], #4
 80069c8:	f85c 2b04 	ldr.w	r2, [ip], #4
 80069cc:	f8be 1000 	ldrh.w	r1, [lr]
 80069d0:	0c12      	lsrs	r2, r2, #16
 80069d2:	fb09 1102 	mla	r1, r9, r2, r1
 80069d6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80069da:	4567      	cmp	r7, ip
 80069dc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80069e0:	d8e6      	bhi.n	80069b0 <__multiply+0x10c>
 80069e2:	9a01      	ldr	r2, [sp, #4]
 80069e4:	50a9      	str	r1, [r5, r2]
 80069e6:	3504      	adds	r5, #4
 80069e8:	e79a      	b.n	8006920 <__multiply+0x7c>
 80069ea:	3e01      	subs	r6, #1
 80069ec:	e79c      	b.n	8006928 <__multiply+0x84>
 80069ee:	bf00      	nop
 80069f0:	0800822f 	.word	0x0800822f
 80069f4:	08008240 	.word	0x08008240

080069f8 <__pow5mult>:
 80069f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80069fc:	4615      	mov	r5, r2
 80069fe:	f012 0203 	ands.w	r2, r2, #3
 8006a02:	4606      	mov	r6, r0
 8006a04:	460f      	mov	r7, r1
 8006a06:	d007      	beq.n	8006a18 <__pow5mult+0x20>
 8006a08:	4c25      	ldr	r4, [pc, #148]	; (8006aa0 <__pow5mult+0xa8>)
 8006a0a:	3a01      	subs	r2, #1
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006a12:	f7ff fe9b 	bl	800674c <__multadd>
 8006a16:	4607      	mov	r7, r0
 8006a18:	10ad      	asrs	r5, r5, #2
 8006a1a:	d03d      	beq.n	8006a98 <__pow5mult+0xa0>
 8006a1c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006a1e:	b97c      	cbnz	r4, 8006a40 <__pow5mult+0x48>
 8006a20:	2010      	movs	r0, #16
 8006a22:	f7fe fa05 	bl	8004e30 <malloc>
 8006a26:	4602      	mov	r2, r0
 8006a28:	6270      	str	r0, [r6, #36]	; 0x24
 8006a2a:	b928      	cbnz	r0, 8006a38 <__pow5mult+0x40>
 8006a2c:	4b1d      	ldr	r3, [pc, #116]	; (8006aa4 <__pow5mult+0xac>)
 8006a2e:	481e      	ldr	r0, [pc, #120]	; (8006aa8 <__pow5mult+0xb0>)
 8006a30:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006a34:	f000 fb1e 	bl	8007074 <__assert_func>
 8006a38:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006a3c:	6004      	str	r4, [r0, #0]
 8006a3e:	60c4      	str	r4, [r0, #12]
 8006a40:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006a44:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006a48:	b94c      	cbnz	r4, 8006a5e <__pow5mult+0x66>
 8006a4a:	f240 2171 	movw	r1, #625	; 0x271
 8006a4e:	4630      	mov	r0, r6
 8006a50:	f7ff ff12 	bl	8006878 <__i2b>
 8006a54:	2300      	movs	r3, #0
 8006a56:	f8c8 0008 	str.w	r0, [r8, #8]
 8006a5a:	4604      	mov	r4, r0
 8006a5c:	6003      	str	r3, [r0, #0]
 8006a5e:	f04f 0900 	mov.w	r9, #0
 8006a62:	07eb      	lsls	r3, r5, #31
 8006a64:	d50a      	bpl.n	8006a7c <__pow5mult+0x84>
 8006a66:	4639      	mov	r1, r7
 8006a68:	4622      	mov	r2, r4
 8006a6a:	4630      	mov	r0, r6
 8006a6c:	f7ff ff1a 	bl	80068a4 <__multiply>
 8006a70:	4639      	mov	r1, r7
 8006a72:	4680      	mov	r8, r0
 8006a74:	4630      	mov	r0, r6
 8006a76:	f7ff fe47 	bl	8006708 <_Bfree>
 8006a7a:	4647      	mov	r7, r8
 8006a7c:	106d      	asrs	r5, r5, #1
 8006a7e:	d00b      	beq.n	8006a98 <__pow5mult+0xa0>
 8006a80:	6820      	ldr	r0, [r4, #0]
 8006a82:	b938      	cbnz	r0, 8006a94 <__pow5mult+0x9c>
 8006a84:	4622      	mov	r2, r4
 8006a86:	4621      	mov	r1, r4
 8006a88:	4630      	mov	r0, r6
 8006a8a:	f7ff ff0b 	bl	80068a4 <__multiply>
 8006a8e:	6020      	str	r0, [r4, #0]
 8006a90:	f8c0 9000 	str.w	r9, [r0]
 8006a94:	4604      	mov	r4, r0
 8006a96:	e7e4      	b.n	8006a62 <__pow5mult+0x6a>
 8006a98:	4638      	mov	r0, r7
 8006a9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a9e:	bf00      	nop
 8006aa0:	08008390 	.word	0x08008390
 8006aa4:	080081bd 	.word	0x080081bd
 8006aa8:	08008240 	.word	0x08008240

08006aac <__lshift>:
 8006aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ab0:	460c      	mov	r4, r1
 8006ab2:	6849      	ldr	r1, [r1, #4]
 8006ab4:	6923      	ldr	r3, [r4, #16]
 8006ab6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006aba:	68a3      	ldr	r3, [r4, #8]
 8006abc:	4607      	mov	r7, r0
 8006abe:	4691      	mov	r9, r2
 8006ac0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006ac4:	f108 0601 	add.w	r6, r8, #1
 8006ac8:	42b3      	cmp	r3, r6
 8006aca:	db0b      	blt.n	8006ae4 <__lshift+0x38>
 8006acc:	4638      	mov	r0, r7
 8006ace:	f7ff fddb 	bl	8006688 <_Balloc>
 8006ad2:	4605      	mov	r5, r0
 8006ad4:	b948      	cbnz	r0, 8006aea <__lshift+0x3e>
 8006ad6:	4602      	mov	r2, r0
 8006ad8:	4b2a      	ldr	r3, [pc, #168]	; (8006b84 <__lshift+0xd8>)
 8006ada:	482b      	ldr	r0, [pc, #172]	; (8006b88 <__lshift+0xdc>)
 8006adc:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006ae0:	f000 fac8 	bl	8007074 <__assert_func>
 8006ae4:	3101      	adds	r1, #1
 8006ae6:	005b      	lsls	r3, r3, #1
 8006ae8:	e7ee      	b.n	8006ac8 <__lshift+0x1c>
 8006aea:	2300      	movs	r3, #0
 8006aec:	f100 0114 	add.w	r1, r0, #20
 8006af0:	f100 0210 	add.w	r2, r0, #16
 8006af4:	4618      	mov	r0, r3
 8006af6:	4553      	cmp	r3, sl
 8006af8:	db37      	blt.n	8006b6a <__lshift+0xbe>
 8006afa:	6920      	ldr	r0, [r4, #16]
 8006afc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006b00:	f104 0314 	add.w	r3, r4, #20
 8006b04:	f019 091f 	ands.w	r9, r9, #31
 8006b08:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006b0c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006b10:	d02f      	beq.n	8006b72 <__lshift+0xc6>
 8006b12:	f1c9 0e20 	rsb	lr, r9, #32
 8006b16:	468a      	mov	sl, r1
 8006b18:	f04f 0c00 	mov.w	ip, #0
 8006b1c:	681a      	ldr	r2, [r3, #0]
 8006b1e:	fa02 f209 	lsl.w	r2, r2, r9
 8006b22:	ea42 020c 	orr.w	r2, r2, ip
 8006b26:	f84a 2b04 	str.w	r2, [sl], #4
 8006b2a:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b2e:	4298      	cmp	r0, r3
 8006b30:	fa22 fc0e 	lsr.w	ip, r2, lr
 8006b34:	d8f2      	bhi.n	8006b1c <__lshift+0x70>
 8006b36:	1b03      	subs	r3, r0, r4
 8006b38:	3b15      	subs	r3, #21
 8006b3a:	f023 0303 	bic.w	r3, r3, #3
 8006b3e:	3304      	adds	r3, #4
 8006b40:	f104 0215 	add.w	r2, r4, #21
 8006b44:	4290      	cmp	r0, r2
 8006b46:	bf38      	it	cc
 8006b48:	2304      	movcc	r3, #4
 8006b4a:	f841 c003 	str.w	ip, [r1, r3]
 8006b4e:	f1bc 0f00 	cmp.w	ip, #0
 8006b52:	d001      	beq.n	8006b58 <__lshift+0xac>
 8006b54:	f108 0602 	add.w	r6, r8, #2
 8006b58:	3e01      	subs	r6, #1
 8006b5a:	4638      	mov	r0, r7
 8006b5c:	612e      	str	r6, [r5, #16]
 8006b5e:	4621      	mov	r1, r4
 8006b60:	f7ff fdd2 	bl	8006708 <_Bfree>
 8006b64:	4628      	mov	r0, r5
 8006b66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b6a:	f842 0f04 	str.w	r0, [r2, #4]!
 8006b6e:	3301      	adds	r3, #1
 8006b70:	e7c1      	b.n	8006af6 <__lshift+0x4a>
 8006b72:	3904      	subs	r1, #4
 8006b74:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b78:	f841 2f04 	str.w	r2, [r1, #4]!
 8006b7c:	4298      	cmp	r0, r3
 8006b7e:	d8f9      	bhi.n	8006b74 <__lshift+0xc8>
 8006b80:	e7ea      	b.n	8006b58 <__lshift+0xac>
 8006b82:	bf00      	nop
 8006b84:	0800822f 	.word	0x0800822f
 8006b88:	08008240 	.word	0x08008240

08006b8c <__mcmp>:
 8006b8c:	b530      	push	{r4, r5, lr}
 8006b8e:	6902      	ldr	r2, [r0, #16]
 8006b90:	690c      	ldr	r4, [r1, #16]
 8006b92:	1b12      	subs	r2, r2, r4
 8006b94:	d10e      	bne.n	8006bb4 <__mcmp+0x28>
 8006b96:	f100 0314 	add.w	r3, r0, #20
 8006b9a:	3114      	adds	r1, #20
 8006b9c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006ba0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006ba4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006ba8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006bac:	42a5      	cmp	r5, r4
 8006bae:	d003      	beq.n	8006bb8 <__mcmp+0x2c>
 8006bb0:	d305      	bcc.n	8006bbe <__mcmp+0x32>
 8006bb2:	2201      	movs	r2, #1
 8006bb4:	4610      	mov	r0, r2
 8006bb6:	bd30      	pop	{r4, r5, pc}
 8006bb8:	4283      	cmp	r3, r0
 8006bba:	d3f3      	bcc.n	8006ba4 <__mcmp+0x18>
 8006bbc:	e7fa      	b.n	8006bb4 <__mcmp+0x28>
 8006bbe:	f04f 32ff 	mov.w	r2, #4294967295
 8006bc2:	e7f7      	b.n	8006bb4 <__mcmp+0x28>

08006bc4 <__mdiff>:
 8006bc4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bc8:	460c      	mov	r4, r1
 8006bca:	4606      	mov	r6, r0
 8006bcc:	4611      	mov	r1, r2
 8006bce:	4620      	mov	r0, r4
 8006bd0:	4690      	mov	r8, r2
 8006bd2:	f7ff ffdb 	bl	8006b8c <__mcmp>
 8006bd6:	1e05      	subs	r5, r0, #0
 8006bd8:	d110      	bne.n	8006bfc <__mdiff+0x38>
 8006bda:	4629      	mov	r1, r5
 8006bdc:	4630      	mov	r0, r6
 8006bde:	f7ff fd53 	bl	8006688 <_Balloc>
 8006be2:	b930      	cbnz	r0, 8006bf2 <__mdiff+0x2e>
 8006be4:	4b3a      	ldr	r3, [pc, #232]	; (8006cd0 <__mdiff+0x10c>)
 8006be6:	4602      	mov	r2, r0
 8006be8:	f240 2132 	movw	r1, #562	; 0x232
 8006bec:	4839      	ldr	r0, [pc, #228]	; (8006cd4 <__mdiff+0x110>)
 8006bee:	f000 fa41 	bl	8007074 <__assert_func>
 8006bf2:	2301      	movs	r3, #1
 8006bf4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006bf8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bfc:	bfa4      	itt	ge
 8006bfe:	4643      	movge	r3, r8
 8006c00:	46a0      	movge	r8, r4
 8006c02:	4630      	mov	r0, r6
 8006c04:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006c08:	bfa6      	itte	ge
 8006c0a:	461c      	movge	r4, r3
 8006c0c:	2500      	movge	r5, #0
 8006c0e:	2501      	movlt	r5, #1
 8006c10:	f7ff fd3a 	bl	8006688 <_Balloc>
 8006c14:	b920      	cbnz	r0, 8006c20 <__mdiff+0x5c>
 8006c16:	4b2e      	ldr	r3, [pc, #184]	; (8006cd0 <__mdiff+0x10c>)
 8006c18:	4602      	mov	r2, r0
 8006c1a:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006c1e:	e7e5      	b.n	8006bec <__mdiff+0x28>
 8006c20:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006c24:	6926      	ldr	r6, [r4, #16]
 8006c26:	60c5      	str	r5, [r0, #12]
 8006c28:	f104 0914 	add.w	r9, r4, #20
 8006c2c:	f108 0514 	add.w	r5, r8, #20
 8006c30:	f100 0e14 	add.w	lr, r0, #20
 8006c34:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006c38:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006c3c:	f108 0210 	add.w	r2, r8, #16
 8006c40:	46f2      	mov	sl, lr
 8006c42:	2100      	movs	r1, #0
 8006c44:	f859 3b04 	ldr.w	r3, [r9], #4
 8006c48:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006c4c:	fa1f f883 	uxth.w	r8, r3
 8006c50:	fa11 f18b 	uxtah	r1, r1, fp
 8006c54:	0c1b      	lsrs	r3, r3, #16
 8006c56:	eba1 0808 	sub.w	r8, r1, r8
 8006c5a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006c5e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006c62:	fa1f f888 	uxth.w	r8, r8
 8006c66:	1419      	asrs	r1, r3, #16
 8006c68:	454e      	cmp	r6, r9
 8006c6a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006c6e:	f84a 3b04 	str.w	r3, [sl], #4
 8006c72:	d8e7      	bhi.n	8006c44 <__mdiff+0x80>
 8006c74:	1b33      	subs	r3, r6, r4
 8006c76:	3b15      	subs	r3, #21
 8006c78:	f023 0303 	bic.w	r3, r3, #3
 8006c7c:	3304      	adds	r3, #4
 8006c7e:	3415      	adds	r4, #21
 8006c80:	42a6      	cmp	r6, r4
 8006c82:	bf38      	it	cc
 8006c84:	2304      	movcc	r3, #4
 8006c86:	441d      	add	r5, r3
 8006c88:	4473      	add	r3, lr
 8006c8a:	469e      	mov	lr, r3
 8006c8c:	462e      	mov	r6, r5
 8006c8e:	4566      	cmp	r6, ip
 8006c90:	d30e      	bcc.n	8006cb0 <__mdiff+0xec>
 8006c92:	f10c 0203 	add.w	r2, ip, #3
 8006c96:	1b52      	subs	r2, r2, r5
 8006c98:	f022 0203 	bic.w	r2, r2, #3
 8006c9c:	3d03      	subs	r5, #3
 8006c9e:	45ac      	cmp	ip, r5
 8006ca0:	bf38      	it	cc
 8006ca2:	2200      	movcc	r2, #0
 8006ca4:	441a      	add	r2, r3
 8006ca6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8006caa:	b17b      	cbz	r3, 8006ccc <__mdiff+0x108>
 8006cac:	6107      	str	r7, [r0, #16]
 8006cae:	e7a3      	b.n	8006bf8 <__mdiff+0x34>
 8006cb0:	f856 8b04 	ldr.w	r8, [r6], #4
 8006cb4:	fa11 f288 	uxtah	r2, r1, r8
 8006cb8:	1414      	asrs	r4, r2, #16
 8006cba:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006cbe:	b292      	uxth	r2, r2
 8006cc0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006cc4:	f84e 2b04 	str.w	r2, [lr], #4
 8006cc8:	1421      	asrs	r1, r4, #16
 8006cca:	e7e0      	b.n	8006c8e <__mdiff+0xca>
 8006ccc:	3f01      	subs	r7, #1
 8006cce:	e7ea      	b.n	8006ca6 <__mdiff+0xe2>
 8006cd0:	0800822f 	.word	0x0800822f
 8006cd4:	08008240 	.word	0x08008240

08006cd8 <__d2b>:
 8006cd8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006cdc:	4689      	mov	r9, r1
 8006cde:	2101      	movs	r1, #1
 8006ce0:	ec57 6b10 	vmov	r6, r7, d0
 8006ce4:	4690      	mov	r8, r2
 8006ce6:	f7ff fccf 	bl	8006688 <_Balloc>
 8006cea:	4604      	mov	r4, r0
 8006cec:	b930      	cbnz	r0, 8006cfc <__d2b+0x24>
 8006cee:	4602      	mov	r2, r0
 8006cf0:	4b25      	ldr	r3, [pc, #148]	; (8006d88 <__d2b+0xb0>)
 8006cf2:	4826      	ldr	r0, [pc, #152]	; (8006d8c <__d2b+0xb4>)
 8006cf4:	f240 310a 	movw	r1, #778	; 0x30a
 8006cf8:	f000 f9bc 	bl	8007074 <__assert_func>
 8006cfc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8006d00:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006d04:	bb35      	cbnz	r5, 8006d54 <__d2b+0x7c>
 8006d06:	2e00      	cmp	r6, #0
 8006d08:	9301      	str	r3, [sp, #4]
 8006d0a:	d028      	beq.n	8006d5e <__d2b+0x86>
 8006d0c:	4668      	mov	r0, sp
 8006d0e:	9600      	str	r6, [sp, #0]
 8006d10:	f7ff fd82 	bl	8006818 <__lo0bits>
 8006d14:	9900      	ldr	r1, [sp, #0]
 8006d16:	b300      	cbz	r0, 8006d5a <__d2b+0x82>
 8006d18:	9a01      	ldr	r2, [sp, #4]
 8006d1a:	f1c0 0320 	rsb	r3, r0, #32
 8006d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8006d22:	430b      	orrs	r3, r1
 8006d24:	40c2      	lsrs	r2, r0
 8006d26:	6163      	str	r3, [r4, #20]
 8006d28:	9201      	str	r2, [sp, #4]
 8006d2a:	9b01      	ldr	r3, [sp, #4]
 8006d2c:	61a3      	str	r3, [r4, #24]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	bf14      	ite	ne
 8006d32:	2202      	movne	r2, #2
 8006d34:	2201      	moveq	r2, #1
 8006d36:	6122      	str	r2, [r4, #16]
 8006d38:	b1d5      	cbz	r5, 8006d70 <__d2b+0x98>
 8006d3a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006d3e:	4405      	add	r5, r0
 8006d40:	f8c9 5000 	str.w	r5, [r9]
 8006d44:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006d48:	f8c8 0000 	str.w	r0, [r8]
 8006d4c:	4620      	mov	r0, r4
 8006d4e:	b003      	add	sp, #12
 8006d50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006d54:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006d58:	e7d5      	b.n	8006d06 <__d2b+0x2e>
 8006d5a:	6161      	str	r1, [r4, #20]
 8006d5c:	e7e5      	b.n	8006d2a <__d2b+0x52>
 8006d5e:	a801      	add	r0, sp, #4
 8006d60:	f7ff fd5a 	bl	8006818 <__lo0bits>
 8006d64:	9b01      	ldr	r3, [sp, #4]
 8006d66:	6163      	str	r3, [r4, #20]
 8006d68:	2201      	movs	r2, #1
 8006d6a:	6122      	str	r2, [r4, #16]
 8006d6c:	3020      	adds	r0, #32
 8006d6e:	e7e3      	b.n	8006d38 <__d2b+0x60>
 8006d70:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006d74:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006d78:	f8c9 0000 	str.w	r0, [r9]
 8006d7c:	6918      	ldr	r0, [r3, #16]
 8006d7e:	f7ff fd2b 	bl	80067d8 <__hi0bits>
 8006d82:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006d86:	e7df      	b.n	8006d48 <__d2b+0x70>
 8006d88:	0800822f 	.word	0x0800822f
 8006d8c:	08008240 	.word	0x08008240

08006d90 <_calloc_r>:
 8006d90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006d92:	fba1 2402 	umull	r2, r4, r1, r2
 8006d96:	b94c      	cbnz	r4, 8006dac <_calloc_r+0x1c>
 8006d98:	4611      	mov	r1, r2
 8006d9a:	9201      	str	r2, [sp, #4]
 8006d9c:	f7fe f8cc 	bl	8004f38 <_malloc_r>
 8006da0:	9a01      	ldr	r2, [sp, #4]
 8006da2:	4605      	mov	r5, r0
 8006da4:	b930      	cbnz	r0, 8006db4 <_calloc_r+0x24>
 8006da6:	4628      	mov	r0, r5
 8006da8:	b003      	add	sp, #12
 8006daa:	bd30      	pop	{r4, r5, pc}
 8006dac:	220c      	movs	r2, #12
 8006dae:	6002      	str	r2, [r0, #0]
 8006db0:	2500      	movs	r5, #0
 8006db2:	e7f8      	b.n	8006da6 <_calloc_r+0x16>
 8006db4:	4621      	mov	r1, r4
 8006db6:	f7fe f84b 	bl	8004e50 <memset>
 8006dba:	e7f4      	b.n	8006da6 <_calloc_r+0x16>

08006dbc <__ssputs_r>:
 8006dbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006dc0:	688e      	ldr	r6, [r1, #8]
 8006dc2:	429e      	cmp	r6, r3
 8006dc4:	4682      	mov	sl, r0
 8006dc6:	460c      	mov	r4, r1
 8006dc8:	4690      	mov	r8, r2
 8006dca:	461f      	mov	r7, r3
 8006dcc:	d838      	bhi.n	8006e40 <__ssputs_r+0x84>
 8006dce:	898a      	ldrh	r2, [r1, #12]
 8006dd0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006dd4:	d032      	beq.n	8006e3c <__ssputs_r+0x80>
 8006dd6:	6825      	ldr	r5, [r4, #0]
 8006dd8:	6909      	ldr	r1, [r1, #16]
 8006dda:	eba5 0901 	sub.w	r9, r5, r1
 8006dde:	6965      	ldr	r5, [r4, #20]
 8006de0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006de4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006de8:	3301      	adds	r3, #1
 8006dea:	444b      	add	r3, r9
 8006dec:	106d      	asrs	r5, r5, #1
 8006dee:	429d      	cmp	r5, r3
 8006df0:	bf38      	it	cc
 8006df2:	461d      	movcc	r5, r3
 8006df4:	0553      	lsls	r3, r2, #21
 8006df6:	d531      	bpl.n	8006e5c <__ssputs_r+0xa0>
 8006df8:	4629      	mov	r1, r5
 8006dfa:	f7fe f89d 	bl	8004f38 <_malloc_r>
 8006dfe:	4606      	mov	r6, r0
 8006e00:	b950      	cbnz	r0, 8006e18 <__ssputs_r+0x5c>
 8006e02:	230c      	movs	r3, #12
 8006e04:	f8ca 3000 	str.w	r3, [sl]
 8006e08:	89a3      	ldrh	r3, [r4, #12]
 8006e0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e0e:	81a3      	strh	r3, [r4, #12]
 8006e10:	f04f 30ff 	mov.w	r0, #4294967295
 8006e14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e18:	6921      	ldr	r1, [r4, #16]
 8006e1a:	464a      	mov	r2, r9
 8006e1c:	f7ff fc1a 	bl	8006654 <memcpy>
 8006e20:	89a3      	ldrh	r3, [r4, #12]
 8006e22:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006e26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e2a:	81a3      	strh	r3, [r4, #12]
 8006e2c:	6126      	str	r6, [r4, #16]
 8006e2e:	6165      	str	r5, [r4, #20]
 8006e30:	444e      	add	r6, r9
 8006e32:	eba5 0509 	sub.w	r5, r5, r9
 8006e36:	6026      	str	r6, [r4, #0]
 8006e38:	60a5      	str	r5, [r4, #8]
 8006e3a:	463e      	mov	r6, r7
 8006e3c:	42be      	cmp	r6, r7
 8006e3e:	d900      	bls.n	8006e42 <__ssputs_r+0x86>
 8006e40:	463e      	mov	r6, r7
 8006e42:	6820      	ldr	r0, [r4, #0]
 8006e44:	4632      	mov	r2, r6
 8006e46:	4641      	mov	r1, r8
 8006e48:	f000 f959 	bl	80070fe <memmove>
 8006e4c:	68a3      	ldr	r3, [r4, #8]
 8006e4e:	1b9b      	subs	r3, r3, r6
 8006e50:	60a3      	str	r3, [r4, #8]
 8006e52:	6823      	ldr	r3, [r4, #0]
 8006e54:	4433      	add	r3, r6
 8006e56:	6023      	str	r3, [r4, #0]
 8006e58:	2000      	movs	r0, #0
 8006e5a:	e7db      	b.n	8006e14 <__ssputs_r+0x58>
 8006e5c:	462a      	mov	r2, r5
 8006e5e:	f000 f968 	bl	8007132 <_realloc_r>
 8006e62:	4606      	mov	r6, r0
 8006e64:	2800      	cmp	r0, #0
 8006e66:	d1e1      	bne.n	8006e2c <__ssputs_r+0x70>
 8006e68:	6921      	ldr	r1, [r4, #16]
 8006e6a:	4650      	mov	r0, sl
 8006e6c:	f7fd fff8 	bl	8004e60 <_free_r>
 8006e70:	e7c7      	b.n	8006e02 <__ssputs_r+0x46>
	...

08006e74 <_svfiprintf_r>:
 8006e74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e78:	4698      	mov	r8, r3
 8006e7a:	898b      	ldrh	r3, [r1, #12]
 8006e7c:	061b      	lsls	r3, r3, #24
 8006e7e:	b09d      	sub	sp, #116	; 0x74
 8006e80:	4607      	mov	r7, r0
 8006e82:	460d      	mov	r5, r1
 8006e84:	4614      	mov	r4, r2
 8006e86:	d50e      	bpl.n	8006ea6 <_svfiprintf_r+0x32>
 8006e88:	690b      	ldr	r3, [r1, #16]
 8006e8a:	b963      	cbnz	r3, 8006ea6 <_svfiprintf_r+0x32>
 8006e8c:	2140      	movs	r1, #64	; 0x40
 8006e8e:	f7fe f853 	bl	8004f38 <_malloc_r>
 8006e92:	6028      	str	r0, [r5, #0]
 8006e94:	6128      	str	r0, [r5, #16]
 8006e96:	b920      	cbnz	r0, 8006ea2 <_svfiprintf_r+0x2e>
 8006e98:	230c      	movs	r3, #12
 8006e9a:	603b      	str	r3, [r7, #0]
 8006e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8006ea0:	e0d1      	b.n	8007046 <_svfiprintf_r+0x1d2>
 8006ea2:	2340      	movs	r3, #64	; 0x40
 8006ea4:	616b      	str	r3, [r5, #20]
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	9309      	str	r3, [sp, #36]	; 0x24
 8006eaa:	2320      	movs	r3, #32
 8006eac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006eb0:	f8cd 800c 	str.w	r8, [sp, #12]
 8006eb4:	2330      	movs	r3, #48	; 0x30
 8006eb6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007060 <_svfiprintf_r+0x1ec>
 8006eba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006ebe:	f04f 0901 	mov.w	r9, #1
 8006ec2:	4623      	mov	r3, r4
 8006ec4:	469a      	mov	sl, r3
 8006ec6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006eca:	b10a      	cbz	r2, 8006ed0 <_svfiprintf_r+0x5c>
 8006ecc:	2a25      	cmp	r2, #37	; 0x25
 8006ece:	d1f9      	bne.n	8006ec4 <_svfiprintf_r+0x50>
 8006ed0:	ebba 0b04 	subs.w	fp, sl, r4
 8006ed4:	d00b      	beq.n	8006eee <_svfiprintf_r+0x7a>
 8006ed6:	465b      	mov	r3, fp
 8006ed8:	4622      	mov	r2, r4
 8006eda:	4629      	mov	r1, r5
 8006edc:	4638      	mov	r0, r7
 8006ede:	f7ff ff6d 	bl	8006dbc <__ssputs_r>
 8006ee2:	3001      	adds	r0, #1
 8006ee4:	f000 80aa 	beq.w	800703c <_svfiprintf_r+0x1c8>
 8006ee8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006eea:	445a      	add	r2, fp
 8006eec:	9209      	str	r2, [sp, #36]	; 0x24
 8006eee:	f89a 3000 	ldrb.w	r3, [sl]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	f000 80a2 	beq.w	800703c <_svfiprintf_r+0x1c8>
 8006ef8:	2300      	movs	r3, #0
 8006efa:	f04f 32ff 	mov.w	r2, #4294967295
 8006efe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006f02:	f10a 0a01 	add.w	sl, sl, #1
 8006f06:	9304      	str	r3, [sp, #16]
 8006f08:	9307      	str	r3, [sp, #28]
 8006f0a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006f0e:	931a      	str	r3, [sp, #104]	; 0x68
 8006f10:	4654      	mov	r4, sl
 8006f12:	2205      	movs	r2, #5
 8006f14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f18:	4851      	ldr	r0, [pc, #324]	; (8007060 <_svfiprintf_r+0x1ec>)
 8006f1a:	f7f9 f969 	bl	80001f0 <memchr>
 8006f1e:	9a04      	ldr	r2, [sp, #16]
 8006f20:	b9d8      	cbnz	r0, 8006f5a <_svfiprintf_r+0xe6>
 8006f22:	06d0      	lsls	r0, r2, #27
 8006f24:	bf44      	itt	mi
 8006f26:	2320      	movmi	r3, #32
 8006f28:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006f2c:	0711      	lsls	r1, r2, #28
 8006f2e:	bf44      	itt	mi
 8006f30:	232b      	movmi	r3, #43	; 0x2b
 8006f32:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006f36:	f89a 3000 	ldrb.w	r3, [sl]
 8006f3a:	2b2a      	cmp	r3, #42	; 0x2a
 8006f3c:	d015      	beq.n	8006f6a <_svfiprintf_r+0xf6>
 8006f3e:	9a07      	ldr	r2, [sp, #28]
 8006f40:	4654      	mov	r4, sl
 8006f42:	2000      	movs	r0, #0
 8006f44:	f04f 0c0a 	mov.w	ip, #10
 8006f48:	4621      	mov	r1, r4
 8006f4a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006f4e:	3b30      	subs	r3, #48	; 0x30
 8006f50:	2b09      	cmp	r3, #9
 8006f52:	d94e      	bls.n	8006ff2 <_svfiprintf_r+0x17e>
 8006f54:	b1b0      	cbz	r0, 8006f84 <_svfiprintf_r+0x110>
 8006f56:	9207      	str	r2, [sp, #28]
 8006f58:	e014      	b.n	8006f84 <_svfiprintf_r+0x110>
 8006f5a:	eba0 0308 	sub.w	r3, r0, r8
 8006f5e:	fa09 f303 	lsl.w	r3, r9, r3
 8006f62:	4313      	orrs	r3, r2
 8006f64:	9304      	str	r3, [sp, #16]
 8006f66:	46a2      	mov	sl, r4
 8006f68:	e7d2      	b.n	8006f10 <_svfiprintf_r+0x9c>
 8006f6a:	9b03      	ldr	r3, [sp, #12]
 8006f6c:	1d19      	adds	r1, r3, #4
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	9103      	str	r1, [sp, #12]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	bfbb      	ittet	lt
 8006f76:	425b      	neglt	r3, r3
 8006f78:	f042 0202 	orrlt.w	r2, r2, #2
 8006f7c:	9307      	strge	r3, [sp, #28]
 8006f7e:	9307      	strlt	r3, [sp, #28]
 8006f80:	bfb8      	it	lt
 8006f82:	9204      	strlt	r2, [sp, #16]
 8006f84:	7823      	ldrb	r3, [r4, #0]
 8006f86:	2b2e      	cmp	r3, #46	; 0x2e
 8006f88:	d10c      	bne.n	8006fa4 <_svfiprintf_r+0x130>
 8006f8a:	7863      	ldrb	r3, [r4, #1]
 8006f8c:	2b2a      	cmp	r3, #42	; 0x2a
 8006f8e:	d135      	bne.n	8006ffc <_svfiprintf_r+0x188>
 8006f90:	9b03      	ldr	r3, [sp, #12]
 8006f92:	1d1a      	adds	r2, r3, #4
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	9203      	str	r2, [sp, #12]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	bfb8      	it	lt
 8006f9c:	f04f 33ff 	movlt.w	r3, #4294967295
 8006fa0:	3402      	adds	r4, #2
 8006fa2:	9305      	str	r3, [sp, #20]
 8006fa4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007070 <_svfiprintf_r+0x1fc>
 8006fa8:	7821      	ldrb	r1, [r4, #0]
 8006faa:	2203      	movs	r2, #3
 8006fac:	4650      	mov	r0, sl
 8006fae:	f7f9 f91f 	bl	80001f0 <memchr>
 8006fb2:	b140      	cbz	r0, 8006fc6 <_svfiprintf_r+0x152>
 8006fb4:	2340      	movs	r3, #64	; 0x40
 8006fb6:	eba0 000a 	sub.w	r0, r0, sl
 8006fba:	fa03 f000 	lsl.w	r0, r3, r0
 8006fbe:	9b04      	ldr	r3, [sp, #16]
 8006fc0:	4303      	orrs	r3, r0
 8006fc2:	3401      	adds	r4, #1
 8006fc4:	9304      	str	r3, [sp, #16]
 8006fc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006fca:	4826      	ldr	r0, [pc, #152]	; (8007064 <_svfiprintf_r+0x1f0>)
 8006fcc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006fd0:	2206      	movs	r2, #6
 8006fd2:	f7f9 f90d 	bl	80001f0 <memchr>
 8006fd6:	2800      	cmp	r0, #0
 8006fd8:	d038      	beq.n	800704c <_svfiprintf_r+0x1d8>
 8006fda:	4b23      	ldr	r3, [pc, #140]	; (8007068 <_svfiprintf_r+0x1f4>)
 8006fdc:	bb1b      	cbnz	r3, 8007026 <_svfiprintf_r+0x1b2>
 8006fde:	9b03      	ldr	r3, [sp, #12]
 8006fe0:	3307      	adds	r3, #7
 8006fe2:	f023 0307 	bic.w	r3, r3, #7
 8006fe6:	3308      	adds	r3, #8
 8006fe8:	9303      	str	r3, [sp, #12]
 8006fea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fec:	4433      	add	r3, r6
 8006fee:	9309      	str	r3, [sp, #36]	; 0x24
 8006ff0:	e767      	b.n	8006ec2 <_svfiprintf_r+0x4e>
 8006ff2:	fb0c 3202 	mla	r2, ip, r2, r3
 8006ff6:	460c      	mov	r4, r1
 8006ff8:	2001      	movs	r0, #1
 8006ffa:	e7a5      	b.n	8006f48 <_svfiprintf_r+0xd4>
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	3401      	adds	r4, #1
 8007000:	9305      	str	r3, [sp, #20]
 8007002:	4619      	mov	r1, r3
 8007004:	f04f 0c0a 	mov.w	ip, #10
 8007008:	4620      	mov	r0, r4
 800700a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800700e:	3a30      	subs	r2, #48	; 0x30
 8007010:	2a09      	cmp	r2, #9
 8007012:	d903      	bls.n	800701c <_svfiprintf_r+0x1a8>
 8007014:	2b00      	cmp	r3, #0
 8007016:	d0c5      	beq.n	8006fa4 <_svfiprintf_r+0x130>
 8007018:	9105      	str	r1, [sp, #20]
 800701a:	e7c3      	b.n	8006fa4 <_svfiprintf_r+0x130>
 800701c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007020:	4604      	mov	r4, r0
 8007022:	2301      	movs	r3, #1
 8007024:	e7f0      	b.n	8007008 <_svfiprintf_r+0x194>
 8007026:	ab03      	add	r3, sp, #12
 8007028:	9300      	str	r3, [sp, #0]
 800702a:	462a      	mov	r2, r5
 800702c:	4b0f      	ldr	r3, [pc, #60]	; (800706c <_svfiprintf_r+0x1f8>)
 800702e:	a904      	add	r1, sp, #16
 8007030:	4638      	mov	r0, r7
 8007032:	f7fe f895 	bl	8005160 <_printf_float>
 8007036:	1c42      	adds	r2, r0, #1
 8007038:	4606      	mov	r6, r0
 800703a:	d1d6      	bne.n	8006fea <_svfiprintf_r+0x176>
 800703c:	89ab      	ldrh	r3, [r5, #12]
 800703e:	065b      	lsls	r3, r3, #25
 8007040:	f53f af2c 	bmi.w	8006e9c <_svfiprintf_r+0x28>
 8007044:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007046:	b01d      	add	sp, #116	; 0x74
 8007048:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800704c:	ab03      	add	r3, sp, #12
 800704e:	9300      	str	r3, [sp, #0]
 8007050:	462a      	mov	r2, r5
 8007052:	4b06      	ldr	r3, [pc, #24]	; (800706c <_svfiprintf_r+0x1f8>)
 8007054:	a904      	add	r1, sp, #16
 8007056:	4638      	mov	r0, r7
 8007058:	f7fe fb26 	bl	80056a8 <_printf_i>
 800705c:	e7eb      	b.n	8007036 <_svfiprintf_r+0x1c2>
 800705e:	bf00      	nop
 8007060:	0800839c 	.word	0x0800839c
 8007064:	080083a6 	.word	0x080083a6
 8007068:	08005161 	.word	0x08005161
 800706c:	08006dbd 	.word	0x08006dbd
 8007070:	080083a2 	.word	0x080083a2

08007074 <__assert_func>:
 8007074:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007076:	4614      	mov	r4, r2
 8007078:	461a      	mov	r2, r3
 800707a:	4b09      	ldr	r3, [pc, #36]	; (80070a0 <__assert_func+0x2c>)
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	4605      	mov	r5, r0
 8007080:	68d8      	ldr	r0, [r3, #12]
 8007082:	b14c      	cbz	r4, 8007098 <__assert_func+0x24>
 8007084:	4b07      	ldr	r3, [pc, #28]	; (80070a4 <__assert_func+0x30>)
 8007086:	9100      	str	r1, [sp, #0]
 8007088:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800708c:	4906      	ldr	r1, [pc, #24]	; (80070a8 <__assert_func+0x34>)
 800708e:	462b      	mov	r3, r5
 8007090:	f000 f80e 	bl	80070b0 <fiprintf>
 8007094:	f000 faa4 	bl	80075e0 <abort>
 8007098:	4b04      	ldr	r3, [pc, #16]	; (80070ac <__assert_func+0x38>)
 800709a:	461c      	mov	r4, r3
 800709c:	e7f3      	b.n	8007086 <__assert_func+0x12>
 800709e:	bf00      	nop
 80070a0:	2000000c 	.word	0x2000000c
 80070a4:	080083ad 	.word	0x080083ad
 80070a8:	080083ba 	.word	0x080083ba
 80070ac:	080083e8 	.word	0x080083e8

080070b0 <fiprintf>:
 80070b0:	b40e      	push	{r1, r2, r3}
 80070b2:	b503      	push	{r0, r1, lr}
 80070b4:	4601      	mov	r1, r0
 80070b6:	ab03      	add	r3, sp, #12
 80070b8:	4805      	ldr	r0, [pc, #20]	; (80070d0 <fiprintf+0x20>)
 80070ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80070be:	6800      	ldr	r0, [r0, #0]
 80070c0:	9301      	str	r3, [sp, #4]
 80070c2:	f000 f88f 	bl	80071e4 <_vfiprintf_r>
 80070c6:	b002      	add	sp, #8
 80070c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80070cc:	b003      	add	sp, #12
 80070ce:	4770      	bx	lr
 80070d0:	2000000c 	.word	0x2000000c

080070d4 <__retarget_lock_init_recursive>:
 80070d4:	4770      	bx	lr

080070d6 <__retarget_lock_acquire_recursive>:
 80070d6:	4770      	bx	lr

080070d8 <__retarget_lock_release_recursive>:
 80070d8:	4770      	bx	lr

080070da <__ascii_mbtowc>:
 80070da:	b082      	sub	sp, #8
 80070dc:	b901      	cbnz	r1, 80070e0 <__ascii_mbtowc+0x6>
 80070de:	a901      	add	r1, sp, #4
 80070e0:	b142      	cbz	r2, 80070f4 <__ascii_mbtowc+0x1a>
 80070e2:	b14b      	cbz	r3, 80070f8 <__ascii_mbtowc+0x1e>
 80070e4:	7813      	ldrb	r3, [r2, #0]
 80070e6:	600b      	str	r3, [r1, #0]
 80070e8:	7812      	ldrb	r2, [r2, #0]
 80070ea:	1e10      	subs	r0, r2, #0
 80070ec:	bf18      	it	ne
 80070ee:	2001      	movne	r0, #1
 80070f0:	b002      	add	sp, #8
 80070f2:	4770      	bx	lr
 80070f4:	4610      	mov	r0, r2
 80070f6:	e7fb      	b.n	80070f0 <__ascii_mbtowc+0x16>
 80070f8:	f06f 0001 	mvn.w	r0, #1
 80070fc:	e7f8      	b.n	80070f0 <__ascii_mbtowc+0x16>

080070fe <memmove>:
 80070fe:	4288      	cmp	r0, r1
 8007100:	b510      	push	{r4, lr}
 8007102:	eb01 0402 	add.w	r4, r1, r2
 8007106:	d902      	bls.n	800710e <memmove+0x10>
 8007108:	4284      	cmp	r4, r0
 800710a:	4623      	mov	r3, r4
 800710c:	d807      	bhi.n	800711e <memmove+0x20>
 800710e:	1e43      	subs	r3, r0, #1
 8007110:	42a1      	cmp	r1, r4
 8007112:	d008      	beq.n	8007126 <memmove+0x28>
 8007114:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007118:	f803 2f01 	strb.w	r2, [r3, #1]!
 800711c:	e7f8      	b.n	8007110 <memmove+0x12>
 800711e:	4402      	add	r2, r0
 8007120:	4601      	mov	r1, r0
 8007122:	428a      	cmp	r2, r1
 8007124:	d100      	bne.n	8007128 <memmove+0x2a>
 8007126:	bd10      	pop	{r4, pc}
 8007128:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800712c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007130:	e7f7      	b.n	8007122 <memmove+0x24>

08007132 <_realloc_r>:
 8007132:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007136:	4680      	mov	r8, r0
 8007138:	4614      	mov	r4, r2
 800713a:	460e      	mov	r6, r1
 800713c:	b921      	cbnz	r1, 8007148 <_realloc_r+0x16>
 800713e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007142:	4611      	mov	r1, r2
 8007144:	f7fd bef8 	b.w	8004f38 <_malloc_r>
 8007148:	b92a      	cbnz	r2, 8007156 <_realloc_r+0x24>
 800714a:	f7fd fe89 	bl	8004e60 <_free_r>
 800714e:	4625      	mov	r5, r4
 8007150:	4628      	mov	r0, r5
 8007152:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007156:	f000 fc67 	bl	8007a28 <_malloc_usable_size_r>
 800715a:	4284      	cmp	r4, r0
 800715c:	4607      	mov	r7, r0
 800715e:	d802      	bhi.n	8007166 <_realloc_r+0x34>
 8007160:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007164:	d812      	bhi.n	800718c <_realloc_r+0x5a>
 8007166:	4621      	mov	r1, r4
 8007168:	4640      	mov	r0, r8
 800716a:	f7fd fee5 	bl	8004f38 <_malloc_r>
 800716e:	4605      	mov	r5, r0
 8007170:	2800      	cmp	r0, #0
 8007172:	d0ed      	beq.n	8007150 <_realloc_r+0x1e>
 8007174:	42bc      	cmp	r4, r7
 8007176:	4622      	mov	r2, r4
 8007178:	4631      	mov	r1, r6
 800717a:	bf28      	it	cs
 800717c:	463a      	movcs	r2, r7
 800717e:	f7ff fa69 	bl	8006654 <memcpy>
 8007182:	4631      	mov	r1, r6
 8007184:	4640      	mov	r0, r8
 8007186:	f7fd fe6b 	bl	8004e60 <_free_r>
 800718a:	e7e1      	b.n	8007150 <_realloc_r+0x1e>
 800718c:	4635      	mov	r5, r6
 800718e:	e7df      	b.n	8007150 <_realloc_r+0x1e>

08007190 <__sfputc_r>:
 8007190:	6893      	ldr	r3, [r2, #8]
 8007192:	3b01      	subs	r3, #1
 8007194:	2b00      	cmp	r3, #0
 8007196:	b410      	push	{r4}
 8007198:	6093      	str	r3, [r2, #8]
 800719a:	da08      	bge.n	80071ae <__sfputc_r+0x1e>
 800719c:	6994      	ldr	r4, [r2, #24]
 800719e:	42a3      	cmp	r3, r4
 80071a0:	db01      	blt.n	80071a6 <__sfputc_r+0x16>
 80071a2:	290a      	cmp	r1, #10
 80071a4:	d103      	bne.n	80071ae <__sfputc_r+0x1e>
 80071a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80071aa:	f000 b94b 	b.w	8007444 <__swbuf_r>
 80071ae:	6813      	ldr	r3, [r2, #0]
 80071b0:	1c58      	adds	r0, r3, #1
 80071b2:	6010      	str	r0, [r2, #0]
 80071b4:	7019      	strb	r1, [r3, #0]
 80071b6:	4608      	mov	r0, r1
 80071b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80071bc:	4770      	bx	lr

080071be <__sfputs_r>:
 80071be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071c0:	4606      	mov	r6, r0
 80071c2:	460f      	mov	r7, r1
 80071c4:	4614      	mov	r4, r2
 80071c6:	18d5      	adds	r5, r2, r3
 80071c8:	42ac      	cmp	r4, r5
 80071ca:	d101      	bne.n	80071d0 <__sfputs_r+0x12>
 80071cc:	2000      	movs	r0, #0
 80071ce:	e007      	b.n	80071e0 <__sfputs_r+0x22>
 80071d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071d4:	463a      	mov	r2, r7
 80071d6:	4630      	mov	r0, r6
 80071d8:	f7ff ffda 	bl	8007190 <__sfputc_r>
 80071dc:	1c43      	adds	r3, r0, #1
 80071de:	d1f3      	bne.n	80071c8 <__sfputs_r+0xa>
 80071e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080071e4 <_vfiprintf_r>:
 80071e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071e8:	460d      	mov	r5, r1
 80071ea:	b09d      	sub	sp, #116	; 0x74
 80071ec:	4614      	mov	r4, r2
 80071ee:	4698      	mov	r8, r3
 80071f0:	4606      	mov	r6, r0
 80071f2:	b118      	cbz	r0, 80071fc <_vfiprintf_r+0x18>
 80071f4:	6983      	ldr	r3, [r0, #24]
 80071f6:	b90b      	cbnz	r3, 80071fc <_vfiprintf_r+0x18>
 80071f8:	f000 fb14 	bl	8007824 <__sinit>
 80071fc:	4b89      	ldr	r3, [pc, #548]	; (8007424 <_vfiprintf_r+0x240>)
 80071fe:	429d      	cmp	r5, r3
 8007200:	d11b      	bne.n	800723a <_vfiprintf_r+0x56>
 8007202:	6875      	ldr	r5, [r6, #4]
 8007204:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007206:	07d9      	lsls	r1, r3, #31
 8007208:	d405      	bmi.n	8007216 <_vfiprintf_r+0x32>
 800720a:	89ab      	ldrh	r3, [r5, #12]
 800720c:	059a      	lsls	r2, r3, #22
 800720e:	d402      	bmi.n	8007216 <_vfiprintf_r+0x32>
 8007210:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007212:	f7ff ff60 	bl	80070d6 <__retarget_lock_acquire_recursive>
 8007216:	89ab      	ldrh	r3, [r5, #12]
 8007218:	071b      	lsls	r3, r3, #28
 800721a:	d501      	bpl.n	8007220 <_vfiprintf_r+0x3c>
 800721c:	692b      	ldr	r3, [r5, #16]
 800721e:	b9eb      	cbnz	r3, 800725c <_vfiprintf_r+0x78>
 8007220:	4629      	mov	r1, r5
 8007222:	4630      	mov	r0, r6
 8007224:	f000 f96e 	bl	8007504 <__swsetup_r>
 8007228:	b1c0      	cbz	r0, 800725c <_vfiprintf_r+0x78>
 800722a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800722c:	07dc      	lsls	r4, r3, #31
 800722e:	d50e      	bpl.n	800724e <_vfiprintf_r+0x6a>
 8007230:	f04f 30ff 	mov.w	r0, #4294967295
 8007234:	b01d      	add	sp, #116	; 0x74
 8007236:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800723a:	4b7b      	ldr	r3, [pc, #492]	; (8007428 <_vfiprintf_r+0x244>)
 800723c:	429d      	cmp	r5, r3
 800723e:	d101      	bne.n	8007244 <_vfiprintf_r+0x60>
 8007240:	68b5      	ldr	r5, [r6, #8]
 8007242:	e7df      	b.n	8007204 <_vfiprintf_r+0x20>
 8007244:	4b79      	ldr	r3, [pc, #484]	; (800742c <_vfiprintf_r+0x248>)
 8007246:	429d      	cmp	r5, r3
 8007248:	bf08      	it	eq
 800724a:	68f5      	ldreq	r5, [r6, #12]
 800724c:	e7da      	b.n	8007204 <_vfiprintf_r+0x20>
 800724e:	89ab      	ldrh	r3, [r5, #12]
 8007250:	0598      	lsls	r0, r3, #22
 8007252:	d4ed      	bmi.n	8007230 <_vfiprintf_r+0x4c>
 8007254:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007256:	f7ff ff3f 	bl	80070d8 <__retarget_lock_release_recursive>
 800725a:	e7e9      	b.n	8007230 <_vfiprintf_r+0x4c>
 800725c:	2300      	movs	r3, #0
 800725e:	9309      	str	r3, [sp, #36]	; 0x24
 8007260:	2320      	movs	r3, #32
 8007262:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007266:	f8cd 800c 	str.w	r8, [sp, #12]
 800726a:	2330      	movs	r3, #48	; 0x30
 800726c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007430 <_vfiprintf_r+0x24c>
 8007270:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007274:	f04f 0901 	mov.w	r9, #1
 8007278:	4623      	mov	r3, r4
 800727a:	469a      	mov	sl, r3
 800727c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007280:	b10a      	cbz	r2, 8007286 <_vfiprintf_r+0xa2>
 8007282:	2a25      	cmp	r2, #37	; 0x25
 8007284:	d1f9      	bne.n	800727a <_vfiprintf_r+0x96>
 8007286:	ebba 0b04 	subs.w	fp, sl, r4
 800728a:	d00b      	beq.n	80072a4 <_vfiprintf_r+0xc0>
 800728c:	465b      	mov	r3, fp
 800728e:	4622      	mov	r2, r4
 8007290:	4629      	mov	r1, r5
 8007292:	4630      	mov	r0, r6
 8007294:	f7ff ff93 	bl	80071be <__sfputs_r>
 8007298:	3001      	adds	r0, #1
 800729a:	f000 80aa 	beq.w	80073f2 <_vfiprintf_r+0x20e>
 800729e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80072a0:	445a      	add	r2, fp
 80072a2:	9209      	str	r2, [sp, #36]	; 0x24
 80072a4:	f89a 3000 	ldrb.w	r3, [sl]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	f000 80a2 	beq.w	80073f2 <_vfiprintf_r+0x20e>
 80072ae:	2300      	movs	r3, #0
 80072b0:	f04f 32ff 	mov.w	r2, #4294967295
 80072b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80072b8:	f10a 0a01 	add.w	sl, sl, #1
 80072bc:	9304      	str	r3, [sp, #16]
 80072be:	9307      	str	r3, [sp, #28]
 80072c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80072c4:	931a      	str	r3, [sp, #104]	; 0x68
 80072c6:	4654      	mov	r4, sl
 80072c8:	2205      	movs	r2, #5
 80072ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072ce:	4858      	ldr	r0, [pc, #352]	; (8007430 <_vfiprintf_r+0x24c>)
 80072d0:	f7f8 ff8e 	bl	80001f0 <memchr>
 80072d4:	9a04      	ldr	r2, [sp, #16]
 80072d6:	b9d8      	cbnz	r0, 8007310 <_vfiprintf_r+0x12c>
 80072d8:	06d1      	lsls	r1, r2, #27
 80072da:	bf44      	itt	mi
 80072dc:	2320      	movmi	r3, #32
 80072de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80072e2:	0713      	lsls	r3, r2, #28
 80072e4:	bf44      	itt	mi
 80072e6:	232b      	movmi	r3, #43	; 0x2b
 80072e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80072ec:	f89a 3000 	ldrb.w	r3, [sl]
 80072f0:	2b2a      	cmp	r3, #42	; 0x2a
 80072f2:	d015      	beq.n	8007320 <_vfiprintf_r+0x13c>
 80072f4:	9a07      	ldr	r2, [sp, #28]
 80072f6:	4654      	mov	r4, sl
 80072f8:	2000      	movs	r0, #0
 80072fa:	f04f 0c0a 	mov.w	ip, #10
 80072fe:	4621      	mov	r1, r4
 8007300:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007304:	3b30      	subs	r3, #48	; 0x30
 8007306:	2b09      	cmp	r3, #9
 8007308:	d94e      	bls.n	80073a8 <_vfiprintf_r+0x1c4>
 800730a:	b1b0      	cbz	r0, 800733a <_vfiprintf_r+0x156>
 800730c:	9207      	str	r2, [sp, #28]
 800730e:	e014      	b.n	800733a <_vfiprintf_r+0x156>
 8007310:	eba0 0308 	sub.w	r3, r0, r8
 8007314:	fa09 f303 	lsl.w	r3, r9, r3
 8007318:	4313      	orrs	r3, r2
 800731a:	9304      	str	r3, [sp, #16]
 800731c:	46a2      	mov	sl, r4
 800731e:	e7d2      	b.n	80072c6 <_vfiprintf_r+0xe2>
 8007320:	9b03      	ldr	r3, [sp, #12]
 8007322:	1d19      	adds	r1, r3, #4
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	9103      	str	r1, [sp, #12]
 8007328:	2b00      	cmp	r3, #0
 800732a:	bfbb      	ittet	lt
 800732c:	425b      	neglt	r3, r3
 800732e:	f042 0202 	orrlt.w	r2, r2, #2
 8007332:	9307      	strge	r3, [sp, #28]
 8007334:	9307      	strlt	r3, [sp, #28]
 8007336:	bfb8      	it	lt
 8007338:	9204      	strlt	r2, [sp, #16]
 800733a:	7823      	ldrb	r3, [r4, #0]
 800733c:	2b2e      	cmp	r3, #46	; 0x2e
 800733e:	d10c      	bne.n	800735a <_vfiprintf_r+0x176>
 8007340:	7863      	ldrb	r3, [r4, #1]
 8007342:	2b2a      	cmp	r3, #42	; 0x2a
 8007344:	d135      	bne.n	80073b2 <_vfiprintf_r+0x1ce>
 8007346:	9b03      	ldr	r3, [sp, #12]
 8007348:	1d1a      	adds	r2, r3, #4
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	9203      	str	r2, [sp, #12]
 800734e:	2b00      	cmp	r3, #0
 8007350:	bfb8      	it	lt
 8007352:	f04f 33ff 	movlt.w	r3, #4294967295
 8007356:	3402      	adds	r4, #2
 8007358:	9305      	str	r3, [sp, #20]
 800735a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007440 <_vfiprintf_r+0x25c>
 800735e:	7821      	ldrb	r1, [r4, #0]
 8007360:	2203      	movs	r2, #3
 8007362:	4650      	mov	r0, sl
 8007364:	f7f8 ff44 	bl	80001f0 <memchr>
 8007368:	b140      	cbz	r0, 800737c <_vfiprintf_r+0x198>
 800736a:	2340      	movs	r3, #64	; 0x40
 800736c:	eba0 000a 	sub.w	r0, r0, sl
 8007370:	fa03 f000 	lsl.w	r0, r3, r0
 8007374:	9b04      	ldr	r3, [sp, #16]
 8007376:	4303      	orrs	r3, r0
 8007378:	3401      	adds	r4, #1
 800737a:	9304      	str	r3, [sp, #16]
 800737c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007380:	482c      	ldr	r0, [pc, #176]	; (8007434 <_vfiprintf_r+0x250>)
 8007382:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007386:	2206      	movs	r2, #6
 8007388:	f7f8 ff32 	bl	80001f0 <memchr>
 800738c:	2800      	cmp	r0, #0
 800738e:	d03f      	beq.n	8007410 <_vfiprintf_r+0x22c>
 8007390:	4b29      	ldr	r3, [pc, #164]	; (8007438 <_vfiprintf_r+0x254>)
 8007392:	bb1b      	cbnz	r3, 80073dc <_vfiprintf_r+0x1f8>
 8007394:	9b03      	ldr	r3, [sp, #12]
 8007396:	3307      	adds	r3, #7
 8007398:	f023 0307 	bic.w	r3, r3, #7
 800739c:	3308      	adds	r3, #8
 800739e:	9303      	str	r3, [sp, #12]
 80073a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073a2:	443b      	add	r3, r7
 80073a4:	9309      	str	r3, [sp, #36]	; 0x24
 80073a6:	e767      	b.n	8007278 <_vfiprintf_r+0x94>
 80073a8:	fb0c 3202 	mla	r2, ip, r2, r3
 80073ac:	460c      	mov	r4, r1
 80073ae:	2001      	movs	r0, #1
 80073b0:	e7a5      	b.n	80072fe <_vfiprintf_r+0x11a>
 80073b2:	2300      	movs	r3, #0
 80073b4:	3401      	adds	r4, #1
 80073b6:	9305      	str	r3, [sp, #20]
 80073b8:	4619      	mov	r1, r3
 80073ba:	f04f 0c0a 	mov.w	ip, #10
 80073be:	4620      	mov	r0, r4
 80073c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80073c4:	3a30      	subs	r2, #48	; 0x30
 80073c6:	2a09      	cmp	r2, #9
 80073c8:	d903      	bls.n	80073d2 <_vfiprintf_r+0x1ee>
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d0c5      	beq.n	800735a <_vfiprintf_r+0x176>
 80073ce:	9105      	str	r1, [sp, #20]
 80073d0:	e7c3      	b.n	800735a <_vfiprintf_r+0x176>
 80073d2:	fb0c 2101 	mla	r1, ip, r1, r2
 80073d6:	4604      	mov	r4, r0
 80073d8:	2301      	movs	r3, #1
 80073da:	e7f0      	b.n	80073be <_vfiprintf_r+0x1da>
 80073dc:	ab03      	add	r3, sp, #12
 80073de:	9300      	str	r3, [sp, #0]
 80073e0:	462a      	mov	r2, r5
 80073e2:	4b16      	ldr	r3, [pc, #88]	; (800743c <_vfiprintf_r+0x258>)
 80073e4:	a904      	add	r1, sp, #16
 80073e6:	4630      	mov	r0, r6
 80073e8:	f7fd feba 	bl	8005160 <_printf_float>
 80073ec:	4607      	mov	r7, r0
 80073ee:	1c78      	adds	r0, r7, #1
 80073f0:	d1d6      	bne.n	80073a0 <_vfiprintf_r+0x1bc>
 80073f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80073f4:	07d9      	lsls	r1, r3, #31
 80073f6:	d405      	bmi.n	8007404 <_vfiprintf_r+0x220>
 80073f8:	89ab      	ldrh	r3, [r5, #12]
 80073fa:	059a      	lsls	r2, r3, #22
 80073fc:	d402      	bmi.n	8007404 <_vfiprintf_r+0x220>
 80073fe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007400:	f7ff fe6a 	bl	80070d8 <__retarget_lock_release_recursive>
 8007404:	89ab      	ldrh	r3, [r5, #12]
 8007406:	065b      	lsls	r3, r3, #25
 8007408:	f53f af12 	bmi.w	8007230 <_vfiprintf_r+0x4c>
 800740c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800740e:	e711      	b.n	8007234 <_vfiprintf_r+0x50>
 8007410:	ab03      	add	r3, sp, #12
 8007412:	9300      	str	r3, [sp, #0]
 8007414:	462a      	mov	r2, r5
 8007416:	4b09      	ldr	r3, [pc, #36]	; (800743c <_vfiprintf_r+0x258>)
 8007418:	a904      	add	r1, sp, #16
 800741a:	4630      	mov	r0, r6
 800741c:	f7fe f944 	bl	80056a8 <_printf_i>
 8007420:	e7e4      	b.n	80073ec <_vfiprintf_r+0x208>
 8007422:	bf00      	nop
 8007424:	08008514 	.word	0x08008514
 8007428:	08008534 	.word	0x08008534
 800742c:	080084f4 	.word	0x080084f4
 8007430:	0800839c 	.word	0x0800839c
 8007434:	080083a6 	.word	0x080083a6
 8007438:	08005161 	.word	0x08005161
 800743c:	080071bf 	.word	0x080071bf
 8007440:	080083a2 	.word	0x080083a2

08007444 <__swbuf_r>:
 8007444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007446:	460e      	mov	r6, r1
 8007448:	4614      	mov	r4, r2
 800744a:	4605      	mov	r5, r0
 800744c:	b118      	cbz	r0, 8007456 <__swbuf_r+0x12>
 800744e:	6983      	ldr	r3, [r0, #24]
 8007450:	b90b      	cbnz	r3, 8007456 <__swbuf_r+0x12>
 8007452:	f000 f9e7 	bl	8007824 <__sinit>
 8007456:	4b21      	ldr	r3, [pc, #132]	; (80074dc <__swbuf_r+0x98>)
 8007458:	429c      	cmp	r4, r3
 800745a:	d12b      	bne.n	80074b4 <__swbuf_r+0x70>
 800745c:	686c      	ldr	r4, [r5, #4]
 800745e:	69a3      	ldr	r3, [r4, #24]
 8007460:	60a3      	str	r3, [r4, #8]
 8007462:	89a3      	ldrh	r3, [r4, #12]
 8007464:	071a      	lsls	r2, r3, #28
 8007466:	d52f      	bpl.n	80074c8 <__swbuf_r+0x84>
 8007468:	6923      	ldr	r3, [r4, #16]
 800746a:	b36b      	cbz	r3, 80074c8 <__swbuf_r+0x84>
 800746c:	6923      	ldr	r3, [r4, #16]
 800746e:	6820      	ldr	r0, [r4, #0]
 8007470:	1ac0      	subs	r0, r0, r3
 8007472:	6963      	ldr	r3, [r4, #20]
 8007474:	b2f6      	uxtb	r6, r6
 8007476:	4283      	cmp	r3, r0
 8007478:	4637      	mov	r7, r6
 800747a:	dc04      	bgt.n	8007486 <__swbuf_r+0x42>
 800747c:	4621      	mov	r1, r4
 800747e:	4628      	mov	r0, r5
 8007480:	f000 f93c 	bl	80076fc <_fflush_r>
 8007484:	bb30      	cbnz	r0, 80074d4 <__swbuf_r+0x90>
 8007486:	68a3      	ldr	r3, [r4, #8]
 8007488:	3b01      	subs	r3, #1
 800748a:	60a3      	str	r3, [r4, #8]
 800748c:	6823      	ldr	r3, [r4, #0]
 800748e:	1c5a      	adds	r2, r3, #1
 8007490:	6022      	str	r2, [r4, #0]
 8007492:	701e      	strb	r6, [r3, #0]
 8007494:	6963      	ldr	r3, [r4, #20]
 8007496:	3001      	adds	r0, #1
 8007498:	4283      	cmp	r3, r0
 800749a:	d004      	beq.n	80074a6 <__swbuf_r+0x62>
 800749c:	89a3      	ldrh	r3, [r4, #12]
 800749e:	07db      	lsls	r3, r3, #31
 80074a0:	d506      	bpl.n	80074b0 <__swbuf_r+0x6c>
 80074a2:	2e0a      	cmp	r6, #10
 80074a4:	d104      	bne.n	80074b0 <__swbuf_r+0x6c>
 80074a6:	4621      	mov	r1, r4
 80074a8:	4628      	mov	r0, r5
 80074aa:	f000 f927 	bl	80076fc <_fflush_r>
 80074ae:	b988      	cbnz	r0, 80074d4 <__swbuf_r+0x90>
 80074b0:	4638      	mov	r0, r7
 80074b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80074b4:	4b0a      	ldr	r3, [pc, #40]	; (80074e0 <__swbuf_r+0x9c>)
 80074b6:	429c      	cmp	r4, r3
 80074b8:	d101      	bne.n	80074be <__swbuf_r+0x7a>
 80074ba:	68ac      	ldr	r4, [r5, #8]
 80074bc:	e7cf      	b.n	800745e <__swbuf_r+0x1a>
 80074be:	4b09      	ldr	r3, [pc, #36]	; (80074e4 <__swbuf_r+0xa0>)
 80074c0:	429c      	cmp	r4, r3
 80074c2:	bf08      	it	eq
 80074c4:	68ec      	ldreq	r4, [r5, #12]
 80074c6:	e7ca      	b.n	800745e <__swbuf_r+0x1a>
 80074c8:	4621      	mov	r1, r4
 80074ca:	4628      	mov	r0, r5
 80074cc:	f000 f81a 	bl	8007504 <__swsetup_r>
 80074d0:	2800      	cmp	r0, #0
 80074d2:	d0cb      	beq.n	800746c <__swbuf_r+0x28>
 80074d4:	f04f 37ff 	mov.w	r7, #4294967295
 80074d8:	e7ea      	b.n	80074b0 <__swbuf_r+0x6c>
 80074da:	bf00      	nop
 80074dc:	08008514 	.word	0x08008514
 80074e0:	08008534 	.word	0x08008534
 80074e4:	080084f4 	.word	0x080084f4

080074e8 <__ascii_wctomb>:
 80074e8:	b149      	cbz	r1, 80074fe <__ascii_wctomb+0x16>
 80074ea:	2aff      	cmp	r2, #255	; 0xff
 80074ec:	bf85      	ittet	hi
 80074ee:	238a      	movhi	r3, #138	; 0x8a
 80074f0:	6003      	strhi	r3, [r0, #0]
 80074f2:	700a      	strbls	r2, [r1, #0]
 80074f4:	f04f 30ff 	movhi.w	r0, #4294967295
 80074f8:	bf98      	it	ls
 80074fa:	2001      	movls	r0, #1
 80074fc:	4770      	bx	lr
 80074fe:	4608      	mov	r0, r1
 8007500:	4770      	bx	lr
	...

08007504 <__swsetup_r>:
 8007504:	4b32      	ldr	r3, [pc, #200]	; (80075d0 <__swsetup_r+0xcc>)
 8007506:	b570      	push	{r4, r5, r6, lr}
 8007508:	681d      	ldr	r5, [r3, #0]
 800750a:	4606      	mov	r6, r0
 800750c:	460c      	mov	r4, r1
 800750e:	b125      	cbz	r5, 800751a <__swsetup_r+0x16>
 8007510:	69ab      	ldr	r3, [r5, #24]
 8007512:	b913      	cbnz	r3, 800751a <__swsetup_r+0x16>
 8007514:	4628      	mov	r0, r5
 8007516:	f000 f985 	bl	8007824 <__sinit>
 800751a:	4b2e      	ldr	r3, [pc, #184]	; (80075d4 <__swsetup_r+0xd0>)
 800751c:	429c      	cmp	r4, r3
 800751e:	d10f      	bne.n	8007540 <__swsetup_r+0x3c>
 8007520:	686c      	ldr	r4, [r5, #4]
 8007522:	89a3      	ldrh	r3, [r4, #12]
 8007524:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007528:	0719      	lsls	r1, r3, #28
 800752a:	d42c      	bmi.n	8007586 <__swsetup_r+0x82>
 800752c:	06dd      	lsls	r5, r3, #27
 800752e:	d411      	bmi.n	8007554 <__swsetup_r+0x50>
 8007530:	2309      	movs	r3, #9
 8007532:	6033      	str	r3, [r6, #0]
 8007534:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007538:	81a3      	strh	r3, [r4, #12]
 800753a:	f04f 30ff 	mov.w	r0, #4294967295
 800753e:	e03e      	b.n	80075be <__swsetup_r+0xba>
 8007540:	4b25      	ldr	r3, [pc, #148]	; (80075d8 <__swsetup_r+0xd4>)
 8007542:	429c      	cmp	r4, r3
 8007544:	d101      	bne.n	800754a <__swsetup_r+0x46>
 8007546:	68ac      	ldr	r4, [r5, #8]
 8007548:	e7eb      	b.n	8007522 <__swsetup_r+0x1e>
 800754a:	4b24      	ldr	r3, [pc, #144]	; (80075dc <__swsetup_r+0xd8>)
 800754c:	429c      	cmp	r4, r3
 800754e:	bf08      	it	eq
 8007550:	68ec      	ldreq	r4, [r5, #12]
 8007552:	e7e6      	b.n	8007522 <__swsetup_r+0x1e>
 8007554:	0758      	lsls	r0, r3, #29
 8007556:	d512      	bpl.n	800757e <__swsetup_r+0x7a>
 8007558:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800755a:	b141      	cbz	r1, 800756e <__swsetup_r+0x6a>
 800755c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007560:	4299      	cmp	r1, r3
 8007562:	d002      	beq.n	800756a <__swsetup_r+0x66>
 8007564:	4630      	mov	r0, r6
 8007566:	f7fd fc7b 	bl	8004e60 <_free_r>
 800756a:	2300      	movs	r3, #0
 800756c:	6363      	str	r3, [r4, #52]	; 0x34
 800756e:	89a3      	ldrh	r3, [r4, #12]
 8007570:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007574:	81a3      	strh	r3, [r4, #12]
 8007576:	2300      	movs	r3, #0
 8007578:	6063      	str	r3, [r4, #4]
 800757a:	6923      	ldr	r3, [r4, #16]
 800757c:	6023      	str	r3, [r4, #0]
 800757e:	89a3      	ldrh	r3, [r4, #12]
 8007580:	f043 0308 	orr.w	r3, r3, #8
 8007584:	81a3      	strh	r3, [r4, #12]
 8007586:	6923      	ldr	r3, [r4, #16]
 8007588:	b94b      	cbnz	r3, 800759e <__swsetup_r+0x9a>
 800758a:	89a3      	ldrh	r3, [r4, #12]
 800758c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007590:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007594:	d003      	beq.n	800759e <__swsetup_r+0x9a>
 8007596:	4621      	mov	r1, r4
 8007598:	4630      	mov	r0, r6
 800759a:	f000 fa05 	bl	80079a8 <__smakebuf_r>
 800759e:	89a0      	ldrh	r0, [r4, #12]
 80075a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80075a4:	f010 0301 	ands.w	r3, r0, #1
 80075a8:	d00a      	beq.n	80075c0 <__swsetup_r+0xbc>
 80075aa:	2300      	movs	r3, #0
 80075ac:	60a3      	str	r3, [r4, #8]
 80075ae:	6963      	ldr	r3, [r4, #20]
 80075b0:	425b      	negs	r3, r3
 80075b2:	61a3      	str	r3, [r4, #24]
 80075b4:	6923      	ldr	r3, [r4, #16]
 80075b6:	b943      	cbnz	r3, 80075ca <__swsetup_r+0xc6>
 80075b8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80075bc:	d1ba      	bne.n	8007534 <__swsetup_r+0x30>
 80075be:	bd70      	pop	{r4, r5, r6, pc}
 80075c0:	0781      	lsls	r1, r0, #30
 80075c2:	bf58      	it	pl
 80075c4:	6963      	ldrpl	r3, [r4, #20]
 80075c6:	60a3      	str	r3, [r4, #8]
 80075c8:	e7f4      	b.n	80075b4 <__swsetup_r+0xb0>
 80075ca:	2000      	movs	r0, #0
 80075cc:	e7f7      	b.n	80075be <__swsetup_r+0xba>
 80075ce:	bf00      	nop
 80075d0:	2000000c 	.word	0x2000000c
 80075d4:	08008514 	.word	0x08008514
 80075d8:	08008534 	.word	0x08008534
 80075dc:	080084f4 	.word	0x080084f4

080075e0 <abort>:
 80075e0:	b508      	push	{r3, lr}
 80075e2:	2006      	movs	r0, #6
 80075e4:	f000 fa50 	bl	8007a88 <raise>
 80075e8:	2001      	movs	r0, #1
 80075ea:	f7fa fbbd 	bl	8001d68 <_exit>
	...

080075f0 <__sflush_r>:
 80075f0:	898a      	ldrh	r2, [r1, #12]
 80075f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075f6:	4605      	mov	r5, r0
 80075f8:	0710      	lsls	r0, r2, #28
 80075fa:	460c      	mov	r4, r1
 80075fc:	d458      	bmi.n	80076b0 <__sflush_r+0xc0>
 80075fe:	684b      	ldr	r3, [r1, #4]
 8007600:	2b00      	cmp	r3, #0
 8007602:	dc05      	bgt.n	8007610 <__sflush_r+0x20>
 8007604:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007606:	2b00      	cmp	r3, #0
 8007608:	dc02      	bgt.n	8007610 <__sflush_r+0x20>
 800760a:	2000      	movs	r0, #0
 800760c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007610:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007612:	2e00      	cmp	r6, #0
 8007614:	d0f9      	beq.n	800760a <__sflush_r+0x1a>
 8007616:	2300      	movs	r3, #0
 8007618:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800761c:	682f      	ldr	r7, [r5, #0]
 800761e:	602b      	str	r3, [r5, #0]
 8007620:	d032      	beq.n	8007688 <__sflush_r+0x98>
 8007622:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007624:	89a3      	ldrh	r3, [r4, #12]
 8007626:	075a      	lsls	r2, r3, #29
 8007628:	d505      	bpl.n	8007636 <__sflush_r+0x46>
 800762a:	6863      	ldr	r3, [r4, #4]
 800762c:	1ac0      	subs	r0, r0, r3
 800762e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007630:	b10b      	cbz	r3, 8007636 <__sflush_r+0x46>
 8007632:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007634:	1ac0      	subs	r0, r0, r3
 8007636:	2300      	movs	r3, #0
 8007638:	4602      	mov	r2, r0
 800763a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800763c:	6a21      	ldr	r1, [r4, #32]
 800763e:	4628      	mov	r0, r5
 8007640:	47b0      	blx	r6
 8007642:	1c43      	adds	r3, r0, #1
 8007644:	89a3      	ldrh	r3, [r4, #12]
 8007646:	d106      	bne.n	8007656 <__sflush_r+0x66>
 8007648:	6829      	ldr	r1, [r5, #0]
 800764a:	291d      	cmp	r1, #29
 800764c:	d82c      	bhi.n	80076a8 <__sflush_r+0xb8>
 800764e:	4a2a      	ldr	r2, [pc, #168]	; (80076f8 <__sflush_r+0x108>)
 8007650:	40ca      	lsrs	r2, r1
 8007652:	07d6      	lsls	r6, r2, #31
 8007654:	d528      	bpl.n	80076a8 <__sflush_r+0xb8>
 8007656:	2200      	movs	r2, #0
 8007658:	6062      	str	r2, [r4, #4]
 800765a:	04d9      	lsls	r1, r3, #19
 800765c:	6922      	ldr	r2, [r4, #16]
 800765e:	6022      	str	r2, [r4, #0]
 8007660:	d504      	bpl.n	800766c <__sflush_r+0x7c>
 8007662:	1c42      	adds	r2, r0, #1
 8007664:	d101      	bne.n	800766a <__sflush_r+0x7a>
 8007666:	682b      	ldr	r3, [r5, #0]
 8007668:	b903      	cbnz	r3, 800766c <__sflush_r+0x7c>
 800766a:	6560      	str	r0, [r4, #84]	; 0x54
 800766c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800766e:	602f      	str	r7, [r5, #0]
 8007670:	2900      	cmp	r1, #0
 8007672:	d0ca      	beq.n	800760a <__sflush_r+0x1a>
 8007674:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007678:	4299      	cmp	r1, r3
 800767a:	d002      	beq.n	8007682 <__sflush_r+0x92>
 800767c:	4628      	mov	r0, r5
 800767e:	f7fd fbef 	bl	8004e60 <_free_r>
 8007682:	2000      	movs	r0, #0
 8007684:	6360      	str	r0, [r4, #52]	; 0x34
 8007686:	e7c1      	b.n	800760c <__sflush_r+0x1c>
 8007688:	6a21      	ldr	r1, [r4, #32]
 800768a:	2301      	movs	r3, #1
 800768c:	4628      	mov	r0, r5
 800768e:	47b0      	blx	r6
 8007690:	1c41      	adds	r1, r0, #1
 8007692:	d1c7      	bne.n	8007624 <__sflush_r+0x34>
 8007694:	682b      	ldr	r3, [r5, #0]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d0c4      	beq.n	8007624 <__sflush_r+0x34>
 800769a:	2b1d      	cmp	r3, #29
 800769c:	d001      	beq.n	80076a2 <__sflush_r+0xb2>
 800769e:	2b16      	cmp	r3, #22
 80076a0:	d101      	bne.n	80076a6 <__sflush_r+0xb6>
 80076a2:	602f      	str	r7, [r5, #0]
 80076a4:	e7b1      	b.n	800760a <__sflush_r+0x1a>
 80076a6:	89a3      	ldrh	r3, [r4, #12]
 80076a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80076ac:	81a3      	strh	r3, [r4, #12]
 80076ae:	e7ad      	b.n	800760c <__sflush_r+0x1c>
 80076b0:	690f      	ldr	r7, [r1, #16]
 80076b2:	2f00      	cmp	r7, #0
 80076b4:	d0a9      	beq.n	800760a <__sflush_r+0x1a>
 80076b6:	0793      	lsls	r3, r2, #30
 80076b8:	680e      	ldr	r6, [r1, #0]
 80076ba:	bf08      	it	eq
 80076bc:	694b      	ldreq	r3, [r1, #20]
 80076be:	600f      	str	r7, [r1, #0]
 80076c0:	bf18      	it	ne
 80076c2:	2300      	movne	r3, #0
 80076c4:	eba6 0807 	sub.w	r8, r6, r7
 80076c8:	608b      	str	r3, [r1, #8]
 80076ca:	f1b8 0f00 	cmp.w	r8, #0
 80076ce:	dd9c      	ble.n	800760a <__sflush_r+0x1a>
 80076d0:	6a21      	ldr	r1, [r4, #32]
 80076d2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80076d4:	4643      	mov	r3, r8
 80076d6:	463a      	mov	r2, r7
 80076d8:	4628      	mov	r0, r5
 80076da:	47b0      	blx	r6
 80076dc:	2800      	cmp	r0, #0
 80076de:	dc06      	bgt.n	80076ee <__sflush_r+0xfe>
 80076e0:	89a3      	ldrh	r3, [r4, #12]
 80076e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80076e6:	81a3      	strh	r3, [r4, #12]
 80076e8:	f04f 30ff 	mov.w	r0, #4294967295
 80076ec:	e78e      	b.n	800760c <__sflush_r+0x1c>
 80076ee:	4407      	add	r7, r0
 80076f0:	eba8 0800 	sub.w	r8, r8, r0
 80076f4:	e7e9      	b.n	80076ca <__sflush_r+0xda>
 80076f6:	bf00      	nop
 80076f8:	20400001 	.word	0x20400001

080076fc <_fflush_r>:
 80076fc:	b538      	push	{r3, r4, r5, lr}
 80076fe:	690b      	ldr	r3, [r1, #16]
 8007700:	4605      	mov	r5, r0
 8007702:	460c      	mov	r4, r1
 8007704:	b913      	cbnz	r3, 800770c <_fflush_r+0x10>
 8007706:	2500      	movs	r5, #0
 8007708:	4628      	mov	r0, r5
 800770a:	bd38      	pop	{r3, r4, r5, pc}
 800770c:	b118      	cbz	r0, 8007716 <_fflush_r+0x1a>
 800770e:	6983      	ldr	r3, [r0, #24]
 8007710:	b90b      	cbnz	r3, 8007716 <_fflush_r+0x1a>
 8007712:	f000 f887 	bl	8007824 <__sinit>
 8007716:	4b14      	ldr	r3, [pc, #80]	; (8007768 <_fflush_r+0x6c>)
 8007718:	429c      	cmp	r4, r3
 800771a:	d11b      	bne.n	8007754 <_fflush_r+0x58>
 800771c:	686c      	ldr	r4, [r5, #4]
 800771e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d0ef      	beq.n	8007706 <_fflush_r+0xa>
 8007726:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007728:	07d0      	lsls	r0, r2, #31
 800772a:	d404      	bmi.n	8007736 <_fflush_r+0x3a>
 800772c:	0599      	lsls	r1, r3, #22
 800772e:	d402      	bmi.n	8007736 <_fflush_r+0x3a>
 8007730:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007732:	f7ff fcd0 	bl	80070d6 <__retarget_lock_acquire_recursive>
 8007736:	4628      	mov	r0, r5
 8007738:	4621      	mov	r1, r4
 800773a:	f7ff ff59 	bl	80075f0 <__sflush_r>
 800773e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007740:	07da      	lsls	r2, r3, #31
 8007742:	4605      	mov	r5, r0
 8007744:	d4e0      	bmi.n	8007708 <_fflush_r+0xc>
 8007746:	89a3      	ldrh	r3, [r4, #12]
 8007748:	059b      	lsls	r3, r3, #22
 800774a:	d4dd      	bmi.n	8007708 <_fflush_r+0xc>
 800774c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800774e:	f7ff fcc3 	bl	80070d8 <__retarget_lock_release_recursive>
 8007752:	e7d9      	b.n	8007708 <_fflush_r+0xc>
 8007754:	4b05      	ldr	r3, [pc, #20]	; (800776c <_fflush_r+0x70>)
 8007756:	429c      	cmp	r4, r3
 8007758:	d101      	bne.n	800775e <_fflush_r+0x62>
 800775a:	68ac      	ldr	r4, [r5, #8]
 800775c:	e7df      	b.n	800771e <_fflush_r+0x22>
 800775e:	4b04      	ldr	r3, [pc, #16]	; (8007770 <_fflush_r+0x74>)
 8007760:	429c      	cmp	r4, r3
 8007762:	bf08      	it	eq
 8007764:	68ec      	ldreq	r4, [r5, #12]
 8007766:	e7da      	b.n	800771e <_fflush_r+0x22>
 8007768:	08008514 	.word	0x08008514
 800776c:	08008534 	.word	0x08008534
 8007770:	080084f4 	.word	0x080084f4

08007774 <std>:
 8007774:	2300      	movs	r3, #0
 8007776:	b510      	push	{r4, lr}
 8007778:	4604      	mov	r4, r0
 800777a:	e9c0 3300 	strd	r3, r3, [r0]
 800777e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007782:	6083      	str	r3, [r0, #8]
 8007784:	8181      	strh	r1, [r0, #12]
 8007786:	6643      	str	r3, [r0, #100]	; 0x64
 8007788:	81c2      	strh	r2, [r0, #14]
 800778a:	6183      	str	r3, [r0, #24]
 800778c:	4619      	mov	r1, r3
 800778e:	2208      	movs	r2, #8
 8007790:	305c      	adds	r0, #92	; 0x5c
 8007792:	f7fd fb5d 	bl	8004e50 <memset>
 8007796:	4b05      	ldr	r3, [pc, #20]	; (80077ac <std+0x38>)
 8007798:	6263      	str	r3, [r4, #36]	; 0x24
 800779a:	4b05      	ldr	r3, [pc, #20]	; (80077b0 <std+0x3c>)
 800779c:	62a3      	str	r3, [r4, #40]	; 0x28
 800779e:	4b05      	ldr	r3, [pc, #20]	; (80077b4 <std+0x40>)
 80077a0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80077a2:	4b05      	ldr	r3, [pc, #20]	; (80077b8 <std+0x44>)
 80077a4:	6224      	str	r4, [r4, #32]
 80077a6:	6323      	str	r3, [r4, #48]	; 0x30
 80077a8:	bd10      	pop	{r4, pc}
 80077aa:	bf00      	nop
 80077ac:	08007ac1 	.word	0x08007ac1
 80077b0:	08007ae3 	.word	0x08007ae3
 80077b4:	08007b1b 	.word	0x08007b1b
 80077b8:	08007b3f 	.word	0x08007b3f

080077bc <_cleanup_r>:
 80077bc:	4901      	ldr	r1, [pc, #4]	; (80077c4 <_cleanup_r+0x8>)
 80077be:	f000 b8af 	b.w	8007920 <_fwalk_reent>
 80077c2:	bf00      	nop
 80077c4:	080076fd 	.word	0x080076fd

080077c8 <__sfmoreglue>:
 80077c8:	b570      	push	{r4, r5, r6, lr}
 80077ca:	2268      	movs	r2, #104	; 0x68
 80077cc:	1e4d      	subs	r5, r1, #1
 80077ce:	4355      	muls	r5, r2
 80077d0:	460e      	mov	r6, r1
 80077d2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80077d6:	f7fd fbaf 	bl	8004f38 <_malloc_r>
 80077da:	4604      	mov	r4, r0
 80077dc:	b140      	cbz	r0, 80077f0 <__sfmoreglue+0x28>
 80077de:	2100      	movs	r1, #0
 80077e0:	e9c0 1600 	strd	r1, r6, [r0]
 80077e4:	300c      	adds	r0, #12
 80077e6:	60a0      	str	r0, [r4, #8]
 80077e8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80077ec:	f7fd fb30 	bl	8004e50 <memset>
 80077f0:	4620      	mov	r0, r4
 80077f2:	bd70      	pop	{r4, r5, r6, pc}

080077f4 <__sfp_lock_acquire>:
 80077f4:	4801      	ldr	r0, [pc, #4]	; (80077fc <__sfp_lock_acquire+0x8>)
 80077f6:	f7ff bc6e 	b.w	80070d6 <__retarget_lock_acquire_recursive>
 80077fa:	bf00      	nop
 80077fc:	20000381 	.word	0x20000381

08007800 <__sfp_lock_release>:
 8007800:	4801      	ldr	r0, [pc, #4]	; (8007808 <__sfp_lock_release+0x8>)
 8007802:	f7ff bc69 	b.w	80070d8 <__retarget_lock_release_recursive>
 8007806:	bf00      	nop
 8007808:	20000381 	.word	0x20000381

0800780c <__sinit_lock_acquire>:
 800780c:	4801      	ldr	r0, [pc, #4]	; (8007814 <__sinit_lock_acquire+0x8>)
 800780e:	f7ff bc62 	b.w	80070d6 <__retarget_lock_acquire_recursive>
 8007812:	bf00      	nop
 8007814:	20000382 	.word	0x20000382

08007818 <__sinit_lock_release>:
 8007818:	4801      	ldr	r0, [pc, #4]	; (8007820 <__sinit_lock_release+0x8>)
 800781a:	f7ff bc5d 	b.w	80070d8 <__retarget_lock_release_recursive>
 800781e:	bf00      	nop
 8007820:	20000382 	.word	0x20000382

08007824 <__sinit>:
 8007824:	b510      	push	{r4, lr}
 8007826:	4604      	mov	r4, r0
 8007828:	f7ff fff0 	bl	800780c <__sinit_lock_acquire>
 800782c:	69a3      	ldr	r3, [r4, #24]
 800782e:	b11b      	cbz	r3, 8007838 <__sinit+0x14>
 8007830:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007834:	f7ff bff0 	b.w	8007818 <__sinit_lock_release>
 8007838:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800783c:	6523      	str	r3, [r4, #80]	; 0x50
 800783e:	4b13      	ldr	r3, [pc, #76]	; (800788c <__sinit+0x68>)
 8007840:	4a13      	ldr	r2, [pc, #76]	; (8007890 <__sinit+0x6c>)
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	62a2      	str	r2, [r4, #40]	; 0x28
 8007846:	42a3      	cmp	r3, r4
 8007848:	bf04      	itt	eq
 800784a:	2301      	moveq	r3, #1
 800784c:	61a3      	streq	r3, [r4, #24]
 800784e:	4620      	mov	r0, r4
 8007850:	f000 f820 	bl	8007894 <__sfp>
 8007854:	6060      	str	r0, [r4, #4]
 8007856:	4620      	mov	r0, r4
 8007858:	f000 f81c 	bl	8007894 <__sfp>
 800785c:	60a0      	str	r0, [r4, #8]
 800785e:	4620      	mov	r0, r4
 8007860:	f000 f818 	bl	8007894 <__sfp>
 8007864:	2200      	movs	r2, #0
 8007866:	60e0      	str	r0, [r4, #12]
 8007868:	2104      	movs	r1, #4
 800786a:	6860      	ldr	r0, [r4, #4]
 800786c:	f7ff ff82 	bl	8007774 <std>
 8007870:	68a0      	ldr	r0, [r4, #8]
 8007872:	2201      	movs	r2, #1
 8007874:	2109      	movs	r1, #9
 8007876:	f7ff ff7d 	bl	8007774 <std>
 800787a:	68e0      	ldr	r0, [r4, #12]
 800787c:	2202      	movs	r2, #2
 800787e:	2112      	movs	r1, #18
 8007880:	f7ff ff78 	bl	8007774 <std>
 8007884:	2301      	movs	r3, #1
 8007886:	61a3      	str	r3, [r4, #24]
 8007888:	e7d2      	b.n	8007830 <__sinit+0xc>
 800788a:	bf00      	nop
 800788c:	08008178 	.word	0x08008178
 8007890:	080077bd 	.word	0x080077bd

08007894 <__sfp>:
 8007894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007896:	4607      	mov	r7, r0
 8007898:	f7ff ffac 	bl	80077f4 <__sfp_lock_acquire>
 800789c:	4b1e      	ldr	r3, [pc, #120]	; (8007918 <__sfp+0x84>)
 800789e:	681e      	ldr	r6, [r3, #0]
 80078a0:	69b3      	ldr	r3, [r6, #24]
 80078a2:	b913      	cbnz	r3, 80078aa <__sfp+0x16>
 80078a4:	4630      	mov	r0, r6
 80078a6:	f7ff ffbd 	bl	8007824 <__sinit>
 80078aa:	3648      	adds	r6, #72	; 0x48
 80078ac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80078b0:	3b01      	subs	r3, #1
 80078b2:	d503      	bpl.n	80078bc <__sfp+0x28>
 80078b4:	6833      	ldr	r3, [r6, #0]
 80078b6:	b30b      	cbz	r3, 80078fc <__sfp+0x68>
 80078b8:	6836      	ldr	r6, [r6, #0]
 80078ba:	e7f7      	b.n	80078ac <__sfp+0x18>
 80078bc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80078c0:	b9d5      	cbnz	r5, 80078f8 <__sfp+0x64>
 80078c2:	4b16      	ldr	r3, [pc, #88]	; (800791c <__sfp+0x88>)
 80078c4:	60e3      	str	r3, [r4, #12]
 80078c6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80078ca:	6665      	str	r5, [r4, #100]	; 0x64
 80078cc:	f7ff fc02 	bl	80070d4 <__retarget_lock_init_recursive>
 80078d0:	f7ff ff96 	bl	8007800 <__sfp_lock_release>
 80078d4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80078d8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80078dc:	6025      	str	r5, [r4, #0]
 80078de:	61a5      	str	r5, [r4, #24]
 80078e0:	2208      	movs	r2, #8
 80078e2:	4629      	mov	r1, r5
 80078e4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80078e8:	f7fd fab2 	bl	8004e50 <memset>
 80078ec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80078f0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80078f4:	4620      	mov	r0, r4
 80078f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80078f8:	3468      	adds	r4, #104	; 0x68
 80078fa:	e7d9      	b.n	80078b0 <__sfp+0x1c>
 80078fc:	2104      	movs	r1, #4
 80078fe:	4638      	mov	r0, r7
 8007900:	f7ff ff62 	bl	80077c8 <__sfmoreglue>
 8007904:	4604      	mov	r4, r0
 8007906:	6030      	str	r0, [r6, #0]
 8007908:	2800      	cmp	r0, #0
 800790a:	d1d5      	bne.n	80078b8 <__sfp+0x24>
 800790c:	f7ff ff78 	bl	8007800 <__sfp_lock_release>
 8007910:	230c      	movs	r3, #12
 8007912:	603b      	str	r3, [r7, #0]
 8007914:	e7ee      	b.n	80078f4 <__sfp+0x60>
 8007916:	bf00      	nop
 8007918:	08008178 	.word	0x08008178
 800791c:	ffff0001 	.word	0xffff0001

08007920 <_fwalk_reent>:
 8007920:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007924:	4606      	mov	r6, r0
 8007926:	4688      	mov	r8, r1
 8007928:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800792c:	2700      	movs	r7, #0
 800792e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007932:	f1b9 0901 	subs.w	r9, r9, #1
 8007936:	d505      	bpl.n	8007944 <_fwalk_reent+0x24>
 8007938:	6824      	ldr	r4, [r4, #0]
 800793a:	2c00      	cmp	r4, #0
 800793c:	d1f7      	bne.n	800792e <_fwalk_reent+0xe>
 800793e:	4638      	mov	r0, r7
 8007940:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007944:	89ab      	ldrh	r3, [r5, #12]
 8007946:	2b01      	cmp	r3, #1
 8007948:	d907      	bls.n	800795a <_fwalk_reent+0x3a>
 800794a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800794e:	3301      	adds	r3, #1
 8007950:	d003      	beq.n	800795a <_fwalk_reent+0x3a>
 8007952:	4629      	mov	r1, r5
 8007954:	4630      	mov	r0, r6
 8007956:	47c0      	blx	r8
 8007958:	4307      	orrs	r7, r0
 800795a:	3568      	adds	r5, #104	; 0x68
 800795c:	e7e9      	b.n	8007932 <_fwalk_reent+0x12>

0800795e <__swhatbuf_r>:
 800795e:	b570      	push	{r4, r5, r6, lr}
 8007960:	460e      	mov	r6, r1
 8007962:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007966:	2900      	cmp	r1, #0
 8007968:	b096      	sub	sp, #88	; 0x58
 800796a:	4614      	mov	r4, r2
 800796c:	461d      	mov	r5, r3
 800796e:	da08      	bge.n	8007982 <__swhatbuf_r+0x24>
 8007970:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007974:	2200      	movs	r2, #0
 8007976:	602a      	str	r2, [r5, #0]
 8007978:	061a      	lsls	r2, r3, #24
 800797a:	d410      	bmi.n	800799e <__swhatbuf_r+0x40>
 800797c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007980:	e00e      	b.n	80079a0 <__swhatbuf_r+0x42>
 8007982:	466a      	mov	r2, sp
 8007984:	f000 f902 	bl	8007b8c <_fstat_r>
 8007988:	2800      	cmp	r0, #0
 800798a:	dbf1      	blt.n	8007970 <__swhatbuf_r+0x12>
 800798c:	9a01      	ldr	r2, [sp, #4]
 800798e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007992:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007996:	425a      	negs	r2, r3
 8007998:	415a      	adcs	r2, r3
 800799a:	602a      	str	r2, [r5, #0]
 800799c:	e7ee      	b.n	800797c <__swhatbuf_r+0x1e>
 800799e:	2340      	movs	r3, #64	; 0x40
 80079a0:	2000      	movs	r0, #0
 80079a2:	6023      	str	r3, [r4, #0]
 80079a4:	b016      	add	sp, #88	; 0x58
 80079a6:	bd70      	pop	{r4, r5, r6, pc}

080079a8 <__smakebuf_r>:
 80079a8:	898b      	ldrh	r3, [r1, #12]
 80079aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80079ac:	079d      	lsls	r5, r3, #30
 80079ae:	4606      	mov	r6, r0
 80079b0:	460c      	mov	r4, r1
 80079b2:	d507      	bpl.n	80079c4 <__smakebuf_r+0x1c>
 80079b4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80079b8:	6023      	str	r3, [r4, #0]
 80079ba:	6123      	str	r3, [r4, #16]
 80079bc:	2301      	movs	r3, #1
 80079be:	6163      	str	r3, [r4, #20]
 80079c0:	b002      	add	sp, #8
 80079c2:	bd70      	pop	{r4, r5, r6, pc}
 80079c4:	ab01      	add	r3, sp, #4
 80079c6:	466a      	mov	r2, sp
 80079c8:	f7ff ffc9 	bl	800795e <__swhatbuf_r>
 80079cc:	9900      	ldr	r1, [sp, #0]
 80079ce:	4605      	mov	r5, r0
 80079d0:	4630      	mov	r0, r6
 80079d2:	f7fd fab1 	bl	8004f38 <_malloc_r>
 80079d6:	b948      	cbnz	r0, 80079ec <__smakebuf_r+0x44>
 80079d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80079dc:	059a      	lsls	r2, r3, #22
 80079de:	d4ef      	bmi.n	80079c0 <__smakebuf_r+0x18>
 80079e0:	f023 0303 	bic.w	r3, r3, #3
 80079e4:	f043 0302 	orr.w	r3, r3, #2
 80079e8:	81a3      	strh	r3, [r4, #12]
 80079ea:	e7e3      	b.n	80079b4 <__smakebuf_r+0xc>
 80079ec:	4b0d      	ldr	r3, [pc, #52]	; (8007a24 <__smakebuf_r+0x7c>)
 80079ee:	62b3      	str	r3, [r6, #40]	; 0x28
 80079f0:	89a3      	ldrh	r3, [r4, #12]
 80079f2:	6020      	str	r0, [r4, #0]
 80079f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079f8:	81a3      	strh	r3, [r4, #12]
 80079fa:	9b00      	ldr	r3, [sp, #0]
 80079fc:	6163      	str	r3, [r4, #20]
 80079fe:	9b01      	ldr	r3, [sp, #4]
 8007a00:	6120      	str	r0, [r4, #16]
 8007a02:	b15b      	cbz	r3, 8007a1c <__smakebuf_r+0x74>
 8007a04:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007a08:	4630      	mov	r0, r6
 8007a0a:	f000 f8d1 	bl	8007bb0 <_isatty_r>
 8007a0e:	b128      	cbz	r0, 8007a1c <__smakebuf_r+0x74>
 8007a10:	89a3      	ldrh	r3, [r4, #12]
 8007a12:	f023 0303 	bic.w	r3, r3, #3
 8007a16:	f043 0301 	orr.w	r3, r3, #1
 8007a1a:	81a3      	strh	r3, [r4, #12]
 8007a1c:	89a0      	ldrh	r0, [r4, #12]
 8007a1e:	4305      	orrs	r5, r0
 8007a20:	81a5      	strh	r5, [r4, #12]
 8007a22:	e7cd      	b.n	80079c0 <__smakebuf_r+0x18>
 8007a24:	080077bd 	.word	0x080077bd

08007a28 <_malloc_usable_size_r>:
 8007a28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a2c:	1f18      	subs	r0, r3, #4
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	bfbc      	itt	lt
 8007a32:	580b      	ldrlt	r3, [r1, r0]
 8007a34:	18c0      	addlt	r0, r0, r3
 8007a36:	4770      	bx	lr

08007a38 <_raise_r>:
 8007a38:	291f      	cmp	r1, #31
 8007a3a:	b538      	push	{r3, r4, r5, lr}
 8007a3c:	4604      	mov	r4, r0
 8007a3e:	460d      	mov	r5, r1
 8007a40:	d904      	bls.n	8007a4c <_raise_r+0x14>
 8007a42:	2316      	movs	r3, #22
 8007a44:	6003      	str	r3, [r0, #0]
 8007a46:	f04f 30ff 	mov.w	r0, #4294967295
 8007a4a:	bd38      	pop	{r3, r4, r5, pc}
 8007a4c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007a4e:	b112      	cbz	r2, 8007a56 <_raise_r+0x1e>
 8007a50:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007a54:	b94b      	cbnz	r3, 8007a6a <_raise_r+0x32>
 8007a56:	4620      	mov	r0, r4
 8007a58:	f000 f830 	bl	8007abc <_getpid_r>
 8007a5c:	462a      	mov	r2, r5
 8007a5e:	4601      	mov	r1, r0
 8007a60:	4620      	mov	r0, r4
 8007a62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007a66:	f000 b817 	b.w	8007a98 <_kill_r>
 8007a6a:	2b01      	cmp	r3, #1
 8007a6c:	d00a      	beq.n	8007a84 <_raise_r+0x4c>
 8007a6e:	1c59      	adds	r1, r3, #1
 8007a70:	d103      	bne.n	8007a7a <_raise_r+0x42>
 8007a72:	2316      	movs	r3, #22
 8007a74:	6003      	str	r3, [r0, #0]
 8007a76:	2001      	movs	r0, #1
 8007a78:	e7e7      	b.n	8007a4a <_raise_r+0x12>
 8007a7a:	2400      	movs	r4, #0
 8007a7c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007a80:	4628      	mov	r0, r5
 8007a82:	4798      	blx	r3
 8007a84:	2000      	movs	r0, #0
 8007a86:	e7e0      	b.n	8007a4a <_raise_r+0x12>

08007a88 <raise>:
 8007a88:	4b02      	ldr	r3, [pc, #8]	; (8007a94 <raise+0xc>)
 8007a8a:	4601      	mov	r1, r0
 8007a8c:	6818      	ldr	r0, [r3, #0]
 8007a8e:	f7ff bfd3 	b.w	8007a38 <_raise_r>
 8007a92:	bf00      	nop
 8007a94:	2000000c 	.word	0x2000000c

08007a98 <_kill_r>:
 8007a98:	b538      	push	{r3, r4, r5, lr}
 8007a9a:	4d07      	ldr	r5, [pc, #28]	; (8007ab8 <_kill_r+0x20>)
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	4604      	mov	r4, r0
 8007aa0:	4608      	mov	r0, r1
 8007aa2:	4611      	mov	r1, r2
 8007aa4:	602b      	str	r3, [r5, #0]
 8007aa6:	f7fa f94f 	bl	8001d48 <_kill>
 8007aaa:	1c43      	adds	r3, r0, #1
 8007aac:	d102      	bne.n	8007ab4 <_kill_r+0x1c>
 8007aae:	682b      	ldr	r3, [r5, #0]
 8007ab0:	b103      	cbz	r3, 8007ab4 <_kill_r+0x1c>
 8007ab2:	6023      	str	r3, [r4, #0]
 8007ab4:	bd38      	pop	{r3, r4, r5, pc}
 8007ab6:	bf00      	nop
 8007ab8:	2000037c 	.word	0x2000037c

08007abc <_getpid_r>:
 8007abc:	f7fa b93c 	b.w	8001d38 <_getpid>

08007ac0 <__sread>:
 8007ac0:	b510      	push	{r4, lr}
 8007ac2:	460c      	mov	r4, r1
 8007ac4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ac8:	f000 f894 	bl	8007bf4 <_read_r>
 8007acc:	2800      	cmp	r0, #0
 8007ace:	bfab      	itete	ge
 8007ad0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007ad2:	89a3      	ldrhlt	r3, [r4, #12]
 8007ad4:	181b      	addge	r3, r3, r0
 8007ad6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007ada:	bfac      	ite	ge
 8007adc:	6563      	strge	r3, [r4, #84]	; 0x54
 8007ade:	81a3      	strhlt	r3, [r4, #12]
 8007ae0:	bd10      	pop	{r4, pc}

08007ae2 <__swrite>:
 8007ae2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ae6:	461f      	mov	r7, r3
 8007ae8:	898b      	ldrh	r3, [r1, #12]
 8007aea:	05db      	lsls	r3, r3, #23
 8007aec:	4605      	mov	r5, r0
 8007aee:	460c      	mov	r4, r1
 8007af0:	4616      	mov	r6, r2
 8007af2:	d505      	bpl.n	8007b00 <__swrite+0x1e>
 8007af4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007af8:	2302      	movs	r3, #2
 8007afa:	2200      	movs	r2, #0
 8007afc:	f000 f868 	bl	8007bd0 <_lseek_r>
 8007b00:	89a3      	ldrh	r3, [r4, #12]
 8007b02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007b06:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007b0a:	81a3      	strh	r3, [r4, #12]
 8007b0c:	4632      	mov	r2, r6
 8007b0e:	463b      	mov	r3, r7
 8007b10:	4628      	mov	r0, r5
 8007b12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007b16:	f000 b817 	b.w	8007b48 <_write_r>

08007b1a <__sseek>:
 8007b1a:	b510      	push	{r4, lr}
 8007b1c:	460c      	mov	r4, r1
 8007b1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b22:	f000 f855 	bl	8007bd0 <_lseek_r>
 8007b26:	1c43      	adds	r3, r0, #1
 8007b28:	89a3      	ldrh	r3, [r4, #12]
 8007b2a:	bf15      	itete	ne
 8007b2c:	6560      	strne	r0, [r4, #84]	; 0x54
 8007b2e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007b32:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007b36:	81a3      	strheq	r3, [r4, #12]
 8007b38:	bf18      	it	ne
 8007b3a:	81a3      	strhne	r3, [r4, #12]
 8007b3c:	bd10      	pop	{r4, pc}

08007b3e <__sclose>:
 8007b3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b42:	f000 b813 	b.w	8007b6c <_close_r>
	...

08007b48 <_write_r>:
 8007b48:	b538      	push	{r3, r4, r5, lr}
 8007b4a:	4d07      	ldr	r5, [pc, #28]	; (8007b68 <_write_r+0x20>)
 8007b4c:	4604      	mov	r4, r0
 8007b4e:	4608      	mov	r0, r1
 8007b50:	4611      	mov	r1, r2
 8007b52:	2200      	movs	r2, #0
 8007b54:	602a      	str	r2, [r5, #0]
 8007b56:	461a      	mov	r2, r3
 8007b58:	f7fa f92d 	bl	8001db6 <_write>
 8007b5c:	1c43      	adds	r3, r0, #1
 8007b5e:	d102      	bne.n	8007b66 <_write_r+0x1e>
 8007b60:	682b      	ldr	r3, [r5, #0]
 8007b62:	b103      	cbz	r3, 8007b66 <_write_r+0x1e>
 8007b64:	6023      	str	r3, [r4, #0]
 8007b66:	bd38      	pop	{r3, r4, r5, pc}
 8007b68:	2000037c 	.word	0x2000037c

08007b6c <_close_r>:
 8007b6c:	b538      	push	{r3, r4, r5, lr}
 8007b6e:	4d06      	ldr	r5, [pc, #24]	; (8007b88 <_close_r+0x1c>)
 8007b70:	2300      	movs	r3, #0
 8007b72:	4604      	mov	r4, r0
 8007b74:	4608      	mov	r0, r1
 8007b76:	602b      	str	r3, [r5, #0]
 8007b78:	f7fa f939 	bl	8001dee <_close>
 8007b7c:	1c43      	adds	r3, r0, #1
 8007b7e:	d102      	bne.n	8007b86 <_close_r+0x1a>
 8007b80:	682b      	ldr	r3, [r5, #0]
 8007b82:	b103      	cbz	r3, 8007b86 <_close_r+0x1a>
 8007b84:	6023      	str	r3, [r4, #0]
 8007b86:	bd38      	pop	{r3, r4, r5, pc}
 8007b88:	2000037c 	.word	0x2000037c

08007b8c <_fstat_r>:
 8007b8c:	b538      	push	{r3, r4, r5, lr}
 8007b8e:	4d07      	ldr	r5, [pc, #28]	; (8007bac <_fstat_r+0x20>)
 8007b90:	2300      	movs	r3, #0
 8007b92:	4604      	mov	r4, r0
 8007b94:	4608      	mov	r0, r1
 8007b96:	4611      	mov	r1, r2
 8007b98:	602b      	str	r3, [r5, #0]
 8007b9a:	f7fa f934 	bl	8001e06 <_fstat>
 8007b9e:	1c43      	adds	r3, r0, #1
 8007ba0:	d102      	bne.n	8007ba8 <_fstat_r+0x1c>
 8007ba2:	682b      	ldr	r3, [r5, #0]
 8007ba4:	b103      	cbz	r3, 8007ba8 <_fstat_r+0x1c>
 8007ba6:	6023      	str	r3, [r4, #0]
 8007ba8:	bd38      	pop	{r3, r4, r5, pc}
 8007baa:	bf00      	nop
 8007bac:	2000037c 	.word	0x2000037c

08007bb0 <_isatty_r>:
 8007bb0:	b538      	push	{r3, r4, r5, lr}
 8007bb2:	4d06      	ldr	r5, [pc, #24]	; (8007bcc <_isatty_r+0x1c>)
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	4604      	mov	r4, r0
 8007bb8:	4608      	mov	r0, r1
 8007bba:	602b      	str	r3, [r5, #0]
 8007bbc:	f7fa f933 	bl	8001e26 <_isatty>
 8007bc0:	1c43      	adds	r3, r0, #1
 8007bc2:	d102      	bne.n	8007bca <_isatty_r+0x1a>
 8007bc4:	682b      	ldr	r3, [r5, #0]
 8007bc6:	b103      	cbz	r3, 8007bca <_isatty_r+0x1a>
 8007bc8:	6023      	str	r3, [r4, #0]
 8007bca:	bd38      	pop	{r3, r4, r5, pc}
 8007bcc:	2000037c 	.word	0x2000037c

08007bd0 <_lseek_r>:
 8007bd0:	b538      	push	{r3, r4, r5, lr}
 8007bd2:	4d07      	ldr	r5, [pc, #28]	; (8007bf0 <_lseek_r+0x20>)
 8007bd4:	4604      	mov	r4, r0
 8007bd6:	4608      	mov	r0, r1
 8007bd8:	4611      	mov	r1, r2
 8007bda:	2200      	movs	r2, #0
 8007bdc:	602a      	str	r2, [r5, #0]
 8007bde:	461a      	mov	r2, r3
 8007be0:	f7fa f92c 	bl	8001e3c <_lseek>
 8007be4:	1c43      	adds	r3, r0, #1
 8007be6:	d102      	bne.n	8007bee <_lseek_r+0x1e>
 8007be8:	682b      	ldr	r3, [r5, #0]
 8007bea:	b103      	cbz	r3, 8007bee <_lseek_r+0x1e>
 8007bec:	6023      	str	r3, [r4, #0]
 8007bee:	bd38      	pop	{r3, r4, r5, pc}
 8007bf0:	2000037c 	.word	0x2000037c

08007bf4 <_read_r>:
 8007bf4:	b538      	push	{r3, r4, r5, lr}
 8007bf6:	4d07      	ldr	r5, [pc, #28]	; (8007c14 <_read_r+0x20>)
 8007bf8:	4604      	mov	r4, r0
 8007bfa:	4608      	mov	r0, r1
 8007bfc:	4611      	mov	r1, r2
 8007bfe:	2200      	movs	r2, #0
 8007c00:	602a      	str	r2, [r5, #0]
 8007c02:	461a      	mov	r2, r3
 8007c04:	f7fa f8ba 	bl	8001d7c <_read>
 8007c08:	1c43      	adds	r3, r0, #1
 8007c0a:	d102      	bne.n	8007c12 <_read_r+0x1e>
 8007c0c:	682b      	ldr	r3, [r5, #0]
 8007c0e:	b103      	cbz	r3, 8007c12 <_read_r+0x1e>
 8007c10:	6023      	str	r3, [r4, #0]
 8007c12:	bd38      	pop	{r3, r4, r5, pc}
 8007c14:	2000037c 	.word	0x2000037c

08007c18 <atan>:
 8007c18:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c1c:	ec55 4b10 	vmov	r4, r5, d0
 8007c20:	4bc3      	ldr	r3, [pc, #780]	; (8007f30 <atan+0x318>)
 8007c22:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8007c26:	429e      	cmp	r6, r3
 8007c28:	46ab      	mov	fp, r5
 8007c2a:	dd18      	ble.n	8007c5e <atan+0x46>
 8007c2c:	4bc1      	ldr	r3, [pc, #772]	; (8007f34 <atan+0x31c>)
 8007c2e:	429e      	cmp	r6, r3
 8007c30:	dc01      	bgt.n	8007c36 <atan+0x1e>
 8007c32:	d109      	bne.n	8007c48 <atan+0x30>
 8007c34:	b144      	cbz	r4, 8007c48 <atan+0x30>
 8007c36:	4622      	mov	r2, r4
 8007c38:	462b      	mov	r3, r5
 8007c3a:	4620      	mov	r0, r4
 8007c3c:	4629      	mov	r1, r5
 8007c3e:	f7f8 fb2d 	bl	800029c <__adddf3>
 8007c42:	4604      	mov	r4, r0
 8007c44:	460d      	mov	r5, r1
 8007c46:	e006      	b.n	8007c56 <atan+0x3e>
 8007c48:	f1bb 0f00 	cmp.w	fp, #0
 8007c4c:	f300 8131 	bgt.w	8007eb2 <atan+0x29a>
 8007c50:	a59b      	add	r5, pc, #620	; (adr r5, 8007ec0 <atan+0x2a8>)
 8007c52:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007c56:	ec45 4b10 	vmov	d0, r4, r5
 8007c5a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c5e:	4bb6      	ldr	r3, [pc, #728]	; (8007f38 <atan+0x320>)
 8007c60:	429e      	cmp	r6, r3
 8007c62:	dc14      	bgt.n	8007c8e <atan+0x76>
 8007c64:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8007c68:	429e      	cmp	r6, r3
 8007c6a:	dc0d      	bgt.n	8007c88 <atan+0x70>
 8007c6c:	a396      	add	r3, pc, #600	; (adr r3, 8007ec8 <atan+0x2b0>)
 8007c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c72:	ee10 0a10 	vmov	r0, s0
 8007c76:	4629      	mov	r1, r5
 8007c78:	f7f8 fb10 	bl	800029c <__adddf3>
 8007c7c:	4baf      	ldr	r3, [pc, #700]	; (8007f3c <atan+0x324>)
 8007c7e:	2200      	movs	r2, #0
 8007c80:	f7f8 ff52 	bl	8000b28 <__aeabi_dcmpgt>
 8007c84:	2800      	cmp	r0, #0
 8007c86:	d1e6      	bne.n	8007c56 <atan+0x3e>
 8007c88:	f04f 3aff 	mov.w	sl, #4294967295
 8007c8c:	e02b      	b.n	8007ce6 <atan+0xce>
 8007c8e:	f000 f963 	bl	8007f58 <fabs>
 8007c92:	4bab      	ldr	r3, [pc, #684]	; (8007f40 <atan+0x328>)
 8007c94:	429e      	cmp	r6, r3
 8007c96:	ec55 4b10 	vmov	r4, r5, d0
 8007c9a:	f300 80bf 	bgt.w	8007e1c <atan+0x204>
 8007c9e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8007ca2:	429e      	cmp	r6, r3
 8007ca4:	f300 80a0 	bgt.w	8007de8 <atan+0x1d0>
 8007ca8:	ee10 2a10 	vmov	r2, s0
 8007cac:	ee10 0a10 	vmov	r0, s0
 8007cb0:	462b      	mov	r3, r5
 8007cb2:	4629      	mov	r1, r5
 8007cb4:	f7f8 faf2 	bl	800029c <__adddf3>
 8007cb8:	4ba0      	ldr	r3, [pc, #640]	; (8007f3c <atan+0x324>)
 8007cba:	2200      	movs	r2, #0
 8007cbc:	f7f8 faec 	bl	8000298 <__aeabi_dsub>
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	4606      	mov	r6, r0
 8007cc4:	460f      	mov	r7, r1
 8007cc6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007cca:	4620      	mov	r0, r4
 8007ccc:	4629      	mov	r1, r5
 8007cce:	f7f8 fae5 	bl	800029c <__adddf3>
 8007cd2:	4602      	mov	r2, r0
 8007cd4:	460b      	mov	r3, r1
 8007cd6:	4630      	mov	r0, r6
 8007cd8:	4639      	mov	r1, r7
 8007cda:	f7f8 fdbf 	bl	800085c <__aeabi_ddiv>
 8007cde:	f04f 0a00 	mov.w	sl, #0
 8007ce2:	4604      	mov	r4, r0
 8007ce4:	460d      	mov	r5, r1
 8007ce6:	4622      	mov	r2, r4
 8007ce8:	462b      	mov	r3, r5
 8007cea:	4620      	mov	r0, r4
 8007cec:	4629      	mov	r1, r5
 8007cee:	f7f8 fc8b 	bl	8000608 <__aeabi_dmul>
 8007cf2:	4602      	mov	r2, r0
 8007cf4:	460b      	mov	r3, r1
 8007cf6:	4680      	mov	r8, r0
 8007cf8:	4689      	mov	r9, r1
 8007cfa:	f7f8 fc85 	bl	8000608 <__aeabi_dmul>
 8007cfe:	a374      	add	r3, pc, #464	; (adr r3, 8007ed0 <atan+0x2b8>)
 8007d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d04:	4606      	mov	r6, r0
 8007d06:	460f      	mov	r7, r1
 8007d08:	f7f8 fc7e 	bl	8000608 <__aeabi_dmul>
 8007d0c:	a372      	add	r3, pc, #456	; (adr r3, 8007ed8 <atan+0x2c0>)
 8007d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d12:	f7f8 fac3 	bl	800029c <__adddf3>
 8007d16:	4632      	mov	r2, r6
 8007d18:	463b      	mov	r3, r7
 8007d1a:	f7f8 fc75 	bl	8000608 <__aeabi_dmul>
 8007d1e:	a370      	add	r3, pc, #448	; (adr r3, 8007ee0 <atan+0x2c8>)
 8007d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d24:	f7f8 faba 	bl	800029c <__adddf3>
 8007d28:	4632      	mov	r2, r6
 8007d2a:	463b      	mov	r3, r7
 8007d2c:	f7f8 fc6c 	bl	8000608 <__aeabi_dmul>
 8007d30:	a36d      	add	r3, pc, #436	; (adr r3, 8007ee8 <atan+0x2d0>)
 8007d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d36:	f7f8 fab1 	bl	800029c <__adddf3>
 8007d3a:	4632      	mov	r2, r6
 8007d3c:	463b      	mov	r3, r7
 8007d3e:	f7f8 fc63 	bl	8000608 <__aeabi_dmul>
 8007d42:	a36b      	add	r3, pc, #428	; (adr r3, 8007ef0 <atan+0x2d8>)
 8007d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d48:	f7f8 faa8 	bl	800029c <__adddf3>
 8007d4c:	4632      	mov	r2, r6
 8007d4e:	463b      	mov	r3, r7
 8007d50:	f7f8 fc5a 	bl	8000608 <__aeabi_dmul>
 8007d54:	a368      	add	r3, pc, #416	; (adr r3, 8007ef8 <atan+0x2e0>)
 8007d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d5a:	f7f8 fa9f 	bl	800029c <__adddf3>
 8007d5e:	4642      	mov	r2, r8
 8007d60:	464b      	mov	r3, r9
 8007d62:	f7f8 fc51 	bl	8000608 <__aeabi_dmul>
 8007d66:	a366      	add	r3, pc, #408	; (adr r3, 8007f00 <atan+0x2e8>)
 8007d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d6c:	4680      	mov	r8, r0
 8007d6e:	4689      	mov	r9, r1
 8007d70:	4630      	mov	r0, r6
 8007d72:	4639      	mov	r1, r7
 8007d74:	f7f8 fc48 	bl	8000608 <__aeabi_dmul>
 8007d78:	a363      	add	r3, pc, #396	; (adr r3, 8007f08 <atan+0x2f0>)
 8007d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d7e:	f7f8 fa8b 	bl	8000298 <__aeabi_dsub>
 8007d82:	4632      	mov	r2, r6
 8007d84:	463b      	mov	r3, r7
 8007d86:	f7f8 fc3f 	bl	8000608 <__aeabi_dmul>
 8007d8a:	a361      	add	r3, pc, #388	; (adr r3, 8007f10 <atan+0x2f8>)
 8007d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d90:	f7f8 fa82 	bl	8000298 <__aeabi_dsub>
 8007d94:	4632      	mov	r2, r6
 8007d96:	463b      	mov	r3, r7
 8007d98:	f7f8 fc36 	bl	8000608 <__aeabi_dmul>
 8007d9c:	a35e      	add	r3, pc, #376	; (adr r3, 8007f18 <atan+0x300>)
 8007d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007da2:	f7f8 fa79 	bl	8000298 <__aeabi_dsub>
 8007da6:	4632      	mov	r2, r6
 8007da8:	463b      	mov	r3, r7
 8007daa:	f7f8 fc2d 	bl	8000608 <__aeabi_dmul>
 8007dae:	a35c      	add	r3, pc, #368	; (adr r3, 8007f20 <atan+0x308>)
 8007db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007db4:	f7f8 fa70 	bl	8000298 <__aeabi_dsub>
 8007db8:	4632      	mov	r2, r6
 8007dba:	463b      	mov	r3, r7
 8007dbc:	f7f8 fc24 	bl	8000608 <__aeabi_dmul>
 8007dc0:	4602      	mov	r2, r0
 8007dc2:	460b      	mov	r3, r1
 8007dc4:	4640      	mov	r0, r8
 8007dc6:	4649      	mov	r1, r9
 8007dc8:	f7f8 fa68 	bl	800029c <__adddf3>
 8007dcc:	4622      	mov	r2, r4
 8007dce:	462b      	mov	r3, r5
 8007dd0:	f7f8 fc1a 	bl	8000608 <__aeabi_dmul>
 8007dd4:	f1ba 3fff 	cmp.w	sl, #4294967295
 8007dd8:	4602      	mov	r2, r0
 8007dda:	460b      	mov	r3, r1
 8007ddc:	d14b      	bne.n	8007e76 <atan+0x25e>
 8007dde:	4620      	mov	r0, r4
 8007de0:	4629      	mov	r1, r5
 8007de2:	f7f8 fa59 	bl	8000298 <__aeabi_dsub>
 8007de6:	e72c      	b.n	8007c42 <atan+0x2a>
 8007de8:	ee10 0a10 	vmov	r0, s0
 8007dec:	4b53      	ldr	r3, [pc, #332]	; (8007f3c <atan+0x324>)
 8007dee:	2200      	movs	r2, #0
 8007df0:	4629      	mov	r1, r5
 8007df2:	f7f8 fa51 	bl	8000298 <__aeabi_dsub>
 8007df6:	4b51      	ldr	r3, [pc, #324]	; (8007f3c <atan+0x324>)
 8007df8:	4606      	mov	r6, r0
 8007dfa:	460f      	mov	r7, r1
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	4620      	mov	r0, r4
 8007e00:	4629      	mov	r1, r5
 8007e02:	f7f8 fa4b 	bl	800029c <__adddf3>
 8007e06:	4602      	mov	r2, r0
 8007e08:	460b      	mov	r3, r1
 8007e0a:	4630      	mov	r0, r6
 8007e0c:	4639      	mov	r1, r7
 8007e0e:	f7f8 fd25 	bl	800085c <__aeabi_ddiv>
 8007e12:	f04f 0a01 	mov.w	sl, #1
 8007e16:	4604      	mov	r4, r0
 8007e18:	460d      	mov	r5, r1
 8007e1a:	e764      	b.n	8007ce6 <atan+0xce>
 8007e1c:	4b49      	ldr	r3, [pc, #292]	; (8007f44 <atan+0x32c>)
 8007e1e:	429e      	cmp	r6, r3
 8007e20:	da1d      	bge.n	8007e5e <atan+0x246>
 8007e22:	ee10 0a10 	vmov	r0, s0
 8007e26:	4b48      	ldr	r3, [pc, #288]	; (8007f48 <atan+0x330>)
 8007e28:	2200      	movs	r2, #0
 8007e2a:	4629      	mov	r1, r5
 8007e2c:	f7f8 fa34 	bl	8000298 <__aeabi_dsub>
 8007e30:	4b45      	ldr	r3, [pc, #276]	; (8007f48 <atan+0x330>)
 8007e32:	4606      	mov	r6, r0
 8007e34:	460f      	mov	r7, r1
 8007e36:	2200      	movs	r2, #0
 8007e38:	4620      	mov	r0, r4
 8007e3a:	4629      	mov	r1, r5
 8007e3c:	f7f8 fbe4 	bl	8000608 <__aeabi_dmul>
 8007e40:	4b3e      	ldr	r3, [pc, #248]	; (8007f3c <atan+0x324>)
 8007e42:	2200      	movs	r2, #0
 8007e44:	f7f8 fa2a 	bl	800029c <__adddf3>
 8007e48:	4602      	mov	r2, r0
 8007e4a:	460b      	mov	r3, r1
 8007e4c:	4630      	mov	r0, r6
 8007e4e:	4639      	mov	r1, r7
 8007e50:	f7f8 fd04 	bl	800085c <__aeabi_ddiv>
 8007e54:	f04f 0a02 	mov.w	sl, #2
 8007e58:	4604      	mov	r4, r0
 8007e5a:	460d      	mov	r5, r1
 8007e5c:	e743      	b.n	8007ce6 <atan+0xce>
 8007e5e:	462b      	mov	r3, r5
 8007e60:	ee10 2a10 	vmov	r2, s0
 8007e64:	4939      	ldr	r1, [pc, #228]	; (8007f4c <atan+0x334>)
 8007e66:	2000      	movs	r0, #0
 8007e68:	f7f8 fcf8 	bl	800085c <__aeabi_ddiv>
 8007e6c:	f04f 0a03 	mov.w	sl, #3
 8007e70:	4604      	mov	r4, r0
 8007e72:	460d      	mov	r5, r1
 8007e74:	e737      	b.n	8007ce6 <atan+0xce>
 8007e76:	4b36      	ldr	r3, [pc, #216]	; (8007f50 <atan+0x338>)
 8007e78:	4e36      	ldr	r6, [pc, #216]	; (8007f54 <atan+0x33c>)
 8007e7a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8007e7e:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8007e82:	e9da 2300 	ldrd	r2, r3, [sl]
 8007e86:	f7f8 fa07 	bl	8000298 <__aeabi_dsub>
 8007e8a:	4622      	mov	r2, r4
 8007e8c:	462b      	mov	r3, r5
 8007e8e:	f7f8 fa03 	bl	8000298 <__aeabi_dsub>
 8007e92:	4602      	mov	r2, r0
 8007e94:	460b      	mov	r3, r1
 8007e96:	e9d6 0100 	ldrd	r0, r1, [r6]
 8007e9a:	f7f8 f9fd 	bl	8000298 <__aeabi_dsub>
 8007e9e:	f1bb 0f00 	cmp.w	fp, #0
 8007ea2:	4604      	mov	r4, r0
 8007ea4:	460d      	mov	r5, r1
 8007ea6:	f6bf aed6 	bge.w	8007c56 <atan+0x3e>
 8007eaa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007eae:	461d      	mov	r5, r3
 8007eb0:	e6d1      	b.n	8007c56 <atan+0x3e>
 8007eb2:	a51d      	add	r5, pc, #116	; (adr r5, 8007f28 <atan+0x310>)
 8007eb4:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007eb8:	e6cd      	b.n	8007c56 <atan+0x3e>
 8007eba:	bf00      	nop
 8007ebc:	f3af 8000 	nop.w
 8007ec0:	54442d18 	.word	0x54442d18
 8007ec4:	bff921fb 	.word	0xbff921fb
 8007ec8:	8800759c 	.word	0x8800759c
 8007ecc:	7e37e43c 	.word	0x7e37e43c
 8007ed0:	e322da11 	.word	0xe322da11
 8007ed4:	3f90ad3a 	.word	0x3f90ad3a
 8007ed8:	24760deb 	.word	0x24760deb
 8007edc:	3fa97b4b 	.word	0x3fa97b4b
 8007ee0:	a0d03d51 	.word	0xa0d03d51
 8007ee4:	3fb10d66 	.word	0x3fb10d66
 8007ee8:	c54c206e 	.word	0xc54c206e
 8007eec:	3fb745cd 	.word	0x3fb745cd
 8007ef0:	920083ff 	.word	0x920083ff
 8007ef4:	3fc24924 	.word	0x3fc24924
 8007ef8:	5555550d 	.word	0x5555550d
 8007efc:	3fd55555 	.word	0x3fd55555
 8007f00:	2c6a6c2f 	.word	0x2c6a6c2f
 8007f04:	bfa2b444 	.word	0xbfa2b444
 8007f08:	52defd9a 	.word	0x52defd9a
 8007f0c:	3fadde2d 	.word	0x3fadde2d
 8007f10:	af749a6d 	.word	0xaf749a6d
 8007f14:	3fb3b0f2 	.word	0x3fb3b0f2
 8007f18:	fe231671 	.word	0xfe231671
 8007f1c:	3fbc71c6 	.word	0x3fbc71c6
 8007f20:	9998ebc4 	.word	0x9998ebc4
 8007f24:	3fc99999 	.word	0x3fc99999
 8007f28:	54442d18 	.word	0x54442d18
 8007f2c:	3ff921fb 	.word	0x3ff921fb
 8007f30:	440fffff 	.word	0x440fffff
 8007f34:	7ff00000 	.word	0x7ff00000
 8007f38:	3fdbffff 	.word	0x3fdbffff
 8007f3c:	3ff00000 	.word	0x3ff00000
 8007f40:	3ff2ffff 	.word	0x3ff2ffff
 8007f44:	40038000 	.word	0x40038000
 8007f48:	3ff80000 	.word	0x3ff80000
 8007f4c:	bff00000 	.word	0xbff00000
 8007f50:	08008578 	.word	0x08008578
 8007f54:	08008558 	.word	0x08008558

08007f58 <fabs>:
 8007f58:	ec51 0b10 	vmov	r0, r1, d0
 8007f5c:	ee10 2a10 	vmov	r2, s0
 8007f60:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007f64:	ec43 2b10 	vmov	d0, r2, r3
 8007f68:	4770      	bx	lr

08007f6a <sqrt>:
 8007f6a:	b538      	push	{r3, r4, r5, lr}
 8007f6c:	ed2d 8b02 	vpush	{d8}
 8007f70:	ec55 4b10 	vmov	r4, r5, d0
 8007f74:	f000 f826 	bl	8007fc4 <__ieee754_sqrt>
 8007f78:	4622      	mov	r2, r4
 8007f7a:	462b      	mov	r3, r5
 8007f7c:	4620      	mov	r0, r4
 8007f7e:	4629      	mov	r1, r5
 8007f80:	eeb0 8a40 	vmov.f32	s16, s0
 8007f84:	eef0 8a60 	vmov.f32	s17, s1
 8007f88:	f7f8 fdd8 	bl	8000b3c <__aeabi_dcmpun>
 8007f8c:	b990      	cbnz	r0, 8007fb4 <sqrt+0x4a>
 8007f8e:	2200      	movs	r2, #0
 8007f90:	2300      	movs	r3, #0
 8007f92:	4620      	mov	r0, r4
 8007f94:	4629      	mov	r1, r5
 8007f96:	f7f8 fda9 	bl	8000aec <__aeabi_dcmplt>
 8007f9a:	b158      	cbz	r0, 8007fb4 <sqrt+0x4a>
 8007f9c:	f7fc ff1e 	bl	8004ddc <__errno>
 8007fa0:	2321      	movs	r3, #33	; 0x21
 8007fa2:	6003      	str	r3, [r0, #0]
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	4610      	mov	r0, r2
 8007faa:	4619      	mov	r1, r3
 8007fac:	f7f8 fc56 	bl	800085c <__aeabi_ddiv>
 8007fb0:	ec41 0b18 	vmov	d8, r0, r1
 8007fb4:	eeb0 0a48 	vmov.f32	s0, s16
 8007fb8:	eef0 0a68 	vmov.f32	s1, s17
 8007fbc:	ecbd 8b02 	vpop	{d8}
 8007fc0:	bd38      	pop	{r3, r4, r5, pc}
	...

08007fc4 <__ieee754_sqrt>:
 8007fc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fc8:	ec55 4b10 	vmov	r4, r5, d0
 8007fcc:	4e55      	ldr	r6, [pc, #340]	; (8008124 <__ieee754_sqrt+0x160>)
 8007fce:	43ae      	bics	r6, r5
 8007fd0:	ee10 0a10 	vmov	r0, s0
 8007fd4:	ee10 3a10 	vmov	r3, s0
 8007fd8:	462a      	mov	r2, r5
 8007fda:	4629      	mov	r1, r5
 8007fdc:	d110      	bne.n	8008000 <__ieee754_sqrt+0x3c>
 8007fde:	ee10 2a10 	vmov	r2, s0
 8007fe2:	462b      	mov	r3, r5
 8007fe4:	f7f8 fb10 	bl	8000608 <__aeabi_dmul>
 8007fe8:	4602      	mov	r2, r0
 8007fea:	460b      	mov	r3, r1
 8007fec:	4620      	mov	r0, r4
 8007fee:	4629      	mov	r1, r5
 8007ff0:	f7f8 f954 	bl	800029c <__adddf3>
 8007ff4:	4604      	mov	r4, r0
 8007ff6:	460d      	mov	r5, r1
 8007ff8:	ec45 4b10 	vmov	d0, r4, r5
 8007ffc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008000:	2d00      	cmp	r5, #0
 8008002:	dc10      	bgt.n	8008026 <__ieee754_sqrt+0x62>
 8008004:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8008008:	4330      	orrs	r0, r6
 800800a:	d0f5      	beq.n	8007ff8 <__ieee754_sqrt+0x34>
 800800c:	b15d      	cbz	r5, 8008026 <__ieee754_sqrt+0x62>
 800800e:	ee10 2a10 	vmov	r2, s0
 8008012:	462b      	mov	r3, r5
 8008014:	ee10 0a10 	vmov	r0, s0
 8008018:	f7f8 f93e 	bl	8000298 <__aeabi_dsub>
 800801c:	4602      	mov	r2, r0
 800801e:	460b      	mov	r3, r1
 8008020:	f7f8 fc1c 	bl	800085c <__aeabi_ddiv>
 8008024:	e7e6      	b.n	8007ff4 <__ieee754_sqrt+0x30>
 8008026:	1512      	asrs	r2, r2, #20
 8008028:	d074      	beq.n	8008114 <__ieee754_sqrt+0x150>
 800802a:	07d4      	lsls	r4, r2, #31
 800802c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8008030:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8008034:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008038:	bf5e      	ittt	pl
 800803a:	0fda      	lsrpl	r2, r3, #31
 800803c:	005b      	lslpl	r3, r3, #1
 800803e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8008042:	2400      	movs	r4, #0
 8008044:	0fda      	lsrs	r2, r3, #31
 8008046:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800804a:	107f      	asrs	r7, r7, #1
 800804c:	005b      	lsls	r3, r3, #1
 800804e:	2516      	movs	r5, #22
 8008050:	4620      	mov	r0, r4
 8008052:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8008056:	1886      	adds	r6, r0, r2
 8008058:	428e      	cmp	r6, r1
 800805a:	bfde      	ittt	le
 800805c:	1b89      	suble	r1, r1, r6
 800805e:	18b0      	addle	r0, r6, r2
 8008060:	18a4      	addle	r4, r4, r2
 8008062:	0049      	lsls	r1, r1, #1
 8008064:	3d01      	subs	r5, #1
 8008066:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800806a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800806e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008072:	d1f0      	bne.n	8008056 <__ieee754_sqrt+0x92>
 8008074:	462a      	mov	r2, r5
 8008076:	f04f 0e20 	mov.w	lr, #32
 800807a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800807e:	4281      	cmp	r1, r0
 8008080:	eb06 0c05 	add.w	ip, r6, r5
 8008084:	dc02      	bgt.n	800808c <__ieee754_sqrt+0xc8>
 8008086:	d113      	bne.n	80080b0 <__ieee754_sqrt+0xec>
 8008088:	459c      	cmp	ip, r3
 800808a:	d811      	bhi.n	80080b0 <__ieee754_sqrt+0xec>
 800808c:	f1bc 0f00 	cmp.w	ip, #0
 8008090:	eb0c 0506 	add.w	r5, ip, r6
 8008094:	da43      	bge.n	800811e <__ieee754_sqrt+0x15a>
 8008096:	2d00      	cmp	r5, #0
 8008098:	db41      	blt.n	800811e <__ieee754_sqrt+0x15a>
 800809a:	f100 0801 	add.w	r8, r0, #1
 800809e:	1a09      	subs	r1, r1, r0
 80080a0:	459c      	cmp	ip, r3
 80080a2:	bf88      	it	hi
 80080a4:	f101 31ff 	addhi.w	r1, r1, #4294967295
 80080a8:	eba3 030c 	sub.w	r3, r3, ip
 80080ac:	4432      	add	r2, r6
 80080ae:	4640      	mov	r0, r8
 80080b0:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 80080b4:	f1be 0e01 	subs.w	lr, lr, #1
 80080b8:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 80080bc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80080c0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80080c4:	d1db      	bne.n	800807e <__ieee754_sqrt+0xba>
 80080c6:	430b      	orrs	r3, r1
 80080c8:	d006      	beq.n	80080d8 <__ieee754_sqrt+0x114>
 80080ca:	1c50      	adds	r0, r2, #1
 80080cc:	bf13      	iteet	ne
 80080ce:	3201      	addne	r2, #1
 80080d0:	3401      	addeq	r4, #1
 80080d2:	4672      	moveq	r2, lr
 80080d4:	f022 0201 	bicne.w	r2, r2, #1
 80080d8:	1063      	asrs	r3, r4, #1
 80080da:	0852      	lsrs	r2, r2, #1
 80080dc:	07e1      	lsls	r1, r4, #31
 80080de:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80080e2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80080e6:	bf48      	it	mi
 80080e8:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80080ec:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 80080f0:	4614      	mov	r4, r2
 80080f2:	e781      	b.n	8007ff8 <__ieee754_sqrt+0x34>
 80080f4:	0ad9      	lsrs	r1, r3, #11
 80080f6:	3815      	subs	r0, #21
 80080f8:	055b      	lsls	r3, r3, #21
 80080fa:	2900      	cmp	r1, #0
 80080fc:	d0fa      	beq.n	80080f4 <__ieee754_sqrt+0x130>
 80080fe:	02cd      	lsls	r5, r1, #11
 8008100:	d50a      	bpl.n	8008118 <__ieee754_sqrt+0x154>
 8008102:	f1c2 0420 	rsb	r4, r2, #32
 8008106:	fa23 f404 	lsr.w	r4, r3, r4
 800810a:	1e55      	subs	r5, r2, #1
 800810c:	4093      	lsls	r3, r2
 800810e:	4321      	orrs	r1, r4
 8008110:	1b42      	subs	r2, r0, r5
 8008112:	e78a      	b.n	800802a <__ieee754_sqrt+0x66>
 8008114:	4610      	mov	r0, r2
 8008116:	e7f0      	b.n	80080fa <__ieee754_sqrt+0x136>
 8008118:	0049      	lsls	r1, r1, #1
 800811a:	3201      	adds	r2, #1
 800811c:	e7ef      	b.n	80080fe <__ieee754_sqrt+0x13a>
 800811e:	4680      	mov	r8, r0
 8008120:	e7bd      	b.n	800809e <__ieee754_sqrt+0xda>
 8008122:	bf00      	nop
 8008124:	7ff00000 	.word	0x7ff00000

08008128 <_init>:
 8008128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800812a:	bf00      	nop
 800812c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800812e:	bc08      	pop	{r3}
 8008130:	469e      	mov	lr, r3
 8008132:	4770      	bx	lr

08008134 <_fini>:
 8008134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008136:	bf00      	nop
 8008138:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800813a:	bc08      	pop	{r3}
 800813c:	469e      	mov	lr, r3
 800813e:	4770      	bx	lr
